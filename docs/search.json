[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Shinylive in Quarto example",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 600\n\nfrom shiny import App, ui, render\nimport pandas as pd\nfrom pyodide.http import open_url\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\n# Define the directory and file path\nfile_path = open_url(\"https://raw.githubusercontent.com/Liem-Ngo/test-shiny/main/triz_39_1.csv\")\n\n# Define parameter mapping\nparameter_mapping = {\n    \"1. Trọng lượng đối tượng chuyển động\": 1,\n    \"2. Trọng lượng đối tượng bất động\": 2,\n    \"3. Độ dài đối tượng chuyển động\": 3,\n    \"4. Độ dài đối tượng bất động\": 4,\n    \"5. Diện tích đối tượng chuyển động\": 5,\n    \"6. Diện tích đối tượng bất động\": 6,\n    \"7. Thể tích đối tượng chuyển động\": 7,\n    \"8. Thể tích đối tượng bất động\": 8,\n    \"9. Vận tốc\": 9,\n    \"10. Lực\": 10,\n    \"11. Ứng suất, áp suất\": 11,\n    \"12. Hình dạng\": 12,\n    \"13. Tính ổn định của thành phần đối tượng\": 13,\n    \"14. Độ bền\": 14,\n    \"15. Thời hạn hoạt động của đối tượng chuyển động\": 15,\n    \"16. Thời hạn hoạt động của đối tượng bất động\": 16,\n    \"17. Nhiệt độ\": 17,\n    \"18. Độ chiếu sáng (độ rọi)\": 18,\n    \"19. Năng lượng tiêu hao bởi đối tượng chuyển động\": 19,\n    \"20. Năng lượng tiêu hao bởi đối tượng bất động\": 20,\n    \"21. Công suất\": 21,\n    \"22. Năng lượng mất mát\": 22,\n    \"23. Chất thể mất mát\": 23,\n    \"24. Thông tin mất mát\": 24,\n    \"25. Thời gian mất mát\": 25,\n    \"26. Lượng chất thể\": 26,\n    \"27. Độ tin cậy\": 27,\n    \"28. Độ chính xác trong đo lường\": 28,\n    \"29. Độ chính xác trong chế tạo\": 29,\n    \"30. Các nhân tố có hại từ bên ngoài tác động lên đối tượng\": 30,\n    \"31. Các nhân tố có hại sinh ra bởi chính đối tượng\": 31,\n    \"32. Tiện lợi trong chế tạo\": 32,\n    \"33. Tiện lợi trong sử dụng, vận hành\": 33,\n    \"34. Tiện lợi trong sửa chữa\": 34,\n    \"35. Độ thích nghi, tính phổ dụng (vạn năng)\": 35,\n    \"36. Độ phức tạp của thiết bị\": 36,\n    \"37. Độ phức tạp trong kiểm tra và đo lường\": 37,\n    \"38. Mức độ tự động hóa\": 38,\n    \"39. Năng suất\": 39\n}\n\n# Define creative principles mapping and replace &lt;br&gt; with a space\ncreative_principles = {\n    0: \"Lựa chọn tham số khác\",\n    1: \"Nguyên tắc phân nhỏ (Segmentation)\",\n    2: \"Nguyên tắc “tách khỏi” (Taking out)\",\n    3: \"Nguyên tắc phẩm chất cục bộ (Local quality)\",\n    4: \"Nguyên tắc phản đối xứng (Asymmetry)\",\n    5: \"Nguyên tắc kết hợp (Merging)\",\n    6: \"Nguyên tắc vạn năng (Universality)\",\n    7: \"Nguyên tắc “chứa trong” (Nested Doll)\",\n    8: \"Nguyên tắc phản trọng lượng (Anti-Weight)\",\n    9: \"Nguyên tắc gây ứng suất sơ bộ (Preliminary Anti-Action)\",\n    10: \"Nguyên tắc thực hiện sơ bộ (Preliminary Action)\",\n    11: \"Nguyên tắc dự phòng (Beforehand Cushioning)\",\n    12: \"Nguyên tắc đẳng thế (Equipotentiality)\",\n    13: \"Nguyên tắc đảo ngược (The Other Way Round)\",\n    14: \"Nguyên tắc cầu (tròn) hóa (Spheroidality - Curvature)\",\n    15: \"Nguyên tắc linh động (Dynamics)\",\n    16: \"Nguyên tắc giải “thiếu” hoặc “thừa” (Partial or Excessive Actions)\",\n    17: \"Nguyên tắc chuyển sang chiều khác (Another Dimension)\",\n    18: \"Nguyên tắc sử dụng các dao động cơ học (Mechanical vibration)\",\n    19: \"Nguyên tắc tác động theo chu kỳ (Periodic Action)\",\n    20: \"Nguyên tắc liên tục tác động có ích (Continuity of Useful Action)\",\n    21: \"Nguyên tắc “vượt nhanh” (Skipping)\",\n    22: \"Nguyên tắc biến hại thành lợi (\\\"Blessing in Disguise\\\" or \\\"Turn Lemons into Lemonade\\\")\",\n    23: \"Nguyên tắc quan hệ phản hồi (Feedback)\",\n    24: \"Nguyên tắc sử dụng trung gian (Intermediary)\",\n    25: \"Nguyên tắc tự phục vụ (Self-service)\",\n    26: \"Nguyên tắc sao chép (Copying)\",\n    27: \"Nguyên tắc “rẻ” thay cho “đắt” (Cheap Short-Living Objects)\",\n    28: \"Thay thế sơ đồ cơ học (Mechanics Substitution)\",\n    29: \"Sử dụng các kết cấu khí và lỏng (Pneumatics and Hydraulics)\",\n    30: \"Sử dụng vỏ dẻo và màng mỏng (Flexible Shells and Thin Films)\",\n    31: \"Sử dụng các vật liệu nhiều lỗ (Porous Materials)\",\n    32: \"Nguyên tắc thay đổi màu sắc (Color Changes)\",\n    33: \"Nguyên tắc đồng nhất (Homogeneity)\",\n    34: \"Nguyên tắc phân hủy hoặc tái sinh các phần (Discarding and Recovering)\",\n    35: \"Thay đổi các thông số hóa lý của đối tượng (Parameter Changes)\",\n    36: \"Sử dụng chuyển pha (Phase Transitions)\",\n    37: \"Sử dụng sự nở nhiệt (Thermal Expansion)\",\n    38: \"Sử dụng các chất oxy hóa mạnh (Strong Oxidants or Boosted Interactions)\",\n    39: \"Thay đổi độ trơ (Inert Atmosphere)\",\n    40: \"Sử dụng các vật liệu hợp thành (Composite Structures)\"\n}\n\n# Define the UI components\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.h3(\"Matrix 39\"),\n            ui.input_select(\n                \"col_select\",\n                \"Tốt lên:\",\n                list(parameter_mapping.keys()),\n                width=\"100%\"\n            ),\n            ui.input_select(\n                \"row_select\",\n                \"Xấu đi:\",\n                list(parameter_mapping.keys()),\n                width=\"100%\"\n            ),\n            ui.input_action_button(\"submitbutton\", \"Submit\", class_=\"btn btn-primary\", width=\"100%\"),\n        ),\n        ui.panel_main(\n            ui.h3(\" \"),\n            ui.output_table(\"selected_table\", class_=\"table table-sm table-striped\"),\n            ui.HTML(\"&lt;style&gt; .table { font-size: 15px; text-align: left; } &lt;/style&gt;\"),\n        ),\n        style=\"font-size: 15px; padding: 0px;\"\n    ),\n    style=\"font-size: 15px; padding: 0px;\"\n)\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Calc\n    def read_file():\n        return pd.read_csv(file_path, delimiter=';')\n\n    @reactive.Calc\n    def selected_value_calc():\n        df_matrix = read_file()\n        if df_matrix.empty:\n            return pd.DataFrame({\"Error\": [\"The data file could not be loaded.\"]})\n        \n        if input.submitbutton() &gt; 0:\n            row_select = input.row_select()\n            col_select = input.col_select()\n            row_idx = parameter_mapping[row_select] - 1  # Adjust for 0-based indexing\n            col_idx = parameter_mapping[col_select] - 1  # Adjust for 0-based indexing\n            value = df_matrix.iloc[row_idx, col_idx]\n            selected_values = [int(val) for val in str(value).split(',')]\n            result = pd.DataFrame({\n                \" \": selected_values,\n                \"Các Nguyên Tắc Sáng Tạo\": [creative_principles[val] for val in selected_values]\n            })\n            return result\n        return pd.DataFrame(columns=[\" \", \"Các Nguyên Tắc Sáng Tạo\"])\n\n    @output\n    @render.table\n    def selected_table():\n        return selected_value_calc()\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "help.html#wie-gehts",
    "href": "help.html#wie-gehts",
    "title": "test_shiny_python",
    "section": "wie geht’s",
    "text": "wie geht’s\nbalblaa"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Shinylive in Quarto example",
    "section": "",
    "text": "Editor with app\nIf you want to display an editor panel with along with the running application, use #| components: [editor, viewer]. Users will be able to use the editor to modify the code and re-run the application.\n#| standalone: true\n#| viewerHeight: 600\nfrom shiny import App, ui, render\nimport pandas as pd\nfrom pyodide.http import open_url\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\n# Define the directory and file path\nURL=\"https://raw.githubusercontent.com/Liem-Ngo/test-shiny/main/triz_45_1.csv\"\nfile_path = open_url(URL)\n\n# Define parameter mapping for 45x45 matrix\nparameter_mapping = {\n    \"1. Thiết Kế/Khả Năng/Phương Tiện (Design Spec/ Capability/Means)\": 1,\n    \"2. Chi Phí Thiết Kế (Design Cost)\": 2,\n    \"3. Thời Gian Thiết Kế (Design Time)\": 3,\n    \"4. Rủi Ro Thiết Kế (Design Risk)\": 4,\n    \"5. Giao Diện Thiết Kế (Design Interfaces)\": 5,\n    \"6. Quy Cách Sản Xuất/Khả Năng/Phương Tiện (Production Spec/Capability/Means)\": 6,\n    \"7. Chi Phí Sản Xuất (Production Cost)\": 7,\n    \"8. Thời Gian Sản Xuất (Production Time)\": 8,\n    \"9. Rủi Ro Sản Xuất (Production Risk)\": 9,\n    \"10. Giao Diện Sản Xuất (Production Interfaces)\": 10,\n    \"11. Thông Số/Khả Năng/Phương Tiện Cung Cấp (Supply Spec/Capability/Means)\": 11,\n    \"12. Chi Phí Cung Ứng (Supply Cost)\": 12,\n    \"13. Thời Gian Cung Ứng (Supply Time)\": 13,\n    \"14. Rủi Ro Nguồn Cung (Supply Risk)\": 14,\n    \"15. Giao Diện Cung Ứng (Supply Interfaces)\": 15,\n    \"16. Thông Số Hỗ Trợ/Khả Năng/Phương Tiện (Support Spec/ Capability/Means)\": 16,\n    \"17. Chi Phí Hỗ Trợ (Support Cost)\": 17,\n    \"18. Thời Gian Hỗ Trợ (Support Time)\": 18,\n    \"19. Rủi Ro Hỗ Trợ (Support Risk)\": 19,\n    \"20. Giao Diện Hỗ Trợ (Support Interfaces)\": 20,\n    \"21. Doanh Thu Khách Hàng (Customer Revenue)\": 21,\n    \"22. Nhu Cầu Thị Trường (Market Demand)\": 22,\n    \"23. Phản Hồi Của Khách Hàng (Customer Feedback)\": 23,\n    \"24. Lòng Trung Thành Của Khách Hàng (Customer Loyalty)\": 24,\n    \"25. Lượng Thông Tin (Amount Of Information)\": 25,\n    \"26. Lưu Lượng Truyền Thông (Communication Flow)\": 26,\n    \"27. Tính Tiện Lợi (Convenience)\": 27,\n    \"28. Khả Năng Thích Ứng/Tính Linh Hoạt (Adaptability/ Versatility)\": 28,\n    \"29. Độ Phức Tạp Của Hệ Thống (System Complexity)\": 29,\n    \"30. Độ Phức Tạp Kiểm Soát (Control Complexity)\": 30,\n    \"31. Áp Lực /Stress (Tension/Stress)\": 31,\n    \"32. Tính Ổn Định/Khả Năng Phục Hồi (Stability/Resilience)\": 32,\n    \"33. Tính Tự Chủ (Autonomy)\": 33,\n    \"34. Sự Gắn Kết (Belonging)\": 34,\n    \"35. Năng Lực Cạnh Tranh (Competence)\": 35,\n    \"36. Cảm Giác Về Sự Tiến Bộ (Sense Of Progress)\": 36,\n    \"37. Yếu Tố Vô Hình Tích Cực (Positive Intangibles)\": 37,\n    \"38. Yếu Tố Vô Hình Tiêu Cực (Negative Intangibles)\": 38,\n    \"39. Tin Tưởng (Trust)\": 39,\n    \"40. Sự Cam Kết (Engagement)\": 40,\n    \"41. Ý Nghĩa (Meaning)\": 41,\n    \"42. Khả Năng Đo Lường (Ability To Measure)\": 42,\n    \"43. Độ Chính Xác Của Phép Đo (Measurement Accuracy)\": 43,\n    \"44. Yếu Tố Có Hại Ảnh Hưởng Đến Hệ Thống (Harmful Factors Affecting System)\": 44,\n    \"45. Yếu Tố Có Hại Do Hệ Thống Tạo Ra (System Generated Harmful Factors)\": 45\n}\n\n\n# Define creative principles mapping and replace &lt;br&gt; with a space\ncreative_principles = {\n    0: \"Lựa chọn tham số khác\",\n    1: \"Nguyên tắc phân nhỏ (Segmentation)\",\n    2: \"Nguyên tắc “tách khỏi” (Taking out)\",\n    3: \"Nguyên tắc phẩm chất cục bộ (Local quality)\",\n    4: \"Nguyên tắc phản đối xứng (Asymmetry)\",\n    5: \"Nguyên tắc kết hợp (Merging)\",\n    6: \"Nguyên tắc vạn năng (Universality)\",\n    7: \"Nguyên tắc “chứa trong” (Nested Doll)\",\n    8: \"Nguyên tắc phản trọng lượng (Anti-Weight)\",\n    9: \"Nguyên tắc gây ứng suất sơ bộ (Preliminary Anti-Action)\",\n    10: \"Nguyên tắc thực hiện sơ bộ (Preliminary Action)\",\n    11: \"Nguyên tắc dự phòng (Beforehand Cushioning)\",\n    12: \"Nguyên tắc đẳng thế (Equipotentiality)\",\n    13: \"Nguyên tắc đảo ngược (The Other Way Round)\",\n    14: \"Nguyên tắc cầu (tròn) hóa (Spheroidality - Curvature)\",\n    15: \"Nguyên tắc linh động (Dynamics)\",\n    16: \"Nguyên tắc giải “thiếu” hoặc “thừa” (Partial or Excessive Actions)\",\n    17: \"Nguyên tắc chuyển sang chiều khác (Another Dimension)\",\n    18: \"Nguyên tắc sử dụng các dao động cơ học (Mechanical vibration)\",\n    19: \"Nguyên tắc tác động theo chu kỳ (Periodic Action)\",\n    20: \"Nguyên tắc liên tục tác động có ích (Continuity of Useful Action)\",\n    21: \"Nguyên tắc “vượt nhanh” (Skipping)\",\n    22: \"Nguyên tắc biến hại thành lợi (\\\"Blessing in Disguise\\\" or \\\"Turn Lemons into Lemonade\\\")\",\n    23: \"Nguyên tắc quan hệ phản hồi (Feedback)\",\n    24: \"Nguyên tắc sử dụng trung gian (Intermediary)\",\n    25: \"Nguyên tắc tự phục vụ (Self-service)\",\n    26: \"Nguyên tắc sao chép (Copying)\",\n    27: \"Nguyên tắc “rẻ” thay cho “đắt” (Cheap Short-Living Objects)\",\n    28: \"Thay thế sơ đồ cơ học (Mechanics Substitution)\",\n    29: \"Sử dụng các kết cấu khí và lỏng (Pneumatics and Hydraulics)\",\n    30: \"Sử dụng vỏ dẻo và màng mỏng (Flexible Shells and Thin Films)\",\n    31: \"Sử dụng các vật liệu nhiều lỗ (Porous Materials)\",\n    32: \"Nguyên tắc thay đổi màu sắc (Color Changes)\",\n    33: \"Nguyên tắc đồng nhất (Homogeneity)\",\n    34: \"Nguyên tắc phân hủy hoặc tái sinh các phần (Discarding and Recovering)\",\n    35: \"Thay đổi các thông số hóa lý của đối tượng (Parameter Changes)\",\n    36: \"Sử dụng chuyển pha (Phase Transitions)\",\n    37: \"Sử dụng sự nở nhiệt (Thermal Expansion)\",\n    38: \"Sử dụng các chất oxy hóa mạnh (Strong Oxidants or Boosted Interactions)\",\n    39: \"Thay đổi độ trơ (Inert Atmosphere)\",\n    40: \"Sử dụng các vật liệu hợp thành (Composite Structures)\"\n}\n\n# Define the UI components\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.h3(\"Matrix 45\"),\n            ui.input_select(\n                \"col_select\",\n                \"Tốt lên:\",\n                list(parameter_mapping.keys()),\n                width=\"100%\"\n            ),\n            ui.input_select(\n                \"row_select\",\n                \"Xấu đi:\",\n                list(parameter_mapping.keys()),\n                width=\"100%\"\n            ),\n            ui.input_action_button(\"submitbutton\", \"Submit\", class_=\"btn btn-primary\", width=\"100%\"),\n        ),\n        ui.panel_main(\n            ui.h3(\" \"),\n            ui.output_table(\"selected_table\", class_=\"table table-sm table-striped\"),\n            ui.HTML(\"&lt;style&gt; .table { font-size: 15px; text-align: left; } &lt;/style&gt;\"),\n        ),\n        style=\"font-size: 15px; padding: 0px;\"\n    ),\n    style=\"font-size: 15px; padding: 0px;\"\n)\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Calc\n    def read_file():\n        try:\n            df = pd.read_csv(file_path, delimiter=';')\n            return df\n        except Exception as e:\n            return pd.DataFrame({\"Error\": [f\"Could not load the file: {str(e)}\"]})\n\n    @reactive.Calc\n    def selected_value_calc():\n        df_matrix = read_file()\n        if \"Error\" in df_matrix.columns:\n            return df_matrix\n        \n        if input.submitbutton() &gt; 0:\n            row_select = input.row_select()\n            col_select = input.col_select()\n            row_idx = parameter_mapping[row_select] - 1 # Adjust for 0-based indexing\n            col_idx = parameter_mapping[col_select] - 1  # Adjust for 0-based indexing\n            try:\n                value = df_matrix.iloc[row_idx, col_idx]\n                selected_values = [int(val) for val in str(value).split(',')]\n                result = pd.DataFrame({\n                    \" \": selected_values,\n                    \"Các Nguyên Tắc Sáng Tạo\": [creative_principles[val] for val in selected_values]\n                })\n                return result\n            except Exception as e:\n                return pd.DataFrame({\"Error\": [f\"Error processing selection: {str(e)}\"]})\n        \n        return pd.DataFrame(columns=[\" \", \"Các Nguyên Tắc Sáng Tạo\"])\n\n    @output\n    @render.table\n    def selected_table():\n        return selected_value_calc()\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "50.html",
    "href": "50.html",
    "title": "Shinylive in Quarto example",
    "section": "",
    "text": "Editor with app\nIf you want to display an editor panel with along with the running application, use #| components: [editor, viewer]. Users will be able to use the editor to modify the code and re-run the application.\n#| standalone: true\n#| viewerHeight: 600\n#| echo: false\nfrom shiny import App, ui, render\nimport pandas as pd\nfrom pyodide.http import open_url\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\n# Define the directory and file path\nURL = \"https://raw.githubusercontent.com/Liem-Ngo/test-shiny/main/triz_50.csv\"\nfile_path = open_url(URL)\n\n# Define parameter mapping for 50x50 matrix\nparameter_mapping = {\n    \"1. Trọng Lượng Của Đối Tượng Chuyển Động (Weight of Moving Object)\": 1,\n    \"2. Trọng Lượng Của Đối Tượng Bất Động (Weight of Stationary Object)\": 2,\n    \"3. Độ Dài/ Góc Của Đối Tượng Chuyển Động (Length/Angle of Moving Object)\": 3,\n    \"4. Độ Dài/ Góc Của Đối Tượng Bất Động (Length/Angle of Stationary Object)\": 4,\n    \"5. Diện Tích Của Đối Tượng Chuyển Động (Area of Moving Object)\": 5,\n    \"6. Diện Tích Của Đối Tượng Bất Động (Area of Stationary Object)\": 6,\n    \"7. Thể Tích Đối Tượng Chuyển Động (Volume of Moving Object)\": 7,\n    \"8. Thể Tích Đối Tượng Bất Động (Volume of Stationary Object)\": 8,\n    \"9. Hình Dạng (Shape)\": 9,\n    \"10. Lượng Chất Thể (Amount of Substance)\": 10,\n    \"11. Lượng Thông Tin (Amount of Information)\": 11,\n    \"12. Thời Gian Hoạt Động Của Đối Tượng Chuyển Động (Duration of Action of Moving Object)\": 12,\n    \"13. Thời Gian Hoạt Động Của Đối Tượng Bất Động (Duration of Action of Stationary Object)\": 13,\n    \"14. Tốc Độ (Speed)\": 14,\n    \"15. Lực/ Momen Xoắn (Force/Torque)\": 15,\n    \"16. Năng Lượng Tiêu Hao Bởi Đối Tượng Chuyển Động (Energy Used by Moving Object)\": 16,\n    \"17. Năng Lượng Tiêu Hao Bởi Đối Tượng Bất Động (Energy Used by Stationary Object)\": 17,\n    \"18. Công Suất (Power)\": 18,\n    \"19. Ứng Suất/ Áp Suất (Stress/Pressure)\": 19,\n    \"20. Độ Bền (Strength)\": 20,\n    \"21. Độ Ổn Định (Stability)\": 21,\n    \"22. Nhiệt Độ (Temperature)\": 22,\n    \"23. Độ Chiếu Sáng (Illumination Intensity)\": 23,\n    \"24. Hiệu Quả Chức Năng (Function Efficiency)\": 24,\n    \"25. Chất Thể Mất Mát (Loss of Substance)\": 25,\n    \"26. Thời Gian Mất Mát (Loss of Time)\": 26,\n    \"27. Năng Lượng Mất Mát (Loss of Energy)\": 27,\n    \"28. Thông Tin Mất Mát (Loss of Information)\": 28,\n    \"29. Độ Ồn/ Nhiễu (Noise)\": 29,\n    \"30. Phát Thải Độc Hại (Harmful Emissions)\": 30,\n    \"31. Những Nhân Tố Có Hại Sinh Ra Bởi Đối Tượng (Other Harmful Effects Generated by System)\": 31,\n    \"32. Độ Thích Nghi (Adaptability/ Versatility)\": 32,\n    \"33. Khả Năng Tương Thích (Compatibility/ Connectability)\": 33,\n    \"34. Tiện Lợi Trong Hoạt Động (Trainability/Operability/Controllability)\": 34,\n    \"35. Độ Tin Cậy (Reliability/ Robustness)\": 35,\n    \"36. Khả Năng Sửa Chữa (Repairability)\": 36,\n    \"37. Độ Bảo Mật (Security)\": 37,\n    \"38. Độ An Toàn (Safety/ Vulnerability)\": 38,\n    \"39. Tính Thẩm Mỹ (Aesthetics/Appearance)\": 39,\n    \"40. Những Hiệu Ứng Có Hại Tác Động Lên Đối Tượng (Other Harmful Effects Acting on System)\": 40,\n    \"41. Năng Lực Chế Tạo (Manufacturability)\": 41,\n    \"42. Độ Chính Xác Trong Chế Tạo (Manufacture Precision/Consistency)\": 42,\n    \"43. Mức Độ Tự Động Hóa (Automation)\": 43,\n    \"44. Năng Suất (Productivity)\": 44,\n    \"45. Độ Phức Tạp Của Đối Tượng (System Complexity)\": 45,\n    \"46. Độ Phức Tạp Trong Kiểm Soát (Control Complexity)\": 46,\n    \"47. Điều Vô Hình Tích Cực (Positive Intangible Factors)\": 47,\n    \"48. Điều Vô Hình Tiêu Cực (Negative Intangible Factors)\": 48,\n    \"49. Năng Lực Xác Định (Ability to Detect/Measure)\": 49,\n    \"50. Độ Chính Xác Trong Đo Lường (Measurement Precision)\": 50\n}\n\n# Define creative principles mapping\ncreative_principles = {\n    0: \"Lựa chọn tham số khác\",\n    1: \"Nguyên tắc phân nhỏ (Segmentation)\",\n    2: \"Nguyên tắc “tách khỏi” (Taking out)\",\n    3: \"Nguyên tắc phẩm chất cục bộ (Local quality)\",\n    4: \"Nguyên tắc phản đối xứng (Asymmetry)\",\n    5: \"Nguyên tắc kết hợp (Merging)\",\n    6: \"Nguyên tắc vạn năng (Universality)\",\n    7: \"Nguyên tắc “chứa trong” (Nested Doll)\",\n    8: \"Nguyên tắc phản trọng lượng (Anti-Weight)\",\n    9: \"Nguyên tắc gây ứng suất sơ bộ (Preliminary Anti-Action)\",\n    10: \"Nguyên tắc thực hiện sơ bộ (Preliminary Action)\",\n    11: \"Nguyên tắc dự phòng (Beforehand Cushioning)\",\n    12: \"Nguyên tắc đẳng thế (Equipotentiality)\",\n    13: \"Nguyên tắc đảo ngược (The Other Way Round)\",\n    14: \"Nguyên tắc cầu (tròn) hóa (Spheroidality - Curvature)\",\n    15: \"Nguyên tắc linh động (Dynamics)\",\n    16: \"Nguyên tắc giải “thiếu” hoặc “thừa” (Partial or Excessive Actions)\",\n    17: \"Nguyên tắc chuyển sang chiều khác (Another Dimension)\",\n    18: \"Nguyên tắc sử dụng các dao động cơ học (Mechanical vibration)\",\n    19: \"Nguyên tắc tác động theo chu kỳ (Periodic Action)\",\n    20: \"Nguyên tắc liên tục tác động có ích (Continuity of Useful Action)\",\n    21: \"Nguyên tắc “vượt nhanh” (Skipping)\",\n    22: \"Nguyên tắc biến hại thành lợi (\\\"Blessing in Disguise\\\" or \\\"Turn Lemons into Lemonade\\\")\",\n    23: \"Nguyên tắc quan hệ phản hồi (Feedback)\",\n    24: \"Nguyên tắc sử dụng trung gian (Intermediary)\",\n    25: \"Nguyên tắc tự phục vụ (Self-service)\",\n    26: \"Nguyên tắc sao chép (Copying)\",\n    27: \"Nguyên tắc “rẻ” thay cho “đắt” (Cheap Short-Living Objects)\",\n    28: \"Thay thế sơ đồ cơ học (Mechanics Substitution)\",\n    29: \"Sử dụng các kết cấu khí và lỏng (Pneumatics and Hydraulics)\",\n    30: \"Sử dụng vỏ dẻo và màng mỏng (Flexible Shells and Thin Films)\",\n    31: \"Sử dụng các vật liệu nhiều lỗ (Porous Materials)\",\n    32: \"Nguyên tắc thay đổi màu sắc (Color Changes)\",\n    33: \"Nguyên tắc đồng nhất (Homogeneity)\",\n    34: \"Nguyên tắc phân hủy hoặc tái sinh các phần (Discarding and Recovering)\",\n    35: \"Thay đổi các thông số hóa lý của đối tượng (Parameter Changes)\",\n    36: \"Sử dụng chuyển pha (Phase Transitions)\",\n    37: \"Sử dụng sự nở nhiệt (Thermal Expansion)\",\n    38: \"Sử dụng các chất oxy hóa mạnh (Strong Oxidants or Boosted Interactions)\",\n    39: \"Thay đổi độ trơ (Inert Atmosphere)\",\n    40: \"Sử dụng các vật liệu hợp thành (Composite Structures)\"\n}\n\n# Define the UI components\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.h3(\"Matrix 50\"),\n            ui.input_select(\n                \"col_select\",\n                \"Tốt lên:\",\n                list(parameter_mapping.keys()),\n                width=\"100%\"\n            ),\n            ui.input_select(\n                \"row_select\",\n                \"Xấu đi:\",\n                list(parameter_mapping.keys()),\n                width=\"100%\"\n            ),\n            ui.input_action_button(\"submitbutton\", \"Submit\", class_=\"btn btn-primary\", width=\"100%\"),\n        ),\n        ui.panel_main(\n            ui.h3(\" \"),\n            ui.output_table(\"selected_table\", class_=\"table table-sm table-striped\"),\n            ui.HTML(\"&lt;style&gt; .table { font-size: 15px; text-align: left; } &lt;/style&gt;\"),\n        ),\n        style=\"font-size: 15px; padding: 0px;\"\n    ),\n    style=\"font-size: 15px; padding: 0px;\"\n)\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Calc\n    def read_file():\n        try:\n            df = pd.read_csv(file_path, delimiter=';')\n            return df\n        except Exception as e:\n            return pd.DataFrame({\"Error\": [f\"Could not load the file: {str(e)}\"]})\n\n    @reactive.Calc\n    def selected_value_calc():\n        df_matrix = read_file()\n        if \"Error\" in df_matrix.columns:\n            return df_matrix\n        \n        if input.submitbutton() &gt; 0:\n            row_select = input.row_select()\n            col_select = input.col_select()\n            row_idx = parameter_mapping[row_select] - 1  # Adjust for 0-based indexing\n            col_idx = parameter_mapping[col_select] - 1  # Adjust for 0-based indexing\n            try:\n                value = df_matrix.iloc[row_idx, col_idx]\n                selected_values = [int(val) for val in str(value).split(',')]\n                result = pd.DataFrame({\n                    \" \": selected_values,\n                    \"Các Nguyên Tắc Sáng Tạo\": [creative_principles[val] for val in selected_values]\n                })\n                return result\n            except Exception as e:\n                return pd.DataFrame({\"Error\": [f\"Error processing selection: {str(e)}\"]})\n        \n        return pd.DataFrame(columns=[\" \", \"Các Nguyên Tắc Sáng Tạo\"])\n\n    @output\n    @render.table\n    def selected_table():\n        return selected_value_calc()\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "index.html#thông-số-kỹ-thuật",
    "href": "index.html#thông-số-kỹ-thuật",
    "title": "Shinylive in Quarto example",
    "section": "39 Thông số kỹ thuật",
    "text": "39 Thông số kỹ thuật\n\n1. Trọng lượng của vật thể di chuyển\n\nGiải thích chi tiết: Trọng lượng là lực mà trọng lực tác động lên khối lượng của một vật thể. Đối với các vật thể di chuyển, lực này ảnh hưởng đến cách chúng tương tác với môi trường, chẳng hạn như các hệ thống hỗ trợ hoặc treo mà chúng dựa vào. Trọng lượng ảnh hưởng đến khả năng di chuyển hoặc vận chuyển của vật thể và ảnh hưởng đến năng lượng cần thiết để thay đổi vị trí của nó.\nNgữ cảnh đơn giản: Nghĩ về cảm giác nặng của ba lô khi bạn mang nó. Nếu bạn thêm nhiều sách hơn, nó sẽ nặng hơn. Trọng lượng là mức độ nặng của một vật và nó quan trọng vì nó cho chúng ta biết cần bao nhiêu nỗ lực để di chuyển nó. Ví dụ, một chiếc xe ô tô nặng hơn một chiếc ô tô đồ chơi, vì vậy nó cần nhiều sức mạnh hơn để di chuyển.\n\n\n\n2. Trọng lượng của vật thể đứng yên\n\nGiải thích chi tiết: Tương tự như các vật thể di chuyển, trọng lượng của một vật thể đứng yên là lực mà nó tác động do trọng lực. Lực này ảnh hưởng đến tính toàn vẹn cấu trúc và độ ổn định của các bề mặt hoặc hỗ trợ mà vật thể đặt trên đó. Hiểu rõ trọng lượng này là rất quan trọng để thiết kế các hỗ trợ và đảm bảo rằng các vật thể đứng yên vẫn ổn định và an toàn dưới các điều kiện khác nhau.\nNgữ cảnh đơn giản: Hãy tưởng tượng một tảng đá lớn không di chuyển. Trọng lượng của tảng đá đó cho chúng ta biết nó nặng bao nhiêu và nó đẩy xuống đất mạnh như thế nào. Điều này giúp chúng ta hiểu liệu mặt đất có thể giữ được nó hay không hoặc nếu cần có một sự hỗ trợ đặc biệt để nó không chìm hoặc đổ.\n\n\n\n3. Chiều dài của vật thể di chuyển\n\nGiải thích chi tiết: Chiều dài của một vật thể di chuyển có thể đề cập đến bất kỳ một kích thước tuyến tính nào của nó, không nhất thiết là chiều dài nhất. Đo lường này quan trọng để hiểu không gian mà vật thể chiếm, tính khí động học của nó và cách nó phù hợp hoặc tương tác với môi trường xung quanh.\nNgữ cảnh đơn giản: Nghĩ về một đoàn tàu đồ chơi. Chiều dài của nó là từ đầu đến cuối. Điều này giúp chúng ta biết không gian mà nó cần để di chuyển xung quanh. Ví dụ, một đoàn tàu dài hơn cần một đường ray lớn hơn để di chuyển.\n\n\n\n4. Chiều dài của vật thể đứng yên\n\nGiải thích chi tiết: Chiều dài của một vật thể đứng yên cũng đề cập đến bất kỳ kích thước tuyến tính nào. Đo lường này giúp thiết kế không gian nơi vật thể sẽ được đặt và đảm bảo nó phù hợp chính xác trong vị trí dự kiến mà không gây cản trở các yếu tố khác.\nNgữ cảnh đơn giản: Bây giờ hãy nghĩ về giường của bạn. Chiều dài của nó cũng từ một đầu đến đầu kia. Biết điều này giúp chúng ta quyết định nơi đặt nó trong phòng để nó vừa vặn mà không chặn cửa hoặc đồ nội thất khác.\n\n\n\n5. Diện tích của vật thể di chuyển\n\nGiải thích chi tiết: Diện tích của một vật thể di chuyển là bề mặt mà nó chiếm. Điều này có thể đề cập đến diện tích mặt phẳng (2D) bao quanh bởi đường viền của nó hoặc diện tích bề mặt bên ngoài của nó. Diện tích ảnh hưởng đến cách vật thể tương tác với các lực như lực cản không khí và xác định không gian mà nó cần để di chuyển.\nNgữ cảnh đơn giản: Hãy tưởng tượng một chiếc diều bay. Diện tích là không gian mà nó chiếm trên bầu trời. Điều này giúp chúng ta biết không gian xung quanh cần để bay diều mà không va vào bất cứ thứ gì khác.\n\n\n\n6. Diện tích của vật thể đứng yên\n\nGiải thích chi tiết: Diện tích của một vật thể đứng yên, tương tự như của một vật thể di chuyển, đề cập đến bề mặt mà nó che phủ hoặc chiếm. Đo lường này quan trọng để hiểu cách vật thể tương tác với môi trường, đặc biệt là về các bề mặt tiếp xúc và yêu cầu không gian.\nNgữ cảnh đơn giản: Nghĩ về một tấm thảm trên sàn nhà. Diện tích là không gian mà nó che phủ trên sàn. Điều này giúp chúng ta thấy bao nhiêu không gian trên sàn được che phủ và bao nhiêu còn lại để sử dụng cho các vật khác.\n\n\n\n7. Thể tích của vật thể di chuyển\n\nGiải thích chi tiết: Thể tích đo lường không gian ba chiều mà một vật thể chiếm. Đối với các vật thể di chuyển, điều này quan trọng để hiểu khả năng chứa, sức nổi và cách chúng tương tác với môi trường xung quanh. Thể tích ảnh hưởng đến việc lưu trữ, vận chuyển và năng lượng cần thiết cho sự di chuyển của vật thể.\nNgữ cảnh đơn giản: Nghĩ về một chiếc hộp lớn mà bạn có thể di chuyển. Thể tích là không gian bên trong chiếc hộp đó. Điều này cho chúng ta biết có thể chứa bao nhiêu đồ chơi hoặc sách bên trong. Nếu chiếc hộp lớn hơn, nó có thể chứa nhiều thứ hơn.\n\n\n\n8. Thể tích của vật thể đứng yên\n\nGiải thích chi tiết: Thể tích của một vật thể đứng yên, giống như của một vật thể di chuyển, chỉ ra không gian mà nó chiếm. Đo lường này quan trọng để lập kế hoạch không gian, đảm bảo rằng vật thể phù hợp trong khu vực dự kiến và tương tác phù hợp với môi trường xung quanh.\nNgữ cảnh đơn giản: Nghĩ về chiếc hộp đựng đồ chơi của bạn. Thể tích của nó cũng là không gian bên trong. Điều này giúp chúng ta biết có thể chứa bao nhiêu đồ chơi để giữ phòng gọn gàng.\n\n\n\n9. Tốc độ\n\nGiải thích chi tiết: Tốc độ là tốc độ mà một vật thể thay đổi vị trí theo thời gian. Nó là một tham số quan trọng để hiểu động học của các vật thể di chuyển, ảnh hưởng đến tốc độ mà chúng có thể di chuyển hoặc hoàn thành một quy trình. Tốc độ ảnh hưởng đến thời gian di chuyển, hiệu quả nhiên liệu và hiệu suất tổng thể.\nNgữ cảnh đơn giản: Tốc độ là mức độ nhanh mà một vật di chuyển. Ví dụ, khi bạn chạy nhanh, bạn sẽ đi được nhiều hơn trong thời gian ngắn. Nếu bạn đi bộ chậm, sẽ mất nhiều thời gian hơn để đến cùng một địa điểm. Tốc độ cho chúng ta biết bạn có thể đi từ nơi này đến nơi khác nhanh như thế nào.\n\n\n\n10. Lực\n\nGiải thích chi tiết: Lực là bất kỳ sự tương tác nào làm thay đổi chuyển động hoặc tình trạng của một vật thể. Trong vật lý cổ điển, nó được định nghĩa là khối lượng nhân gia tốc (F = ma). Trong thực tế, lực là điều khiến các vật thể bắt đầu di chuyển, dừng lại hoặc thay đổi hướng. Hiểu rõ lực giúp thiết kế các hệ thống có thể chịu đựng hoặc sử dụng các tương tác này một cách hiệu quả.\nNgữ cảnh đơn giản: Lực giống như một cú đẩy hoặc kéo. Nếu bạn đẩy một cái xích đu, bạn sử dụng lực để làm nó di chuyển. Nếu bạn kéo một chiếc ô tô đồ chơi bằng một sợi dây, bạn sử dụng lực để làm nó tiến lại gần. Lực giúp mọi thứ bắt đầu di chuyển, dừng lại hoặc thay đổi hướng.\n\n\n\n11. Căng thẳng hoặc Áp lực\n\nGiải thích chi tiết: Căng thẳng là lực nội tại trên một đơn vị diện tích trong vật liệu phát sinh từ các lực tác động từ bên ngoài. Áp lực là lực tác động trên một đơn vị diện tích lên bề mặt. Những khái niệm này rất quan trọng trong kỹ thuật và khoa học vật liệu để đảm bảo rằng các cấu trúc và vật liệu có thể chịu đựng các tải trọng mà không bị hỏng.\nNgữ cảnh đơn giản: Căng thẳng hoặc áp lực là lực đẩy được phân bố trên một diện tích. Hãy tưởng tượng bạn ấn ngón tay cái lên một miếng đất sét. Bạn ấn càng mạnh, đất sét càng thay đổi hình dạng. Điều này giúp chúng ta hiểu được cần bao nhiêu lực để làm những thứ giữ vững dưới tác động của lực đẩy hoặc nén.\n\n\n\n12. Hình dạng\n\nGiải thích chi tiết: Hình dạng là các đường viền bên ngoài và hình dáng tổng thể của một vật thể hoặc hệ thống. Hình dạng ảnh hưởng đến tính khí động học, thẩm mỹ, chức năng và cách vật thể tương tác với môi trường xung quanh. Nó rất quan trọng trong thiết kế, sản xuất và tối ưu hóa hiệu suất.\nNgữ cảnh đơn giản: Hình dạng là hình dáng bên ngoài của một vật thể. Một quả bóng là hình tròn, một cái hộp là hình vuông. Hình dạng có thể giúp một vật di chuyển trơn tru hơn, như cách mà một quả bóng tròn lăn dễ dàng hơn một cái hộp vuông.\n\n\n\n13. Độ ổn định của cấu trúc vật thể\n\nGiải thích chi tiết: Độ ổn định là sự toàn vẹn và nhất quán của các thành phần trong một hệ thống. Độ ổn định cao có nghĩa là hệ thống có thể duy trì cấu trúc và chức năng của nó theo thời gian mà không bị suy giảm. Các yếu tố như mòn, phản ứng hóa học và tháo rời làm giảm độ ổn định. Độ ổn định quan trọng để đảm bảo độ tin cậy và hiệu suất lâu dài.\nNgữ cảnh đơn giản: Độ ổn định là mức độ mà một vật duy trì được sự vững chắc mà không bị hỏng. Nghĩ về một tòa tháp LEGO. Nếu nó được xây dựng tốt, nó sẽ không dễ dàng đổ. Nếu nó được xây dựng kém, nó sẽ nhanh chóng đổ. Độ ổn định giúp chúng ta biết mức độ mạnh mẽ và bền bỉ của một vật thể.\n\n\n\n14. Độ bền\n\nGiải thích chi tiết: Độ bền là khả năng của một vật thể chịu đựng các lực mà không bị vỡ hoặc biến dạng. Nó đo lường khả năng chống lại căng thẳng, va đập và các lực khác. Các vật liệu và cấu trúc bền bỉ là điều cần thiết cho an toàn, độ bền và hiệu suất trong các ứng dụng khác nhau.\nNgữ cảnh đơn giản: Độ bền là khả năng mà một vật thể chịu được lực mà không bị vỡ. Hãy tưởng tượng một món đồ chơi nhựa mạnh mẽ không bị vỡ khi bạn làm rơi, so với một món đồ chơi giấy yếu dễ bị rách. Những vật bền bỉ kéo dài lâu hơn và có thể chịu được chơi mạnh.\n\n\n\n15. Thời gian hoạt động của vật thể di chuyển\n\nGiải thích chi tiết: Điều này đề cập đến thời gian mà một vật thể di chuyển có thể thực hiện chức năng dự định của nó trước khi cần bảo trì hoặc thay thế. Nó bao gồm tuổi thọ và độ bền, quan trọng để đánh giá độ tin cậy và hiệu quả của các hệ thống di chuyển.\nNgữ cảnh đơn giản: Đây là thời gian mà một vật thể có thể tiếp tục di chuyển hoặc làm việc. Ví dụ, một chiếc ô tô đồ chơi có pin có thể di chuyển cho đến khi hết pin. Biết điều này giúp chúng ta lên kế hoạch khi cần sạc lại hoặc thay pin.\n\n\n\n16. Thời gian hoạt động của vật thể đứng yên\n\nGiải thích chi tiết: Tương tự như các vật thể di chuyển, đây là thời gian mà một vật thể đứng yên có thể duy trì chức năng của nó trước khi hỏng. Hiểu điều này giúp lập kế hoạch bảo trì, đảm bảo độ tin cậy và thiết kế các hệ thống cho sử dụng lâu dài.\nNgữ cảnh đơn giản: Đây là thời gian mà một vật đứng yên có thể tiếp tục hoạt động. Hãy nghĩ về một đèn ngủ. Nó đứng yên một chỗ nhưng sáng cho đến khi hết điện. Biết điều này giúp chúng ta đảm bảo nó luôn hoạt động khi cần.\n\n\n\n17. Nhiệt độ\n\nGiải thích chi tiết: Nhiệt độ là thước đo năng lượng nhiệt bên trong một hệ thống. Nó ảnh hưởng đến các đặc tính vật liệu, các phản ứng và hiệu suất của các vật thể và hệ thống. Quản lý nhiệt độ rất quan trọng để duy trì điều kiện tối ưu và ngăn ngừa hư hỏng.\nNgữ cảnh đơn giản: Nhiệt độ là mức độ nóng hoặc lạnh của một vật. Chúng ta sử dụng nó để biết khi nào cần mặc áo khoác khi trời lạnh bên ngoài hoặc khi nào cần quạt khi trời nóng. Nó cũng giúp trong việc nấu nướng, như nướng bánh quy ở nhiệt độ đúng.\n\n\n\n18. Cường độ chiếu sáng\n\nGiải thích chi tiết: Đây là thước đo lượng ánh sáng trên một đơn vị diện tích và bao gồm các đặc tính như độ sáng và chất lượng. Chiếu sáng đúng cách là rất quan trọng để đảm bảo tầm nhìn, an toàn và đạt được các hiệu ứng mong muốn trong các môi trường khác nhau.\nNgữ cảnh đơn giản: Đây là mức độ sáng của một nguồn sáng. Một đèn pin rất sáng và giúp bạn nhìn thấy trong bóng tối. Một đèn ngủ mờ không rất sáng nhưng giúp bạn nhìn đủ vào ban đêm. Các loại ánh sáng khác nhau được sử dụng cho các mục đích khác nhau.\n\n\n\n19. Sử dụng năng lượng của vật thể di chuyển\n\nGiải thích chi tiết: Điều này đề cập đến năng lượng cần thiết cho một vật thể di chuyển để thực hiện công việc, bao gồm năng lượng được cung cấp từ các nguồn bên ngoài như điện hoặc nhiên liệu. Sử dụng năng lượng hiệu quả rất quan trọng để hoạt động hiệu quả về chi phí và bền vững.\nNgữ cảnh đơn giản: Đây là lượng năng lượng mà một vật cần để di chuyển. Ví dụ, một chiếc ô tô sử dụng xăng để di chuyển. Một chiếc ô tô đồ chơi sử dụng pin. Biết mức năng lượng cần thiết giúp chúng ta đảm bảo có đủ nhiên liệu hoặc pin.\n\n\n\n20. Sử dụng năng lượng của vật thể đứng yên\n\nGiải thích chi tiết: Tương tự như các vật thể di chuyển, đây là năng lượng cần thiết cho một vật thể đứng yên để thực hiện các chức năng của nó. Quản lý sử dụng năng lượng rất quan trọng để đảm bảo hiệu quả và bền vững.\nNgữ cảnh đơn giản: Đây là lượng năng lượng mà một vật đứng yên cần để hoạt động. Một cái đèn sử dụng điện để sáng. Biết điều này giúp chúng ta đảm bảo cắm điện và có nguồn năng lượng sẵn có.\n\n\n\n21. Công suất\n\nGiải thích chi tiết: Công suất là tốc độ mà công việc được thực hiện hoặc năng lượng được chuyển giao. Nó đo lường hiệu quả và hiệu suất của các hệ thống, với công suất cao hơn chỉ ra công việc nhanh hơn hoặc mạnh mẽ hơn.\nNgữ cảnh đơn giản: Công suất là mức độ nhanh mà một vật có thể làm việc. Ví dụ, một chiếc quạt mạnh di chuyển không khí nhiều hơn một chiếc quạt nhỏ trong cùng một khoảng thời gian. Công suất cao hơn nghĩa là mọi thứ được hoàn thành nhanh hơn.\n\n\n\n22. Mất năng lượng\n\nGiải thích chi tiết: Điều này đề cập đến phần năng lượng không đóng góp vào công việc mong muốn, thường mất dưới dạng nhiệt hoặc ma sát. Giảm thiểu mất năng lượng rất quan trọng để cải thiện hiệu quả và giảm chi phí.\nNgữ cảnh đơn giản: Đây là khi năng lượng bị lãng phí và không được sử dụng cho công việc chính. Như nếu pin của ô tô đồ chơi hết chỉ vì để trong nắng thay vì được sử dụng để làm ô tô di chuyển. Tiết kiệm năng lượng giúp mọi thứ kéo dài lâu hơn.\n\n\n\n23. Mất vật chất\n\nGiải thích chi tiết: Điều này liên quan đến sự mất mát một phần hoặc toàn bộ các vật liệu, có thể ảnh hưởng đến chức năng và hiệu quả của hệ thống. Quản lý mất vật chất rất quan trọng để duy trì hiệu suất và giảm lãng phí.\nNgữ cảnh đơn giản: Đây là khi các bộ phận hoặc vật liệu bị mất. Như nếu robot đồ chơi của bạn mất một bánh xe, nó không thể di chuyển đúng cách nữa. Giữ theo dõi tất cả các bộ phận giúp mọi thứ hoạt động đúng.\n\n\n\n24. Mất thông tin\n\nGiải thích chi tiết: Điều này bao gồm sự mất dữ liệu hoặc thông tin cảm biến, có thể cản trở việc ra quyết định và hoạt động của hệ thống. Đảm bảo tính toàn vẹn và khả năng truy cập dữ liệu là rất quan trọng để hoạt động hiệu quả.\nNgữ cảnh đơn giản: Đây là khi thông tin quan trọng bị mất. Như nếu bạn quên nơi đặt bài tập về nhà của mình. Giữ thông tin an toàn giúp chúng ta tìm thấy những gì cần thiết khi cần.\n\n\n\n25. Mất thời gian\n\nGiải thích chi tiết: Thời gian mất trong quá trình có thể giảm hiệu quả và năng suất. Giảm thời gian chu kỳ và cải thiện quy trình làm việc là rất quan trọng để tối ưu hóa hiệu suất.\nNgữ cảnh đơn giản: Đây là khi thời gian bị lãng phí. Như nếu bạn mất quá nhiều thời gian để tìm một món đồ chơi bị mất, bạn có ít thời gian hơn để chơi. Sử dụng thời gian tốt\n\ngiúp chúng ta hoàn thành nhiều việc hơn và có nhiều niềm vui hơn.\n\n\n26. Số lượng vật chất\n\nGiải thích chi tiết: Điều này đo lường lượng vật liệu hoặc thành phần trong một hệ thống. Quản lý số lượng rất quan trọng để duy trì sự cân bằng, đảm bảo chức năng và tối ưu hóa việc sử dụng tài nguyên.\nNgữ cảnh đơn giản: Đây là mức độ của một cái gì đó. Như đếm tất cả các mảnh LEGO của bạn để đảm bảo bạn có đủ để xây một lâu đài. Biết số lượng giúp chúng ta đảm bảo có những gì cần thiết.\n\n\n\n27. Độ tin cậy\n\nGiải thích chi tiết: Độ tin cậy là khả năng của một hệ thống hoạt động nhất quán dưới các điều kiện xác định. Độ tin cậy cao là rất quan trọng để đảm bảo hiệu suất, an toàn và sự hài lòng của khách hàng.\nNgữ cảnh đơn giản: Đây là mức độ mà một vật hoạt động tốt mỗi lần. Như nếu món đồ chơi yêu thích của bạn luôn hoạt động khi bạn bật nó. Những thứ đáng tin cậy không dễ hỏng và hoạt động khi cần.\n\n\n\n28. Độ chính xác của phép đo\n\nGiải thích chi tiết: Điều này đề cập đến mức độ gần của một giá trị đo lường so với giá trị thực. Độ chính xác cao là rất quan trọng để kiểm soát chất lượng, đảm bảo hoạt động chính xác và giảm lỗi.\nNgữ cảnh đơn giản: Đây là mức độ gần của một phép đo so với thực tế. Như nếu bạn đo chiều cao của mình bằng thước kẻ và nó cho thấy số chính xác. Các phép đo chính xác giúp chúng ta biết kích thước hoặc số lượng thật.\n\n\n\n29. Độ chính xác trong sản xuất\n\nGiải thích chi tiết: Độ chính xác trong sản xuất đảm bảo rằng các sản phẩm đáp ứng các tiêu chuẩn quy định và hoạt động như dự định. Độ chính xác cao giảm thiểu các lỗi và cải thiện chất lượng.\nNgữ cảnh đơn giản: Đây là mức độ chính xác mà mọi thứ được sản xuất. Như nếu mỗi mảnh LEGO vừa khít hoàn hảo với mọi mảnh khác. Độ chính xác đảm bảo mọi thứ hoạt động tốt cùng nhau.\n\n\n\n30. Tác hại bên ngoài ảnh hưởng đến vật thể\n\nGiải thích chi tiết: Điều này đo lường khả năng chịu đựng của các vật thể trước sự hư hại từ các nguồn bên ngoài. Giảm thiểu tác hại bên ngoài rất quan trọng để bảo vệ các hệ thống và đảm bảo tuổi thọ.\nNgữ cảnh đơn giản: Đây là mức độ hư hại có thể đến từ bên ngoài. Như nếu mưa làm rỉ các đồ chơi ngoài trời của bạn. Bảo vệ mọi thứ khỏi tác hại giúp chúng kéo dài lâu hơn.\n\n\n\n31. Yếu tố có hại do vật thể gây ra\n\nGiải thích chi tiết: Đây là các tác động tiêu cực do chính hệ thống tạo ra, có thể làm giảm hiệu quả hoặc chất lượng. Quản lý các yếu tố này rất quan trọng để tối ưu hóa hiệu suất và giảm thiểu các tác động tiêu cực.\nNgữ cảnh đơn giản: Đây là khi một vật gây ra vấn đề cho chính nó. Như nếu một đồ chơi có cạnh sắc có thể làm bạn bị thương. Khắc phục những vấn đề này làm mọi thứ an toàn hơn để sử dụng.\n\n\n\n32. Dễ sản xuất\n\nGiải thích chi tiết: Điều này đề cập đến mức độ dễ dàng và hiệu quả mà một vật thể có thể được sản xuất. Cải thiện dễ sản xuất giảm chi phí, tăng tốc độ sản xuất và nâng cao hiệu quả tổng thể.\nNgữ cảnh đơn giản: Đây là mức độ dễ dàng để làm một cái gì đó. Như nếu dễ dàng xây một món đồ chơi chỉ với vài bước. Dễ sản xuất nghĩa là mọi thứ có thể được làm nhanh chóng và tốt.\n\n\n\n33. Dễ vận hành\n\nGiải thích chi tiết: Điều này đo lường mức độ đơn giản và dễ dàng để sử dụng một hệ thống. Dễ vận hành cao cải thiện trải nghiệm người dùng, giảm lỗi và tăng năng suất.\nNgữ cảnh đơn giản: Đây là mức độ dễ dàng để sử dụng một cái gì đó. Như nếu một đồ chơi có các nút đơn giản mà bạn có thể nhấn để làm nó chạy. Dễ vận hành nghĩa là bất cứ ai cũng có thể sử dụng mà không gặp khó khăn.\n\n\n\n34. Dễ sửa chữa\n\nGiải thích chi tiết: Điều này chỉ ra mức độ nhanh chóng và dễ dàng mà một hệ thống có thể được sửa chữa khi gặp vấn đề. Dễ sửa chữa cao giảm thời gian ngừng hoạt động và chi phí bảo trì.\nNgữ cảnh đơn giản: Đây là mức độ dễ dàng để sửa chữa một cái gì đó. Như nếu đồ chơi của bạn bị hỏng và bạn có thể dễ dàng dán lại nó. Dễ sửa chữa nghĩa là mọi thứ có thể được sửa chữa nhanh chóng và sử dụng lại.\n\n\n\n35. Khả năng thích nghi hoặc đa năng\n\nGiải thích chi tiết: Điều này đo lường khả năng của một hệ thống để phản ứng với sự thay đổi và hoạt động dưới các điều kiện khác nhau. Khả năng thích nghi cao là quan trọng để linh hoạt và chuẩn bị cho tương lai các hệ thống.\nNgữ cảnh đơn giản: Đây là mức độ mà một vật có thể được sử dụng theo nhiều cách khác nhau. Như nếu một chiếc ô tô đồ chơi cũng có thể là một chiếc thuyền trong nước. Những thứ đa năng có thể được sử dụng theo nhiều cách thú vị.\n\n\n\n36. Độ phức tạp của thiết bị\n\nGiải thích chi tiết: Độ phức tạp đề cập đến số lượng và sự đa dạng của các thành phần và các tương tác của chúng trong một hệ thống. Quản lý độ phức tạp rất quan trọng để đảm bảo độ tin cậy, khả năng sử dụng và bảo trì.\nNgữ cảnh đơn giản: Đây là mức độ phức tạp của một vật. Như nếu một robot đồ chơi có nhiều bộ phận và dây điện. Những thứ đơn giản dễ hiểu và sử dụng hơn, trong khi những thứ phức tạp có thể làm nhiều hơn nhưng khó hiểu hơn.\n\n\n\n37. Khó khăn trong việc phát hiện và đo lường\n\nGiải thích chi tiết: Điều này bao gồm các thách thức trong việc đo lường hoặc giám sát một hệ thống một cách chính xác. Giảm bớt những khó khăn này rất quan trọng để quản lý và kiểm soát hiệu quả.\nNgữ cảnh đơn giản: Đây là mức độ khó khăn để kiểm tra hoặc đo lường một cái gì đó. Như nếu bạn cần dụng cụ đặc biệt để thấy bao nhiêu không khí trong một quả bóng. Đo lường dễ hơn nghĩa là bạn có thể kiểm tra mọi thứ nhanh chóng.\n\n\n\n38. Mức độ tự động hóa\n\nGiải thích chi tiết: Tự động hóa đề cập đến mức độ mà một hệ thống có thể hoạt động độc lập mà không cần sự can thiệp của con người. Tự động hóa cao hơn có thể tăng hiệu quả, giảm lỗi con người và giảm chi phí vận hành.\nNgữ cảnh đơn giản: Đây là mức độ mà một vật có thể tự hoạt động mà không cần sự giúp đỡ. Như nếu một robot có thể tự dọn dẹp phòng của bạn. Tự động hóa nhiều hơn nghĩa là ít công việc hơn cho bạn.\n\n\n\n39. Năng suất\n\nGiải thích chi tiết: Năng suất đo lường sản lượng hoặc hiệu suất của một hệ thống trên một đơn vị thời gian. Cải thiện năng suất rất quan trọng để tối ưu hóa tài nguyên, tăng sản lượng và giảm chi phí.\nNgữ cảnh đơn giản: Đây là mức độ mà công việc được hoàn thành trong một khoảng thời gian. Như nếu bạn xây nhiều ngôi nhà LEGO hơn trong một giờ so với trước đây. Năng suất cao hơn nghĩa là nhiều việc được hoàn thành nhanh hơn."
  },
  {
    "objectID": "test.html",
    "href": "test.html",
    "title": "Shinylive in Quarto example",
    "section": "",
    "text": "Editor with app\nIf you want to display an editor panel with along with the running application, use #| components: [editor, viewer]. Users will be able to use the editor to modify the code and re-run the application.\n#| standalone: true\n#| viewerHeight: 690\n# app.py - TRIZ Principle of Division - Fireproof Fuel Tank Demo\nfrom shiny import App, ui, render, reactive\nfrom htmltools import HTML, css\nimport random\n\n# Define CSS for the app\napp_css = \"\"\"\nbody {\n    margin: 0;\n    padding: 0;\n    font-family: Arial, sans-serif;\n    background-color: #333;\n    color: white;\n    text-align: center;\n}\n.container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    min-height: 100vh;\n    padding: 20px;\n}\nh1 {\n    margin-bottom: 30px;\n    font-size: 2.5rem;\n}\n.tanks-container {\n    display: flex;\n    justify-content: space-around;\n    width: 100%;\n    max-width: 1000px;\n    flex-wrap: wrap;\n    gap: 30px;\n    margin-bottom: 20px;\n}\n.tank-wrapper {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n.tank {\n    position: relative;\n    width: 200px;\n    height: 300px;\n    margin: 0 20px;\n    border: 3px solid #aaa;\n    border-radius: 20px;\n    overflow: hidden;\n}\n.tank-label {\n    font-weight: bold;\n    margin-bottom: 10px;\n    font-size: 1.2rem;\n}\n.liquid {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: #0c0;\n    transition: background-color 3s;\n}\n.cells-grid {\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    grid-template-rows: repeat(6, 1fr);\n    gap: 5px;\n    width: 90%;\n    height: 90%;\n    margin: 5%;\n}\n.cell {\n    background-color: #0c0;\n    border-radius: 5px;\n    transition: background-color 0.5s;\n}\n.fire {\n    background-color: #f30;\n}\n.btn-container {\n    margin-top: 40px;\n}\n.action-btn {\n    padding: 12px 24px;\n    font-size: 16px;\n    color: white;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    margin: 0 10px;\n    transition: background-color 0.3s;\n}\n#start_btn {\n    background: linear-gradient(to bottom, #ff6600, #ff3300);\n}\n#start_btn:disabled {\n    background: #cccccc;\n    cursor: not-allowed;\n}\n#reset_btn {\n    background-color: #4CAF50;\n}\n.description {\n    max-width: 600px;\n    margin: 30px auto;\n    line-height: 1.6;\n    font-size: 1rem;\n    padding: 0 20px;\n}\n.instructions {\n    margin-bottom: 20px;\n    font-style: italic;\n    color: #ddd;\n    max-width: 600px;\n    font-size: 0.9rem;\n}\n.status {\n    margin-top: 15px;\n    padding: 8px 15px;\n    border-radius: 20px;\n    background-color: rgba(255, 255, 255, 0.1);\n    display: inline-block;\n    transition: all 0.3s;\n}\n/* Responsive adjustments */\n@media (max-width: 768px) {\n    .tanks-container {\n        flex-direction: column;\n        align-items: center;\n    }\n    .tank {\n        margin: 0;\n        width: 180px;\n        height: 270px;\n    }\n    .btn-container {\n        display: flex;\n        flex-direction: column;\n        gap: 15px;\n        width: 100%;\n        max-width: 250px;\n    }\n    .action-btn {\n        margin: 0;\n        width: 100%;\n        padding: 15px 20px;\n        font-size: 18px;\n    }\n}\n\"\"\"\n\n# Generate cell divs for the divided tank\ndef generate_cells():\n    cells = []\n    for i in range(1, 25):\n        cells.append(\n            ui.div(\n                id=f\"cell-{i}\",\n                class_=\"cell\"\n            )\n        )\n    return cells\n\n# Define UI\napp_ui = ui.page_fluid(\n    # Include CSS\n    ui.tags.style(app_css),\n    \n    # Include necessary JavaScript\n    ui.tags.script(\"\"\"\n    function setFireCell(cellNumber) {\n        document.getElementById('undivided-liquid').style.backgroundColor = '#f30';\n        document.getElementById('cell-' + cellNumber).style.backgroundColor = '#f30';\n        document.getElementById('status-display').textContent = 'Fire spreading in undivided tank, contained in divided tank';\n        document.getElementById('status-display').style.backgroundColor = 'rgba(255, 100, 0, 0.2)';\n        document.getElementById('start_btn').disabled = true;\n        document.getElementById('start_btn').style.background = '#cccccc';\n        document.getElementById('start_btn').style.cursor = 'not-allowed';\n    }\n    \n    function resetSimulation() {\n        document.getElementById('undivided-liquid').style.backgroundColor = '#0c0';\n        for (let i = 1; i &lt;= 24; i++) {\n            let cell = document.getElementById('cell-' + i);\n            if (cell) cell.style.backgroundColor = '#0c0';\n        }\n        document.getElementById('status-display').textContent = 'Ready to start simulation';\n        document.getElementById('status-display').style.backgroundColor = 'rgba(255, 255, 255, 0.1)';\n        document.getElementById('start_btn').disabled = false;\n        document.getElementById('start_btn').style.background = 'linear-gradient(to bottom, #ff6600, #ff3300)';\n        document.getElementById('start_btn').style.cursor = 'pointer';\n    }\n    \n    // Add a message handler for Python-&gt;JS communication\n    $(document).on('shiny:connected', function() {\n        Shiny.addCustomMessageHandler('simulation-action', function(message) {\n            if (message.action === 'setFire') {\n                setFireCell(message.cellNumber);\n            } else if (message.action === 'reset') {\n                resetSimulation();\n            }\n        });\n    });\n    \"\"\"),\n    \n    # Main container\n    ui.div(\n        {\"class\": \"container\"},\n        \n        # Title\n        #ui.h1(\"TRIZ Principle 1: Division\"),\n        \n        # Tanks container\n        ui.div(\n            {\"class\": \"tanks-container\"},\n            \n            # Undivided Tank\n            ui.div(\n                {\"class\": \"tank-wrapper\"},\n                ui.div({\"class\": \"tank-label\"}, \"Undivided Tank\"),\n                ui.div(\n                    {\"class\": \"tank\"},\n                    ui.div({\"id\": \"undivided-liquid\", \"class\": \"liquid\"})\n                )\n            ),\n            \n            # Divided Tank\n            ui.div(\n                {\"class\": \"tank-wrapper\"},\n                ui.div({\"class\": \"tank-label\"}, \"Divided Tank\"),\n                ui.div(\n                    {\"class\": \"tank\"},\n                    ui.div(\n                        {\"id\": \"cells-container\", \"class\": \"cells-grid\"},\n                        *generate_cells()\n                    )\n                )\n            )\n        ),\n        \n        # Instructions\n        ui.div(\n            {\"class\": \"instructions\"},\n            'Click \"Start Fire\" to simulate a fire in both tanks and observe how division prevents fire spreading'\n        ),\n        \n        # Buttons\n        ui.div(\n            {\"class\": \"btn-container\"},\n            ui.input_action_button(\"start_btn\", \"Start Fire\", class_=\"action-btn\"),\n            ui.input_action_button(\"reset_btn\", \"Reset\", class_=\"action-btn\")\n        ),\n        \n        # Status indicator\n        ui.div(\n            {\"id\": \"status-display\", \"class\": \"status\"},\n            \"Ready to start simulation\"\n        ),\n        \n        # Description\n        ui.div(\n            {\"class\": \"description\"},\n            #ui.p( )\n        )\n    )\n)\n\n# Define server logic\ndef server(input, output, session):\n    # Track fire state\n    fire_started = reactive.Value(False)\n    \n    # Handle the Start Fire button click\n    @reactive.Effect\n    @reactive.event(input.start_btn)\n    async def _():\n        if not fire_started.get():\n            fire_started.set(True)\n            # Generate random cell number\n            cell_number = random.randint(1, 24)\n            # Use session to send a message to JavaScript - with await\n            await session.send_custom_message('simulation-action', {'action': 'setFire', 'cellNumber': cell_number})\n    \n    # Handle the Reset button click\n    @reactive.Effect\n    @reactive.event(input.reset_btn)\n    async def _():\n        fire_started.set(False)\n        # Use session to send a message to JavaScript - with await\n        await session.send_custom_message('simulation-action', {'action': 'reset'})\n\n# Create the app\napp = App(app_ui, server)\n\n\nTRIZ Principle: Separation\n#| standalone: true\n#| viewerHeight: 690\n# app.py - TRIZ Principle of Separation - Screwdriver with Interchangeable Bits Demo\nfrom shiny import App, ui, render, reactive\nfrom htmltools import HTML, css\nimport random\n\n# Define CSS for the app\napp_css = \"\"\"\nbody {\n    margin: 0;\n    padding: 0;\n    font-family: Arial, sans-serif;\n    background-color: #333;\n    color: white;\n    text-align: center;\n}\n.container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    min-height: 100vh;\n    padding: 20px;\n}\nh1 {\n    margin-bottom: 30px;\n    font-size: 2.5rem;\n}\n.animation-container {\n    position: relative;\n    width: 800px;\n    height: 400px;\n    background-color: #444;\n    border-radius: 10px;\n    margin-bottom: 30px;\n    box-shadow: 0 0 20px rgba(0,0,0,0.5);\n    overflow: hidden;\n}\n.btn-container {\n    display: flex;\n    justify-content: center;\n    gap: 20px;\n    margin-top: 20px;\n}\n.action-btn {\n    padding: 12px 24px;\n    font-size: 16px;\n    color: white;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    transition: background-color 0.3s;\n}\n#start_btn {\n    background: linear-gradient(to bottom, #4CAF50, #45a049);\n}\n#start_btn:disabled {\n    background: #cccccc;\n    cursor: not-allowed;\n}\n#reset_btn {\n    background-color: #f44336;\n}\n.description {\n    max-width: 600px;\n    margin: 30px auto;\n    line-height: 1.6;\n    font-size: 1rem;\n    padding: 0 20px;\n}\n.instructions {\n    margin-bottom: 20px;\n    font-style: italic;\n    color: #ddd;\n    max-width: 600px;\n    font-size: 0.9rem;\n}\n.status {\n    margin-top: 15px;\n    padding: 8px 15px;\n    border-radius: 20px;\n    background-color: rgba(255, 255, 255, 0.1);\n    display: inline-block;\n    transition: all 0.3s;\n}\n/* Screwdriver animation elements */\n#handle {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 300px;\n    height: 60px;\n    background: linear-gradient(to bottom, #999999, #dddddd, #888888, #dddddd, #999999);\n    border-radius: 30px 5px 5px 30px;\n    border: 1px solid #666666;\n}\n#handle-grip {\n    position: absolute;\n    top: 10px;\n    left: 10px;\n    width: calc(100% - 20px);\n    height: calc(100% - 20px);\n    background: linear-gradient(to bottom, #777777, #aaaaaa, #666666, #777777);\n    border-radius: 20px 0 0 20px;\n}\n#ferrule {\n    position: absolute;\n    top: 5px;\n    right: 5px;\n    width: 35px;\n    height: calc(100% - 10px);\n    background: linear-gradient(to bottom, #999999, #eeeeee, #777777, #eeeeee, #999999);\n    border-radius: 0 5px 5px 0;\n}\n.grip-line {\n    position: absolute;\n    width: 3px;\n    height: 30px;\n    background-color: #555555;\n    top: 15px;\n}\n#flathead-bit {\n    position: absolute;\n    top: 50%;\n    left: calc(50% + 150px - 120px);\n    transform: translate(0, -50%);\n    width: 120px;\n    height: 30px;\n    background: linear-gradient(to bottom, #cc3333, #ff6666, #cc0000, #ff6666, #cc3333);\n    border-radius: 0 5px 5px 0;\n    transition: left 1s ease-in-out;\n}\n#flathead-tip {\n    position: absolute;\n    top: -5px;\n    right: 0;\n    width: 15px;\n    height: 40px;\n    background: linear-gradient(to bottom, #cc3333, #ff6666, #cc0000, #ff6666, #cc3333);\n}\n#phillips-bit {\n    position: absolute;\n    top: 50%;\n    left: 900px;\n    transform: translate(0, -50%);\n    width: 120px;\n    height: 30px;\n    background: linear-gradient(to bottom, #3366cc, #6699ff, #0044cc, #6699ff, #3366cc);\n    border-radius: 0 5px 5px 0;\n    transition: left 1s ease-in-out;\n}\n#phillips-tip {\n    position: absolute;\n    top: -5px;\n    right: 0;\n    width: 15px;\n    height: 40px;\n    background: linear-gradient(to bottom, #3366cc, #6699ff, #0044cc, #6699ff, #3366cc);\n}\n.cross-horizontal {\n    position: absolute;\n    top: 18px;\n    right: 3px;\n    width: 14px;\n    height: 4px;\n    background-color: #002266;\n}\n.cross-vertical {\n    position: absolute;\n    top: 13px;\n    right: 8px;\n    width: 4px;\n    height: 14px;\n    background-color: #002266;\n}\n/* Responsive adjustments */\n@media (max-width: 850px) {\n    .animation-container {\n        width: 95%;\n        height: 300px;\n    }\n}\n\"\"\"\n\n# Define UI\napp_ui = ui.page_fluid(\n    # Include CSS\n    ui.tags.style(app_css),\n    \n    # Include necessary JavaScript for animation\n    ui.tags.script(\"\"\"\n    let animationState = 'initial';\n    let animationInProgress = false;\n    \n    function playAnimation() {\n        if (animationInProgress) return;\n        \n        animationInProgress = true;\n        document.getElementById('start_btn').disabled = true;\n        document.getElementById('start_btn').style.background = '#cccccc';\n        document.getElementById('status-display').textContent = 'Separation: Removing the flathead bit';\n        \n        // Step 1: Separate flathead bit\n        const flatheadBit = document.getElementById('flathead-bit');\n        flatheadBit.style.left = '650px';\n        \n        setTimeout(() =&gt; {\n            // Step 2: Transition\n            document.getElementById('status-display').textContent = 'Transition: Switching bits';\n            flatheadBit.style.left = '900px';\n            \n            setTimeout(() =&gt; {\n                // Step 3: Phillips bit appears\n                const phillipsBit = document.getElementById('phillips-bit');\n                phillipsBit.style.left = '650px';\n                document.getElementById('status-display').textContent = 'Reattachment: Phillips bit connecting to handle';\n                \n                setTimeout(() =&gt; {\n                    // Step 4: Phillips bit connects\n                    phillipsBit.style.left = 'calc(50% + 150px - 120px)';\n                    \n                    setTimeout(() =&gt; {\n                        // Complete\n                        document.getElementById('status-display').textContent = 'Complete: Screwdriver now has Phillips bit attached';\n                        animationInProgress = false;\n                    }, 1000);\n                }, 1000);\n            }, 1000);\n        }, 1000);\n    }\n    \n    function resetAnimation() {\n        document.getElementById('flathead-bit').style.left = 'calc(50% + 150px - 120px)';\n        document.getElementById('phillips-bit').style.left = '900px';\n        document.getElementById('status-display').textContent = 'Initial State: Flathead bit attached to handle';\n        document.getElementById('start_btn').disabled = false;\n        document.getElementById('start_btn').style.background = 'linear-gradient(to bottom, #4CAF50, #45a049)';\n        animationInProgress = false;\n    }\n    \n    // Add a message handler for Python-&gt;JS communication\n    $(document).on('shiny:connected', function() {\n        Shiny.addCustomMessageHandler('animation-action', function(message) {\n            if (message.action === 'play') {\n                playAnimation();\n            } else if (message.action === 'reset') {\n                resetAnimation();\n            }\n        });\n    });\n    \"\"\"),\n    \n    # Main container\n    ui.div(\n        {\"class\": \"container\"},\n        # Animation container\n        ui.div(\n            {\"class\": \"animation-container\"},\n            \n            # Handle\n            ui.div({\"id\": \"handle\"},\n                # Grip area\n                ui.div({\"id\": \"handle-grip\"}),\n                # Ferrule\n                ui.div({\"id\": \"ferrule\"})\n            ),\n            \n            # Grip lines\n            *[ui.div({\"class\": \"grip-line\", \"style\": f\"left: {40 + i * 30}px;\"}) for i in range(8)],\n            \n            # Flathead bit\n            ui.div({\"id\": \"flathead-bit\"},\n                ui.div({\"id\": \"flathead-tip\"})\n            ),\n            \n            # Phillips bit\n            ui.div({\"id\": \"phillips-bit\"},\n                ui.div({\"id\": \"phillips-tip\"},\n                    ui.div({\"class\": \"cross-horizontal\"}),\n                    ui.div({\"class\": \"cross-vertical\"})\n                )\n            )\n        ),\n        \n        # Status indicator\n        ui.div(\n            {\"id\": \"status-display\", \"class\": \"status\"},\n            \"Initial State: Flathead bit attached to handle\"\n        ),\n        \n        # Buttons\n        ui.div(\n            {\"class\": \"btn-container\"},\n            ui.input_action_button(\"start_btn\", \"Play Animation\", class_=\"action-btn\"),\n            ui.input_action_button(\"reset_btn\", \"Reset\", class_=\"action-btn\")\n        ),\n        \n        # Description\n        ui.div(\n            {\"class\": \"description\"},\n           \n        )\n    )\n)\n\n# Define server logic\ndef server(input, output, session):\n    # Track animation state\n    animation_playing = reactive.Value(False)\n    \n    # Handle the Play Animation button click\n    @reactive.Effect\n    @reactive.event(input.start_btn)\n    async def _():\n        if not animation_playing.get():\n            animation_playing.set(True)\n            # Send message to JavaScript\n            await session.send_custom_message('animation-action', {'action': 'play'})\n    \n    # Handle the Reset button click\n    @reactive.Effect\n    @reactive.event(input.reset_btn)\n    async def _():\n        animation_playing.set(False)\n        # Send message to JavaScript\n        await session.send_custom_message('animation-action', {'action': 'reset'})\n\n# Create the app\napp = App(app_ui, server)\n\n\n\nEditor with app\nIf you want to display an editor panel with along with the running application, use #| components: [editor, viewer]. Users will be able to use the editor to modify the code and re-run the application.\n#| standalone: true\n#| viewerHeight: 690\nfrom shiny import App, ui, reactive, render\nimport shinyswatch\nfrom htmltools import HTML, css, tags\n\n# Define the SVG content for the pot visualization\ndef get_homogeneous_pot_svg():\n    return HTML(\"\"\"\n    &lt;svg width=\"300\" height=\"200\" viewBox=\"0 0 300 200\" id=\"pot-svg\"&gt;\n        &lt;!-- Homogeneous Pot --&gt;\n        &lt;g id=\"homogeneous-pot\"&gt;\n            &lt;!-- Pot body --&gt;\n            &lt;path d=\"M80,40 L80,160 C80,180 220,180 220,160 L220,40\" fill=\"#a9a9a9\" stroke=\"#666\" stroke-width=\"2\"/&gt;\n            \n            &lt;!-- Pot interior - showing uniform material --&gt;\n            &lt;path d=\"M90,50 L90,155 C90,170 210,170 210,155 L210,50\" fill=\"none\" stroke=\"#666\" stroke-width=\"1\" stroke-dasharray=\"3,3\"/&gt;\n            \n            &lt;!-- Pot rim --&gt;\n            &lt;path d=\"M70,40 C70,30 230,30 230,40\" fill=\"#a9a9a9\" stroke=\"#666\" stroke-width=\"2\"/&gt;\n            \n            &lt;!-- Pot handle right --&gt;\n            &lt;path d=\"M220,80 C260,80 260,120 220,120\" fill=\"none\" stroke=\"#666\" stroke-width=\"5\"/&gt;\n            \n            &lt;!-- Label for material --&gt;\n            &lt;text x=\"150\" y=\"100\" text-anchor=\"middle\" fill=\"#fff\" font-weight=\"bold\"&gt;Aluminum&lt;/text&gt;\n        &lt;/g&gt;\n    &lt;/svg&gt;\n    \"\"\")\n\ndef get_heterogeneous_pot_svg():\n    return HTML(\"\"\"\n    &lt;svg width=\"300\" height=\"200\" viewBox=\"0 0 300 200\" id=\"pot-svg\"&gt;\n        &lt;!-- Heterogeneous Pot --&gt;\n        &lt;g id=\"heterogeneous-pot\"&gt;\n            &lt;!-- Pot body - same outer shape --&gt;\n            &lt;path d=\"M80,40 L80,160 C80,180 220,180 220,160 L220,40\" fill=\"#a9a9a9\" stroke=\"#666\" stroke-width=\"2\"/&gt;\n            \n            &lt;!-- Interior layers --&gt;\n            &lt;!-- Stainless steel inner layer --&gt;\n            &lt;path d=\"M90,50 L90,155 C90,170 210,170 210,155 L210,50\" fill=\"none\" stroke=\"#c0c0c0\" stroke-width=\"3\"/&gt;\n            \n            &lt;!-- Aluminum middle layer --&gt;\n            &lt;path d=\"M85,45 L85,157 C85,175 215,175 215,157 L215,45\" fill=\"none\" stroke=\"#a9a9a9\" stroke-width=\"3\"/&gt;\n            \n            &lt;!-- Copper outer layer --&gt;\n            &lt;path d=\"M80,40 L80,160 C80,180 220,180 220,160 L220,40\" fill=\"none\" stroke=\"#b87333\" stroke-width=\"3\"/&gt;\n            \n            &lt;!-- Pot rim --&gt;\n            &lt;path d=\"M70,40 C70,30 230,30 230,40\" fill=\"#c0c0c0\" stroke=\"#666\" stroke-width=\"2\"/&gt;\n            \n            &lt;!-- Pot handle right --&gt;\n            &lt;path d=\"M220,80 C260,80 260,120 220,120\" fill=\"none\" stroke=\"#666\" stroke-width=\"5\"/&gt;\n            \n            &lt;!-- Layer indicators inside pot --&gt;\n            &lt;line x1=\"100\" y1=\"70\" x2=\"120\" y2=\"70\" stroke=\"#c0c0c0\" stroke-width=\"2\"/&gt;\n            &lt;text x=\"125\" y=\"75\" font-size=\"12\"&gt;Stainless Steel&lt;/text&gt;\n            \n            &lt;line x1=\"100\" y1=\"100\" x2=\"120\" y2=\"100\" stroke=\"#a9a9a9\" stroke-width=\"2\"/&gt;\n            &lt;text x=\"125\" y=\"105\" font-size=\"12\"&gt;Aluminum&lt;/text&gt;\n            \n            &lt;line x1=\"100\" y1=\"130\" x2=\"120\" y2=\"130\" stroke=\"#b87333\" stroke-width=\"2\"/&gt;\n            &lt;text x=\"125\" y=\"135\" font-size=\"12\"&gt;Copper&lt;/text&gt;\n        &lt;/g&gt;\n    &lt;/svg&gt;\n    \"\"\")\n\n# Custom CSS for the app\ncss_content = \"\"\"\n.container {\n    max-width: 900px;\n    margin: 0 auto;\n    background-color: white;\n    padding: 30px;\n    border-radius: 8px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\nh1 {\n    text-align: center;\n    color: #2c3e50;\n    margin-bottom: 30px;\n}\n.illustration-container {\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 30px;\n    position: relative;\n}\n.pot-container {\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    position: relative;\n}\n.layer-diagram {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 20px;\n}\n.layer {\n    width: 200px;\n    height: 40px;\n    margin: 2px 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n    font-weight: bold;\n    border-radius: 4px;\n    cursor: pointer;\n    transition: transform 0.2s, box-shadow 0.2s;\n}\n.layer:hover {\n    transform: scale(1.05);\n    box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n}\n.info-panel {\n    background-color: #f8f9fa;\n    padding: 20px;\n    border-radius: 8px;\n    margin-top: 20px;\n}\n.tooltip-content {\n    display: none;\n    position: absolute;\n    background-color: #34495e;\n    color: white;\n    padding: 10px 15px;\n    border-radius: 4px;\n    z-index: 100;\n    max-width: 250px;\n    box-shadow: 0 3px 10px rgba(0,0,0,0.2);\n}\n.layer:hover .tooltip-content {\n    display: block;\n}\n\"\"\"\n\n# Define the UI\ndef ui_content():\n    # Define the page layout with theme as a keyword argument\n    return ui.page_fluid(\n        ui.tags.head(\n            ui.tags.style(css_content),\n        ),\n        ui.div(\n            {\"class\": \"container\"},\n            ui.h1(\"Principle of Local Quality\"),\n            ui.p(\"Transform an object from a homogeneous structure to a heterogeneous one, where different parts have specialized functions.\"),\n            \n            ui.div(\n                {\"class\": \"illustration-container\"},\n                # Pot container\n                ui.div(\n                    {\"class\": \"pot-container\"},\n                    ui.output_ui(\"pot_svg\")\n                ),\n                # Layer diagram\n                ui.div(\n                    {\"class\": \"layer-diagram\"},\n                    ui.output_ui(\"layer_diagram\")\n                )\n            ),\n            \n            ui.div(\n                {\"class\": \"control-panel\", \"style\": \"text-align: center; margin: 20px 0;\"},\n                ui.input_action_button(\n                    \"toggle_button\", \n                    \"Apply Local Quality Principle\", \n                    class_=\"btn-primary\"\n                )\n            ),\n            \n            ui.div(\n                {\"class\": \"info-panel\"},\n                ui.h3(ui.output_text(\"info_title\")),\n                ui.output_ui(\"info_text\")\n            )\n        ),\n        theme=shinyswatch.theme.cosmo()\n    )\n\n# Define the server\ndef server(input, output, session):\n    # Reactive value to track the current state\n    is_heterogeneous = reactive.Value(False)\n    \n    # Handler for the toggle button\n    @reactive.Effect\n    @reactive.event(input.toggle_button)\n    def _():\n        current_state = is_heterogeneous.get()\n        is_heterogeneous.set(not current_state)\n        \n        # Update the button text\n        if not current_state:\n            ui.update_action_button(\n                \"toggle_button\", \n                label=\"Return to Homogeneous Structure\"\n            )\n        else:\n            ui.update_action_button(\n                \"toggle_button\", \n                label=\"Apply Local Quality Principle\"\n            )\n    \n    # Render the pot SVG based on the current state\n    @output\n    @render.ui\n    def pot_svg():\n        if is_heterogeneous.get():\n            return get_heterogeneous_pot_svg()\n        else:\n            return get_homogeneous_pot_svg()\n    \n    # Render the layer diagram based on the current state\n    @output\n    @render.ui\n    def layer_diagram():\n        if is_heterogeneous.get():\n            return ui.div(\n                ui.div(\n                    {\"class\": \"layer\", \"style\": \"background-color: #c0c0c0;\"},\n                    \"Stainless Steel\",\n                    ui.div(\n                        {\"class\": \"tooltip-content\"},\n                        \"Non-reactive and easy-to-clean surface for food safety\"\n                    )\n                ),\n                ui.div(\n                    {\"class\": \"layer\", \"style\": \"background-color: #a9a9a9;\"},\n                    \"Aluminum\",\n                    ui.div(\n                        {\"class\": \"tooltip-content\"},\n                        \"Distributes heat evenly throughout the pot to prevent hot spots\"\n                    )\n                ),\n                ui.div(\n                    {\"class\": \"layer\", \"style\": \"background-color: #b87333;\"},\n                    \"Copper\",\n                    ui.div(\n                        {\"class\": \"tooltip-content\"},\n                        \"Excellent heat conductor for quick and efficient heating from the bottom\"\n                    )\n                )\n            )\n        else:\n            return ui.div(\n                ui.div(\n                    {\"class\": \"layer\", \"style\": \"background-color: #a9a9a9;\"},\n                    \"Aluminum\"\n                )\n            )\n    \n    # Render the info title based on the current state\n    @output\n    @render.text\n    def info_title():\n        if is_heterogeneous.get():\n            return \"Enhanced Pot: Heterogeneous Structure\"\n        else:\n            return \"Standard Pot: Homogeneous Structure\"\n    \n    # Render the info text based on the current state\n    @output\n    @render.ui\n    def info_text():\n        if is_heterogeneous.get():\n            return ui.HTML(\n                \"\"\"This pot has specialized layers for improved functionality. \n                &lt;strong&gt;Pros:&lt;/strong&gt; Copper bottom for quick heating, aluminum middle \n                for even heat distribution, and stainless steel interior for non-reactive \n                cooking surface. &lt;strong&gt;Cons:&lt;/strong&gt; More complex to manufacture.\"\"\"\n            )\n        else:\n            return ui.HTML(\n                \"\"\"This pot has a uniform aluminum structure. &lt;strong&gt;Pros:&lt;/strong&gt; Simple design, \n                even heat distribution. &lt;strong&gt;Cons:&lt;/strong&gt; May react with acidic foods, \n                wear out faster, and doesn't optimize heating efficiency.\"\"\"\n            )\n\n# Create the app\napp = App(ui_content(), server)\n#| standalone: true\n#| viewerHeight: 690\nfrom shiny import App, ui, reactive, render\nimport asyncio\n\n# Define CSS\napp_css = \"\"\"\nbody {\n    margin: 0;\n    padding: 0;\n    font-family: Arial, sans-serif;\n    background-color: #f0f0f0;\n    color: #333;\n    text-align: center;\n}\n.container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    padding: 20px;\n}\nh1 {\n    margin-bottom: 20px;\n    font-size: 2rem;\n    color: #333;\n}\n.description {\n    max-width: 700px;\n    margin: 0 auto 30px;\n    line-height: 1.5;\n    color: #555;\n    font-size: 1rem;\n}\n.animation-container {\n    position: relative;\n    width: 700px;\n    height: 400px;\n    background-color: #e0e0e0;\n    border-radius: 10px;\n    margin-bottom: 30px;\n    box-shadow: 0 0 10px rgba(0,0,0,0.2);\n    overflow: hidden;\n}\n.btn-container {\n    display: flex;\n    justify-content: center;\n    gap: 20px;\n    margin-bottom: 20px;\n}\n.action-btn {\n    padding: 10px 15px;\n    font-size: 16px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    transition: background-color 0.3s;\n}\n.drill-btn {\n    background-color: #4CAF50;\n    color: white;\n}\n.drill-btn:hover {\n    background-color: #45a049;\n}\n.drill-btn:disabled {\n    background-color: #cccccc;\n    cursor: not-allowed;\n}\n.reset-btn {\n    background-color: #888;\n    color: white;\n}\n.reset-btn:hover {\n    background-color: #777;\n}\n.ground {\n    position: absolute;\n    bottom: 0;\n    width: 100%;\n    height: 2px;\n    background-color: #777777;\n}\n.slab {\n    position: absolute;\n    width: 200px;\n    height: 60px;\n    bottom: 2px;\n    background-color: #a0a0a0;\n    border: 2px solid #333333;\n    z-index: 5;\n}\n.left-slab {\n    left: 150px;\n}\n.right-slab {\n    left: 450px;\n}\n.hole {\n    position: absolute;\n    background-color: #555555;\n    box-shadow: inset 0 0 15px rgba(0, 0, 0, 0.7);\n    opacity: 0;\n    transition: opacity 0.5s ease;\n    z-index: 10;\n}\n.round-hole {\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    left: 230px;\n    bottom: 12px;\n}\n.square-hole {\n    width: 40px;\n    height: 40px;\n    left: 530px;\n    bottom: 12px;\n}\n.drill {\n    position: absolute;\n    width: 40px;\n    height: 120px;\n    background-color: #333333;\n    top: 100px;\n    transition: top 1s ease;\n}\n.left-drill {\n    left: 230px;\n}\n.right-drill {\n    left: 530px;\n}\n.drill-handle {\n    position: absolute;\n    top: 20px;\n    right: -15px;\n    width: 15px;\n    height: 30px;\n    background-color: #333333;\n}\n.drill-button {\n    position: absolute;\n    top: 25px;\n    right: -7px;\n    width: 10px;\n    height: 10px;\n    border-radius: 50%;\n    background-color: #ff0000;\n}\n.drill-bit {\n    position: absolute;\n    bottom: -30px;\n    left: 10px;\n    width: 20px;\n    height: 30px;\n    transition: transform 0.1s ease;\n}\n.round-bit {\n    background-color: #666666;\n    clip-path: polygon(0 0, 100% 0, 50% 100%);\n}\n.square-bit {\n    background-color: #666666;\n}\n.label {\n    position: absolute;\n    text-align: center;\n    font-size: 14px;\n    color: #000000;\n}\n.top-label {\n    width: 200px;\n    top: 80px;\n}\n.bottom-label {\n    width: 200px;\n    bottom: -25px;\n}\n.left-top-label {\n    left: 150px;\n}\n.right-top-label {\n    left: 450px;\n}\n.left-bottom-label {\n    left: 150px;\n}\n.right-bottom-label {\n    left: 450px;\n}\n@keyframes vibrate {\n    0% { transform: translateX(0); }\n    25% { transform: translateX(-2px); }\n    50% { transform: translateX(0); }\n    75% { transform: translateX(2px); }\n    100% { transform: translateX(0); }\n}\n.vibrate {\n    animation: vibrate 0.1s infinite;\n}\n.vibrate-strong {\n    animation: vibrate 0.05s infinite;\n}\n\"\"\"\n\n# Define JavaScript\napp_js = \"\"\"\nlet leftDrilling = false;\nlet rightDrilling = false;\nlet leftHasHole = false;\nlet rightHasHole = false;\n\nfunction drillRoundHole() {\n    if (leftDrilling) return;\n    \n    leftDrilling = true;\n    document.getElementById('traditional_btn').disabled = true;\n    \n    // Move drill down\n    const leftDrill = document.getElementById('left-drill');\n    leftDrill.style.top = '220px';\n    \n    // Add vibration effect\n    setTimeout(() =&gt; {\n        leftDrill.classList.add('vibrate');\n        const leftBit = document.getElementById('left-bit');\n        leftBit.classList.add('vibrate');\n        \n        // Create hole after delay\n        setTimeout(() =&gt; {\n            const hole = document.getElementById('round-hole');\n            hole.style.opacity = '1';\n            leftHasHole = true;\n            \n            // Move drill back up\n            setTimeout(() =&gt; {\n                leftDrill.classList.remove('vibrate');\n                leftBit.classList.remove('vibrate');\n                leftDrill.style.top = '100px';\n                \n                // Re-enable button after animation completes\n                setTimeout(() =&gt; {\n                    leftDrilling = false;\n                    document.getElementById('traditional_btn').disabled = false;\n                }, 1000);\n            }, 500);\n        }, 1000);\n    }, 1000);\n}\n\nfunction drillSquareHole() {\n    if (rightDrilling) return;\n    \n    rightDrilling = true;\n    document.getElementById('special_btn').disabled = true;\n    \n    // Move drill down\n    const rightDrill = document.getElementById('right-drill');\n    rightDrill.style.top = '220px';\n    \n    // Add vibration effect (stronger for special drill)\n    setTimeout(() =&gt; {\n        rightDrill.classList.add('vibrate-strong');\n        const rightBit = document.getElementById('right-bit');\n        rightBit.classList.add('vibrate-strong');\n        \n        // Create hole after delay\n        setTimeout(() =&gt; {\n            const hole = document.getElementById('square-hole');\n            hole.style.opacity = '1';\n            rightHasHole = true;\n            \n            // Move drill back up\n            setTimeout(() =&gt; {\n                rightDrill.classList.remove('vibrate-strong');\n                rightBit.classList.remove('vibrate-strong');\n                rightDrill.style.top = '100px';\n                \n                // Re-enable button after animation completes\n                setTimeout(() =&gt; {\n                    rightDrilling = false;\n                    document.getElementById('special_btn').disabled = false;\n                }, 1000);\n            }, 500);\n        }, 1000);\n    }, 1000);\n}\n\nfunction resetScene() {\n    // Reset holes\n    document.getElementById('round-hole').style.opacity = '0';\n    document.getElementById('square-hole').style.opacity = '0';\n    \n    // Reset drills position\n    document.getElementById('left-drill').style.top = '100px';\n    document.getElementById('right-drill').style.top = '100px';\n    \n    // Remove vibration effects\n    document.getElementById('left-drill').classList.remove('vibrate');\n    document.getElementById('right-drill').classList.remove('vibrate-strong');\n    document.getElementById('left-bit').classList.remove('vibrate');\n    document.getElementById('right-bit').classList.remove('vibrate-strong');\n    \n    // Reset state\n    leftDrilling = false;\n    rightDrilling = false;\n    leftHasHole = false;\n    rightHasHole = false;\n    \n    // Enable buttons\n    document.getElementById('traditional_btn').disabled = false;\n    document.getElementById('special_btn').disabled = false;\n}\n\n// Add a message handler for Python-&gt;JS communication\n$(document).on('shiny:connected', function() {\n    Shiny.addCustomMessageHandler('animation-action', function(message) {\n        if (message.action === 'drill-round') {\n            drillRoundHole();\n        } else if (message.action === 'drill-square') {\n            drillSquareHole();\n        } else if (message.action === 'reset') {\n            resetScene();\n        }\n    });\n});\n\"\"\"\n\n# Define UI\napp_ui = ui.page_fluid(\n    # Include CSS and JavaScript\n    ui.tags.style(app_css),\n    ui.tags.script(app_js),\n    \n    # Main container\n    ui.div(\n        {\"class\": \"container\"},\n        ui.h1(\"TRIZ Anti-Asymmetry Principle\"),\n        ui.p(\n            \"This visualization demonstrates the TRIZ principle of \\\"Anti-(Asymmetry)\\\" using drills as an example. \"\n            \"The traditional drill (left) creates round holes, while the special hand-held drill (right) creates square holes in concrete slabs.\",\n            class_=\"description\"\n        ),\n        \n        # Buttons\n        ui.div(\n            {\"class\": \"btn-container\"},\n            ui.input_action_button(\"traditional_btn\", \"Drill Round Hole\", class_=\"action-btn drill-btn\"),\n            ui.input_action_button(\"special_btn\", \"Drill Square Hole\", class_=\"action-btn drill-btn\"),\n            ui.input_action_button(\"reset_btn\", \"Reset\", class_=\"action-btn reset-btn\")\n        ),\n        \n        # Animation container\n        ui.div(\n            {\"class\": \"animation-container\"},\n            \n            # Ground line\n            ui.div({\"class\": \"ground\"}),\n            \n            # Concrete slabs\n            ui.div({\"class\": \"slab left-slab\"}),\n            ui.div({\"class\": \"slab right-slab\"}),\n            \n            # Holes\n            ui.div({\"id\": \"round-hole\", \"class\": \"hole round-hole\"}),\n            ui.div({\"id\": \"square-hole\", \"class\": \"hole square-hole\"}),\n            \n            # Left drill (traditional)\n            ui.div(\n                {\"id\": \"left-drill\", \"class\": \"drill left-drill\"},\n                ui.div({\"class\": \"drill-handle\"}),\n                ui.div({\"class\": \"drill-button\"}),\n                ui.div({\"id\": \"left-bit\", \"class\": \"drill-bit round-bit\"})\n            ),\n            \n            # Right drill (special)\n            ui.div(\n                {\"id\": \"right-drill\", \"class\": \"drill right-drill\"},\n                ui.div({\"class\": \"drill-handle\"}),\n                ui.div({\"class\": \"drill-button\"}),\n                ui.div({\"id\": \"right-bit\", \"class\": \"drill-bit square-bit\"})\n            ),\n            \n            # Labels\n            ui.div({\"class\": \"label top-label left-top-label\"}, \"Traditional Drill\"),\n            ui.div({\"class\": \"label top-label right-top-label\"}, \"Special Drill with Vibrator\"),\n            ui.div({\"class\": \"label bottom-label left-bottom-label\"}, \"Round Hole\"),\n            ui.div({\"class\": \"label bottom-label right-bottom-label\"}, \"Square Hole\")\n        )\n    )\n)\n\n# Define server logic\ndef server(input, output, session):\n    # Handle the traditional drill button click\n    @reactive.Effect\n    @reactive.event(input.traditional_btn)\n    async def handle_traditional_drill():\n        await session.send_custom_message('animation-action', {'action': 'drill-round'})\n    \n    # Handle the special drill button click\n    @reactive.Effect\n    @reactive.event(input.special_btn)\n    async def handle_special_drill():\n        await session.send_custom_message('animation-action', {'action': 'drill-square'})\n    \n    # Handle the reset button click\n    @reactive.Effect\n    @reactive.event(input.reset_btn)\n    async def handle_reset():\n        await session.send_custom_message('animation-action', {'action': 'reset'})\n\n# Create the app\napp = App(app_ui, server)\n\n#| standalone: true\n#| viewerHeight: 690\nfrom shiny import App, ui, render, reactive\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport numpy as np\nimport matplotlib\nfrom matplotlib.path import Path\n\n# Set better fonts for improved text rendering\nmatplotlib.rcParams['font.family'] = 'sans-serif'\nmatplotlib.rcParams['font.sans-serif'] = ['Arial', 'Helvetica', 'DejaVu Sans']\nmatplotlib.rcParams['font.size'] = 12\nmatplotlib.rcParams['axes.titlesize'] = 16\nmatplotlib.rcParams['figure.titlesize'] = 18\n\n# Define the app UI with enhanced styling\napp_ui = ui.page_fluid(\n    ui.tags.style(\"\"\"\n        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');\n        \n        body {\n            font-family: 'Poppins', sans-serif;\n            background-color: #f5f7fa;\n            color: #333;\n            line-height: 1.6;\n        }\n        \n        h1 {\n            color: #2c3e50;\n            font-weight: 600;\n            margin-bottom: 20px;\n            border-bottom: 2px solid #3498db;\n            padding-bottom: 10px;\n        }\n        \n        h4 {\n            color: #2c3e50;\n            font-weight: 500;\n            margin-top: 20px;\n        }\n        \n        .container-fluid {\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        \n        .control-panel {\n            background-color: white;\n            border-radius: 12px;\n            box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n            padding: 25px;\n            margin-bottom: 20px;\n        }\n        \n        .plot-container {\n            background-color: white;\n            border-radius: 12px;\n            box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n            overflow: hidden;\n            margin-bottom: 20px;\n        }\n        \n        .btn {\n            border-radius: 8px;\n            font-weight: 500;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n            margin-bottom: 15px;\n            padding: 10px 0;\n            transition: all 0.3s ease;\n        }\n        \n        .btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n        }\n        \n        .btn-danger {\n            background-color: #e74c3c;\n            border-color: #e74c3c;\n        }\n        \n        .btn-success {\n            background-color: #2ecc71;\n            border-color: #2ecc71;\n        }\n        \n        .btn-primary {\n            background-color: #3498db;\n            border-color: #3498db;\n        }\n        \n        .btn-secondary {\n            background-color: #7f8c8d;\n            border-color: #7f8c8d;\n        }\n        \n        .color-display {\n            font-size: 24px;\n            font-weight: 600;\n            text-align: center;\n            margin: 15px 0;\n            padding: 10px;\n            border-radius: 8px;\n            background-color: #f8f9fa;\n        }\n        \n        hr {\n            border-color: #eee;\n            margin: 25px 0;\n        }\n        \n        .app-description {\n            background-color: white;\n            border-radius: 12px;\n            padding: 20px;\n            margin-bottom: 20px;\n            box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n            font-size: 16px;\n            line-height: 1.6;\n        }\n    \"\"\"),\n    ui.row(\n        ui.column(3,\n            ui.div(\n                ui.input_action_button(\"red_btn\", \"Red Ink\", class_=\"btn-danger\", width=\"100%\"),\n                ui.input_action_button(\"green_btn\", \"Green Ink\", class_=\"btn-success\", width=\"100%\"),\n                ui.input_action_button(\"blue_btn\", \"Blue Ink\", class_=\"btn-primary\", width=\"100%\"),\n                ui.input_action_button(\"rotate_btn\", \"Rotate Pen\", class_=\"btn-secondary\", width=\"100%\"),\n                class_=\"control-panel\"\n            )\n        ),\n        ui.column(9,\n            ui.div(\n                ui.output_plot(\"pen_plot\", height=\"600px\", width=\"100%\"),\n                class_=\"plot-container\"\n            )\n        )\n    )\n)\n\n# Define the server logic\ndef server(input, output, session):\n    # State variables\n    pen_state = reactive.Value({\n        'color_name': 'Red',\n        'color_hex': '#e74c3c',\n        'rotation_angle': 0\n    })\n\n    # Drawing function\n    @render.plot\n    def pen_plot():\n        # Get current state\n        state = pen_state.get()\n        \n        # Create figure and axis with a larger figure size for better visibility\n        plt.style.use('ggplot')\n        fig, ax = plt.subplots(figsize=(14, 10))\n        \n        # Set up plot with more room\n        ax.set_xlim(-10, 10)\n        ax.set_ylim(-7, 7)\n        ax.set_aspect('equal')\n        ax.set_facecolor('#f8f9fa')\n        \n        # Remove axes\n        ax.set_xticks([])\n        ax.set_yticks([])\n        for spine in ax.spines.values():\n            spine.set_visible(False)\n        \n        # Add a nice background rectangle\n        background = patches.Rectangle(\n            (-10, -7), 20, 14,\n            linewidth=0,\n            facecolor='#ffffff',\n            zorder=-2\n        )\n        ax.add_patch(background)\n                \n        # Define the rotation angle (in radians)\n        angle = state['rotation_angle']\n        \n        # Pen dimensions\n        pen_length = 8.0\n        pen_width = 1.0\n        tip_length = 1.5\n        \n        # Create a transform for rotation\n        cos_ang = np.cos(angle)\n        sin_ang = np.sin(angle)\n        \n        # Rotate point function\n        def rotate_point(x, y):\n            return x * cos_ang - y * sin_ang, x * sin_ang + y * cos_ang\n        \n        # Draw pen body with gradient effect\n        body_color = '#34495e'  # Darker blue-gray\n        \n        # Define corners of the pen body\n        x0, y0 = -pen_length/2, -pen_width/2  # Bottom-left\n        x1, y1 = pen_length/2, -pen_width/2   # Bottom-right\n        x2, y2 = pen_length/2, pen_width/2    # Top-right\n        x3, y3 = -pen_length/2, pen_width/2   # Top-left\n        \n        # Rotated corners\n        rx0, ry0 = rotate_point(x0, y0)\n        rx1, ry1 = rotate_point(x1, y1)\n        rx2, ry2 = rotate_point(x2, y2)\n        rx3, ry3 = rotate_point(x3, y3)\n        \n        # Draw pen body\n        pen_body = patches.Polygon(\n            [[rx0, ry0], [rx1, ry1], [rx2, ry2], [rx3, ry3]],\n            closed=True,\n            facecolor=body_color,\n            edgecolor='#2c3e50',\n            linewidth=1.5\n        )\n        ax.add_patch(pen_body)\n        \n        # Add highlight to pen body for 3D effect\n        highlight_width = pen_width * 0.4\n        hx0, hy0 = -pen_length/2, -pen_width/2 + highlight_width  # Bottom-left\n        hx1, hy1 = pen_length/2, -pen_width/2 + highlight_width   # Bottom-right\n        hx2, hy2 = pen_length/2, -pen_width/2 + highlight_width*2  # Top-right\n        hx3, hy3 = -pen_length/2, -pen_width/2 + highlight_width*2  # Top-left\n        \n        # Rotated corners\n        rhx0, rhy0 = rotate_point(hx0, hy0)\n        rhx1, rhy1 = rotate_point(hx1, hy1)\n        rhx2, rhy2 = rotate_point(hx2, hy2)\n        rhx3, rhy3 = rotate_point(hx3, hy3)\n        \n        # Draw highlight\n        pen_highlight = patches.Polygon(\n            [[rhx0, rhy0], [rhx1, rhy1], [rhx2, rhy2], [rhx3, rhy3]],\n            closed=True,\n            facecolor='#4e6d8c',\n            edgecolor=None,\n            alpha=0.6\n        )\n        ax.add_patch(pen_highlight)\n        \n        # Pen tip (triangle) at right end of pen\n        tip_x = pen_length/2\n        tip_width = pen_width\n        \n        # Define corners of the pen tip\n        tx0, ty0 = tip_x, -tip_width/2            # Bottom-left\n        tx1, ty1 = tip_x + tip_length, 0          # Tip\n        tx2, ty2 = tip_x, tip_width/2             # Top-left\n        \n        # Rotate points\n        rtx0, rty0 = rotate_point(tx0, ty0)\n        rtx1, rty1 = rotate_point(tx1, ty1)\n        rtx2, rty2 = rotate_point(tx2, ty2)\n        \n        # Draw pen tip with current color\n        pen_tip = patches.Polygon(\n            [[rtx0, rty0], [rtx1, rty1], [rtx2, rty2]],\n            closed=True,\n            facecolor=state['color_hex'],\n            edgecolor='#333333',\n            linewidth=1.5\n        )\n        ax.add_patch(pen_tip)\n        \n        # Pen clip (small rectangle on top of pen)\n        clip_length = pen_length * 0.3\n        clip_width = 0.25\n        clip_x = -pen_length * 0.3\n        clip_y = pen_width/2\n        \n        # Define corners of the clip\n        cx0, cy0 = clip_x, clip_y                    # Bottom-left\n        cx1, cy1 = clip_x + clip_length, clip_y      # Bottom-right\n        cx2, cy2 = clip_x + clip_length, clip_y + clip_width  # Top-right\n        cx3, cy3 = clip_x, clip_y + clip_width       # Top-left\n        \n        # Rotate points\n        rcx0, rcy0 = rotate_point(cx0, cy0)\n        rcx1, rcy1 = rotate_point(cx1, cy1)\n        rcx2, rcy2 = rotate_point(cx2, cy2)\n        rcx3, rcy3 = rotate_point(cx3, cy3)\n        \n        # Draw pen clip\n        pen_clip = patches.Polygon(\n            [[rcx0, rcy0], [rcx1, rcy1], [rcx2, rcy2], [rcx3, rcy3]],\n            closed=True,\n            facecolor='#2c3e50',\n            edgecolor='#1c2e40',\n            linewidth=1.5\n        )\n        ax.add_patch(pen_clip)\n        \n        # Horizontal divider in pen body (shows the multi-color mechanism)\n        divider_x = -pen_length * 0.1\n        \n        # Define points for the divider line\n        dx0, dy0 = divider_x, -pen_width/2\n        dx1, dy1 = divider_x, pen_width/2\n        \n        # Rotate points\n        rdx0, rdy0 = rotate_point(dx0, dy0)\n        rdx1, rdy1 = rotate_point(dx1, dy1)\n        \n        # Draw divider line\n        ax.plot([rdx0, rdx1], [rdy0, rdy1], color='#1c2e40', linewidth=2)\n        \n        # Color selector buttons on pen\n        button_radius = 0.35\n        button_x = -pen_length * 0.35\n        buttons_spacing = 0.7\n        button_colors = ['#e74c3c', '#2ecc71', '#3498db']  # Match UI buttons\n        button_names = ['Red', 'Green', 'Blue']\n        button_y = -pen_width * 0.8\n        \n        # Draw three color selector buttons\n        for i, color in enumerate(button_colors):\n            bx = button_x - i * buttons_spacing\n            rbx, rby = rotate_point(bx, button_y)\n            \n            # Highlight the selected color\n            edge_width = 3 if color.upper() == state['color_hex'].upper() else 1.5\n            edge_color = '#1c2e40' if color.upper() == state['color_hex'].upper() else '#333333'\n            \n            # Draw button with shadow effect for 3D look\n            shadow = patches.Circle(\n                (rbx+0.05, rby-0.05),\n                button_radius,\n                facecolor='#00000022',\n                zorder=1\n            )\n            ax.add_patch(shadow)\n            \n            button = patches.Circle(\n                (rbx, rby),\n                button_radius,\n                facecolor=color,\n                edgecolor=edge_color,\n                linewidth=edge_width,\n                zorder=2\n            )\n            ax.add_patch(button)\n            \n            # Add label to the button\n            if color.upper() == state['color_hex'].upper():\n                ax.text(\n                    rbx, rby - button_radius - 0.3,\n                    button_names[i],\n                    ha='center',\n                    va='center',\n                    fontsize=10,\n                    fontweight='bold',\n                    color='#333333',\n                    bbox=dict(facecolor='white', alpha=0.7, edgecolor='none', pad=2, boxstyle=\"round,pad=0.3\")\n                )\n        \n        # Create a nicer paper area with shadow\n        paper_width = 2.0\n        paper_height = 1.5\n        paper_x = -paper_width/2\n        paper_y = -10\n        \n        # Draw paper with rounded corners\n        paper_verts = [\n            (paper_x, paper_y + 0.3),                 # bottom left with radius\n            (paper_x, paper_y + paper_height - 0.3),  # top left with radius\n            (paper_x + 0.3, paper_y + paper_height),  # top left corner\n            (paper_x + paper_width - 0.3, paper_y + paper_height),  # top right corner\n            (paper_x + paper_width, paper_y + paper_height - 0.3),  # top right with radius\n            (paper_x + paper_width, paper_y + 0.3),   # bottom right with radius\n            (paper_x + paper_width - 0.3, paper_y),   # bottom right corner\n            (paper_x + 0.3, paper_y),                 # bottom left corner\n            (paper_x, paper_y + 0.3),                 # back to start\n        ]\n        \n        paper_codes = [\n            Path.MOVETO,\n            Path.LINETO,\n            Path.CURVE3,\n            Path.LINETO,\n            Path.CURVE3,\n            Path.LINETO,\n            Path.CURVE3,\n            Path.LINETO,\n            Path.CURVE3,\n        ]\n        \n        paper_path = Path(paper_verts, paper_codes)\n\n        # Add ruled lines on the paper\n        for i in range(1, 3):\n            y_pos = paper_y + (paper_height/3) * i\n\n        \n        # Add sample text in the current color\n        sample_text = \"Hello, World!\"\n        ax.text(\n            0, paper_y + paper_height/2,\n            sample_text,\n            color=state['color_hex'],\n            fontsize=24,\n            ha='center',\n            va='center',\n            fontweight='bold',\n            family='sans-serif',\n            zorder=4\n        )\n        \n        # Add indicators for the active parts\n        arrow_props = dict(\n            arrowstyle='-&gt;',\n            connectionstyle='arc3,rad=0.2',\n            linewidth=2,\n            color='#2c3e50',\n            shrinkA=5,\n            shrinkB=5\n        )\n                \n        return fig\n    \n    @render.text\n    def current_color():\n        # Return the current color name with custom styling\n        state = pen_state.get()\n        return f\"{state['color_name']}\"\n    \n    # Color change handlers\n    @reactive.Effect\n    @reactive.event(input.red_btn)\n    def change_to_red():\n        state = pen_state.get().copy()\n        state['color_name'] = 'Red'\n        state['color_hex'] = '#e74c3c'\n        pen_state.set(state)\n    \n    @reactive.Effect\n    @reactive.event(input.green_btn)\n    def change_to_green():\n        state = pen_state.get().copy()\n        state['color_name'] = 'Green'\n        state['color_hex'] = '#2ecc71'\n        pen_state.set(state)\n    \n    @reactive.Effect\n    @reactive.event(input.blue_btn)\n    def change_to_blue():\n        state = pen_state.get().copy()\n        state['color_name'] = 'Blue'\n        state['color_hex'] = '#3498db'\n        pen_state.set(state)\n    \n    # Rotation handler\n    @reactive.Effect\n    @reactive.event(input.rotate_btn)\n    def rotate_pen():\n        state = pen_state.get().copy()\n        \n        # Rotate by 45 degrees (π/4 radians)\n        state['rotation_angle'] = (state['rotation_angle'] + np.pi/4) % (2 * np.pi)\n        pen_state.set(state)\n\n# Create and run the app\napp = App(app_ui, server)\n#| standalone: true\n#| viewerHeight: 690\nimport math\nfrom shiny import App, ui, reactive, render\n\n# Define UI\napp_ui = ui.page_fluid(\n    ui.h2(\"TRIZ Universal Principle Demonstration\", style=\"text-align: center;\"),\n    ui.p(\"This shows a tool that can work as both a screwdriver and an electrical tester\", style=\"text-align: center;\"),\n    ui.div(\n        ui.input_action_button(\"screwdriver_btn\", \"Use as Screwdriver\", style=\"margin: 5px;\"),\n        ui.input_action_button(\"tester_btn\", \"Use as Electrical Tester\", style=\"margin: 5px;\"),\n        ui.input_action_button(\"reset_btn\", \"Reset\", style=\"margin: 5px;\"),\n        style=\"text-align: center; margin-bottom: 20px;\"\n    ),\n    ui.div(\n        ui.output_text(\"status_text\"),\n        style=\"text-align: center; font-weight: bold; margin: 10px; height: 30px;\"\n    ),\n    ui.div(\n        ui.output_ui(\"animation_display\"),\n        style=\"width: 600px; height: 300px; background-color: #f0f0f0; margin: 0 auto; position: relative; border: 1px solid #ccc;\"\n    )\n)\n\ndef server(input, output, session):\n    # Reactive values\n    frame = reactive.Value(0.0)           # Tracks the current animation frame\n    animation_running = reactive.Value(False)  # Controls whether animation is active\n    current_state = reactive.Value(\"idle\")     # Tracks the tool's state\n\n    # Status text\n    @output\n    @render.text\n    def status_text():\n        state = current_state.get()\n        current_frame = frame.get()\n        if state == \"idle\":\n            return \"Tool ready for use\"\n        elif state == \"screwdriver\":\n            if 5 &lt;= current_frame &lt; 15:\n                return \"Using as a screwdriver - Turning the screw slowly...\"\n            else:\n                return \"Using as a screwdriver\"\n        elif state == \"tester\":\n            if 5 &lt;= current_frame &lt; 15:\n                if int(current_frame) % 2 == 0:  # Flicker effect in text\n                    return \"Using as an electrical tester - Current detected! ⚡\"\n                else:\n                    return \"Using as an electrical tester - Testing circuit...\"\n            else:\n                return \"Using as an electrical tester\"\n\n    # Main animation display\n    @output\n    @render.ui\n    def animation_display():\n        current_frame = frame.get()\n        state = current_state.get()\n        \n        # Basic elements always shown\n        elements = []\n        \n        # Set horizontal position based on state - adjusted for proper contact\n        if state == \"screwdriver\":\n            tool_left = 152\n        elif state == \"tester\":\n            tool_left = 375  # Further adjusted to properly align with outlet\n        else:\n            tool_left = 150\n\n        # Initial vertical position; this will animate.\n        tool_top = 20  \n        # Light color - illuminate in tester mode by default\n        neon_color = \"#888888\"  # Default: off\n        if state == \"tester\":\n            neon_color = \"#FFFF00\"  # Always on in tester mode\n        \n        tool_rotate = \"rotate(0deg)\"\n        \n        if state == \"screwdriver\":\n            # Animate screw depth during rotation - more realistic with slight delay\n            screw_depth = 0\n            # Draw more realistic screw - positioned higher to be visible and reachable\n            elements.append(\n                ui.div(\n                    # Screw head\n                    ui.div(style=\"position: absolute; width: 20px; height: 6px; background-color: #444; top: 0; border-radius: 3px; box-shadow: 0 1px 2px rgba(0,0,0,0.3);\"),\n                    # Slot in screw head\n                    ui.div(style=\"position: absolute; width: 14px; height: 2px; background-color: #222; top: 2px; left: 3px;\"),\n                    # Screw shaft\n                    ui.div(style=f\"position: absolute; width: 8px; height: {20 + screw_depth}px; background-color: #666; top: 6px; left: 6px; background-image: linear-gradient(90deg, #555, #777); border-radius: 0 0 4px 4px;\"),\n                    style=f\"position: absolute; bottom: {80 + screw_depth}px; left: 157px; height: 26px; width: 20px;\"\n                )\n            )\n        \n        elif state == \"tester\":\n            # Normalize to 0-1 over 20 seconds (slower animation)\n            t = current_frame / 20\n            \n            # Make the light always on in tester mode, with flickering when touching\n            flicker_speed = current_frame * 5\n            flicker_intensity = abs(((flicker_speed % 10) - 5) / 5)\n            \n            \n            # Highly realistic electrical outlet with proper 3D effects and details\n            elements.append(\n                ui.div(\n                    # Main outlet plate with 3D effect\n                    ui.div(style=\"position: absolute; width: 70px; height: 120px; background: linear-gradient(135deg, #f5f5f5, #e0e0e0); border: 1px solid #bbb; border-radius: 8px; box-shadow: 2px 2px 5px rgba(0,0,0,0.2), inset 0 0 2px rgba(255,255,255,0.8); top: 5px; left: 5px;\"),\n      \n                    # Socket holes (top)\n                    ui.div(style=\"position: absolute; width: 8px; height: 22px; background-color: #111; top: 28px; left: 25px; border-radius: 2px; box-shadow: inset 0 0 2px rgba(0,0,0,0.8);\"),\n                    ui.div(style=\"position: absolute; width: 8px; height: 22px; background-color: #111; top: 28px; left: 47px; border-radius: 2px; box-shadow: inset 0 0 2px rgba(0,0,0,0.8);\"),\n                    \n                    # Socket holes (bottom)\n                    ui.div(style=\"position: absolute; width: 8px; height: 22px; background-color: #111; top: 78px; left: 25px; border-radius: 2px; box-shadow: inset 0 0 2px rgba(0,0,0,0.8);\"),\n                    ui.div(style=\"position: absolute; width: 8px; height: 22px; background-color: #111; top: 78px; left: 47px; border-radius: 2px; box-shadow: inset 0 0 2px rgba(0,0,0,0.8);\"),\n                    \n                    # Outlet manufacturer branding detail\n                    ui.div(style=\"position: absolute; width: 20px; height: 4px; background-color: rgba(0,0,0,0.1); top: 62px; left: 30px; border-radius: 1px;\"),\n                    \n                    style=\"position: absolute; bottom: 150px; left: 361px;\"\n                )\n            )\n        \n        # Draw the tool (common for both modes, but with more detail)\n        elements.append(\n            ui.div(\n                # Handle\n                ui.div(\n                    # Main handle body\n                    ui.div(style=\"position: absolute; width: 30px; height: 70px; background-color: #d32f2f; border-radius: 5px; background-image: linear-gradient(to right, #c62828, #d32f2f, #c62828);\"),\n                    # Handle grip texture\n                    ui.div(style=\"position: absolute; width: 24px; height: 50px; border-left: 2px dotted rgba(0,0,0,0.2); border-right: 2px dotted rgba(0,0,0,0.2); top: 10px; left: 3px;\"),\n                    # Handle top cap\n                    #ui.div(style=\"position: absolute; width: 30px; height: 5px; background-color: #b71c1c; top: 0; border-radius: 5px 5px 0 0;\"),\n                    # Handle bottom transition\n                    #ui.div(style=\"position: absolute; width: 30px; height: 5px; background-color: #b71c1c; bottom: 0; border-radius: 0 0 5px 5px;\"),\n                    #style=\"position: absolute; width: 30px; height: 70px;\"\n                ),\n                # Neon light with animated glow\n                ui.div(\n                    # Bulb\n                    ui.div(style=f\"width: 20px; height: 20px; background-color: {neon_color}; border-radius: 50%; box-shadow: 0 0 5px {neon_color};\"),\n                    # Light housing\n                    ui.div(style=\"position: absolute; width: 22px; height: 22px; border: 1px solid #999; border-radius: 50%; top: -1px; left: -1px; background-color: rgba(255,255,255,0.2);\"),\n                    style=f\"position: absolute; top: 25px; left: 5px; filter: drop-shadow(0 0 8px {neon_color});\"\n                ),\n                # Shaft with metal texture\n                ui.div(\n                    # Main shaft\n                    ui.div(style=\"position: absolute; width: 6px; height: 100px; background-color: silver; left: 0; background-image: linear-gradient(to right, #a0a0a0, #e0e0e0, #a0a0a0);\"),\n                    # Highlight reflection on shaft\n                    ui.div(style=\"position: absolute; width: 2px; height: 100px; background-color: rgba(255,255,255,0.5); left: 2px;\"),\n                    style=\"position: absolute; width: 6px; height: 100px; top: 70px; left: 12px;\"\n                ),\n                # Tip with more detailed styling\n                ui.div(\n                    # Flat tip\n                    ui.div(style=\"position: absolute; width: 10px; height: 5px; background-color: #444; top: 90; left: 90; border-radius: 9px; background-image: linear-gradient(to bottom, #666, #333);\"),\n                    # Tip edge highlight\n                    ui.div(style=\"position: absolute; width: 8px; height: 1px; background-color: rgba(255,255,255,0.3); top: 9.5px; left: 9px;\"),\n                    style=\"position: absolute; width: 90px; height: 9px; top: 166px; left: 10px;\"\n                ),\n                style=f\"position: absolute; left: {tool_left}px; top: {tool_top}px; transform: {tool_rotate}; transition: top 0.1s ease, transform 0.1s ease;\"\n            )\n        )\n        \n\n        \n        return ui.div(*elements)\n\n    # Handler for screwdriver button\n    @reactive.Effect\n    @reactive.event(input.screwdriver_btn)\n    def handle_screwdriver():\n        current_state.set(\"screwdriver\")\n        frame.set(0.0)\n        animation_running.set(True)\n\n    # Handler for tester button\n    @reactive.Effect\n    @reactive.event(input.tester_btn)\n    def handle_tester():\n        current_state.set(\"tester\")\n        frame.set(0.0)\n        animation_running.set(True)\n\n    # Handler for reset button\n    @reactive.Effect\n    @reactive.event(input.reset_btn)\n    def handle_reset():\n        current_state.set(\"idle\")\n        animation_running.set(False)\n        frame.set(0.0)\n\n# Create app\napp = App(app_ui, server)"
  },
  {
    "objectID": "9w.html",
    "href": "9w.html",
    "title": "Shinylive in Quarto example",
    "section": "",
    "text": "Editor with app\nIf you want to display an editor panel with along with the running application, use #| components: [editor, viewer]. Users will be able to use the editor to modify the code and re-run the application.\n#| standalone: true\n#| viewerHeight: 1900\nfrom shiny import App, ui, render, reactive\nfrom datetime import datetime\n\napp_ui = ui.page_fluid(\n    ui.tags.style(\"\"\"\n        .card { \n            margin: 0;\n            border: 1px solid #ddd;\n            border-radius: 0;\n            height: 100%;\n        }\n        .card-header { \n            background-color: #f8f9fa; \n            padding: 8px;\n            font-weight: bold;\n            border-radius: 0;\n            text-align: center;\n        }\n        .card-body {\n            padding: 10px;\n            height: calc(100% - 40px);\n        }\n        body { \n            font-family: Arial, sans-serif;\n            padding: 20px;\n            max-width: 1400px;\n            margin: 0 auto;\n        }\n        .title-area { \n            margin-bottom: 30px;\n            text-align: center;\n        }\n        .grid-container {\n            display: grid;\n            grid-template-columns: 150px 1fr 1fr 1fr;\n            grid-template-rows: auto auto auto auto;\n            gap: 0;\n            width: 100%;\n        }\n        .grid-header {\n            grid-column: span 1;\n            text-align: center;\n            padding: 10px;\n            font-weight: bold;\n        }\n        .grid-row-header {\n            display: flex;\n            align-items: center;\n            justify-content: flex-end;\n            padding-right: 10px;\n            height: 100%;\n        }\n        .grid-cell {\n            min-height: 220px;\n            padding: 0;\n            border: 1px solid #ddd;\n        }\n        /* For HTML2Canvas capturing */\n        #capture-area {\n            background-color: white;\n            padding: 20px;\n            border: 1px solid #eee;\n        }\n    \"\"\"),\n    \n    # Add HTML2Canvas JavaScript library\n    ui.tags.script(src=\"https://html2canvas.hertzen.com/dist/html2canvas.min.js\"),\n    \n    ui.div(\n        ui.h1(\"Think in space and time.\", class_=\"mb-2\"),\n        ui.p(\"Analyze a system and predict future development.\", class_=\"text-muted mb-4\"),\n        class_=\"title-area\"\n    ),\n    \n    # Capture area div to wrap the grid\n    ui.div(\n        ui.div(\n            # Grid Headers\n            ui.div(class_=\"grid-header\"),  # Empty corner cell\n            ui.div(ui.h4(\"Past\"), class_=\"grid-header\"),\n            ui.div(ui.h4(\"Present\"), class_=\"grid-header\"),\n            ui.div(ui.h4(\"Future\"), class_=\"grid-header\"),\n            \n            # Super System Row\n            ui.div(ui.h4(\"Super System\", class_=\"grid-row-header\")),\n            ui.div(ui.input_text_area(\"past_super\", \"\", width=\"100%\", height=\"220px\"), class_=\"grid-cell\"),\n            ui.div(ui.input_text_area(\"present_super\", \"\", width=\"100%\", height=\"220px\"), class_=\"grid-cell\"),\n            ui.div(ui.input_text_area(\"future_super\", \"\", width=\"100%\", height=\"220px\"), class_=\"grid-cell\"),\n            \n            # System Row\n            ui.div(ui.h4(\"System\", class_=\"grid-row-header\")),\n            ui.div(ui.input_text_area(\"past_system\", \"\", width=\"100%\", height=\"220px\"), class_=\"grid-cell\"),\n            ui.div(ui.input_text_area(\"present_system\", \"\", width=\"100%\", height=\"220px\"), class_=\"grid-cell\"),\n            ui.div(ui.input_text_area(\"future_system\", \"\", width=\"100%\", height=\"220px\"), class_=\"grid-cell\"),\n            \n            # Subsystem Row\n            ui.div(ui.h4(\"Subsystem\", class_=\"grid-row-header\")),\n            ui.div(ui.input_text_area(\"past_subsystem\", \"\", width=\"100%\", height=\"220px\"), class_=\"grid-cell\"),\n            ui.div(ui.input_text_area(\"present_subsystem\", \"\", width=\"100%\", height=\"220px\"), class_=\"grid-cell\"),\n            ui.div(ui.input_text_area(\"future_subsystem\", \"\", width=\"100%\", height=\"220px\"), class_=\"grid-cell\"),\n            \n            class_=\"grid-container\"\n        ),\n        id=\"capture-area\",\n        class_=\"mb-4\"\n    ),\n    \n    ui.div(\n        ui.input_action_button(\"save_btn\", \"Save Analysis\", class_=\"btn-primary me-2\"),\n        ui.input_action_button(\"export_png_btn\", \"Export as PNG\", class_=\"btn-success me-2\"),\n        ui.input_action_button(\"clear_btn\", \"Clear All\", class_=\"btn-outline-secondary\"),\n        class_=\"d-flex justify-content-center mt-4\"\n    ),\n    \n    # Container for PNG download link\n    ui.div(id=\"download-container\", class_=\"text-center mt-3\"),\n    \n    # JavaScript to handle PNG export\n    ui.tags.script(\"\"\"\n    $(document).ready(function() {\n        $(\"#export_png_btn\").click(function() {\n            // Clear any existing download link\n            $(\"#download-container\").empty();\n            \n            // Show loading message\n            $(\"#download-container\").html('&lt;p&gt;Generating PNG...&lt;/p&gt;');\n            \n            // Create a temporary div to build our table representation\n            var tempDiv = document.createElement('div');\n            tempDiv.id = 'export-container';\n            tempDiv.style.backgroundColor = 'white';\n            tempDiv.style.padding = '30px';\n            tempDiv.style.border = '1px solid #eee';\n            tempDiv.style.width = '1000px';\n            tempDiv.style.position = 'absolute';\n            tempDiv.style.left = '-9999px';\n            tempDiv.style.top = '-9999px';\n            document.body.appendChild(tempDiv);\n            \n            // Create a proper HTML table for export\n            var table = document.createElement('table');\n            table.style.width = '100%';\n            table.style.borderCollapse = 'collapse';\n            table.style.border = '1px solid #ddd';\n            table.style.tableLayout = 'fixed';\n            \n            // Create header row\n            var headerRow = document.createElement('tr');\n            \n            // Empty cell for the top-left corner\n            var emptyTh = document.createElement('th');\n            emptyTh.style.width = '150px';\n            emptyTh.style.padding = '10px';\n            emptyTh.style.textAlign = 'right';\n            emptyTh.style.fontWeight = 'bold';\n            headerRow.appendChild(emptyTh);\n            \n            // Headers for Past, Present, Future\n            var headers = ['Past', 'Present', 'Future'];\n            headers.forEach(function(header) {\n                var th = document.createElement('th');\n                th.textContent = header;\n                th.style.padding = '10px';\n                th.style.textAlign = 'center';\n                th.style.fontWeight = 'bold';\n                th.style.border = '1px solid #ddd';\n                headerRow.appendChild(th);\n            });\n            \n            table.appendChild(headerRow);\n            \n            // Create rows for Super System, System, Subsystem\n            var rowLabels = ['Super System', 'System', 'Subsystem'];\n            var rowIds = [\n                ['past_super', 'present_super', 'future_super'],\n                ['past_system', 'present_system', 'future_system'],\n                ['past_subsystem', 'present_subsystem', 'future_subsystem']\n            ];\n            \n            rowLabels.forEach(function(label, index) {\n                var tr = document.createElement('tr');\n                \n                // Row label\n                var th = document.createElement('th');\n                th.textContent = label;\n                th.style.padding = '10px';\n                th.style.textAlign = 'right';\n                th.style.fontWeight = 'bold';\n                th.style.height = '220px';\n                th.style.verticalAlign = 'top';\n                tr.appendChild(th);\n                \n                // Cells for each column\n                rowIds[index].forEach(function(id) {\n                    var td = document.createElement('td');\n                    td.style.border = '1px solid #ddd';\n                    td.style.padding = '10px';\n                    td.style.verticalAlign = 'top';\n                    td.style.height = '220px';\n                    td.style.width = '250px'; // Fixed width\n                    td.style.wordWrap = 'break-word'; // Enable word wrapping\n                    td.style.whiteSpace = 'pre-wrap'; // Preserve line breaks and wrap text\n                    td.style.overflowWrap = 'break-word'; // Break words to prevent overflow\n                    \n                    // Get the text content and preserve formatting\n                    var content = $('#' + id).val() || '';\n                    td.textContent = content; // This preserves line breaks with pre-wrap\n                    \n                    tr.appendChild(td);\n                });\n                \n                table.appendChild(tr);\n            });\n            \n            tempDiv.appendChild(table);\n            \n            // Use html2canvas with improved options to capture the table\n            html2canvas(tempDiv, {\n                scale: 2, // Higher scale for better quality\n                useCORS: true,\n                backgroundColor: \"#ffffff\",\n                logging: false,\n                height: tempDiv.offsetHeight,\n                width: tempDiv.offsetWidth\n            }).then(function(canvas) {\n                // Convert canvas to data URL\n                var dataURL = canvas.toDataURL(\"image/png\");\n                \n                // Generate timestamp for filename\n                var timestamp = new Date().toISOString().replace(/[:.]/g, \"-\");\n                \n                // Create download link\n                var downloadLink = document.createElement(\"a\");\n                downloadLink.href = dataURL;\n                downloadLink.download = \"system_analysis_\" + timestamp + \".png\";\n                downloadLink.innerHTML = \"Download PNG\";\n                downloadLink.className = \"btn btn-primary\";\n                \n                // Clear loading message and add the download link\n                $(\"#download-container\").empty();\n                $(\"#download-container\").append(downloadLink);\n                \n                // Clean up the temporary div\n                document.body.removeChild(tempDiv);\n            });\n        });\n    });\n    \"\"\"),\n    \n    ui.h3(\"Saved Analyses\", class_=\"mt-5\"),\n    ui.output_ui(\"saved_analyses\"),\n)\n\ndef server(input, output, session):\n    saved_data = []\n    \n    @render.ui\n    def saved_analyses():\n        if not saved_data:\n            return ui.p(\"No saved analyses yet.\", class_=\"text-muted\")\n        \n        cards = []\n        for i, data in enumerate(saved_data):\n            cards.append(\n                ui.card(\n                    ui.card_header(f\"Analysis #{i+1}\"),\n                    ui.card_body(\n                        ui.p(f\"Created on: {data['timestamp']}\"),\n                        ui.input_action_button(f\"view_{i}\", \"View\", class_=\"btn-sm btn-outline-primary\"),\n                        ui.input_action_button(f\"load_{i}\", \"Load\", class_=\"btn-sm btn-outline-secondary ms-2\")\n                    )\n                )\n            )\n        return ui.div(*cards, class_=\"d-flex flex-wrap gap-3\")\n    \n    @reactive.Effect\n    def _():\n        if input.save_btn():\n            # Add code to save the current state\n            index = len(saved_data)\n            saved_data.append({\n                \"timestamp\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"),\n                \"data\": {\n                    \"past_super\": input.past_super(),\n                    \"present_super\": input.present_super(),\n                    \"future_super\": input.future_super(),\n                    \"past_system\": input.past_system(),\n                    \"present_system\": input.present_system(),\n                    \"future_system\": input.future_system(),\n                    \"past_subsystem\": input.past_subsystem(),\n                    \"present_subsystem\": input.present_subsystem(),\n                    \"future_subsystem\": input.future_subsystem(),\n                }\n            })\n            \n            # Create a new load handler for this saved analysis\n            load_handlers[index] = create_load_handler(index)\n    \n    @reactive.Effect\n    def _():\n        if input.clear_btn():\n            ui.update_text_area(\"past_super\", value=\"\")\n            ui.update_text_area(\"present_super\", value=\"\")\n            ui.update_text_area(\"future_super\", value=\"\")\n            ui.update_text_area(\"past_system\", value=\"\")\n            ui.update_text_area(\"present_system\", value=\"\")\n            ui.update_text_area(\"future_system\", value=\"\")\n            ui.update_text_area(\"past_subsystem\", value=\"\")\n            ui.update_text_area(\"present_subsystem\", value=\"\")\n            ui.update_text_area(\"future_subsystem\", value=\"\")\n    \n    # Function to create load handlers for each saved analysis\n    def create_load_handler(index):\n        @reactive.Effect\n        def _():\n            # Check if the button with ID f\"load_{index}\" was clicked\n            if input[f\"load_{index}\"]:\n                data = saved_data[index][\"data\"]\n                \n                ui.update_text_area(\"past_super\", value=data[\"past_super\"])\n                ui.update_text_area(\"present_super\", value=data[\"present_super\"])\n                ui.update_text_area(\"future_super\", value=data[\"future_super\"])\n                ui.update_text_area(\"past_system\", value=data[\"past_system\"])\n                ui.update_text_area(\"present_system\", value=data[\"present_system\"])\n                ui.update_text_area(\"future_system\", value=data[\"future_system\"])\n                ui.update_text_area(\"past_subsystem\", value=data[\"past_subsystem\"])\n                ui.update_text_area(\"present_subsystem\", value=data[\"present_subsystem\"])\n                ui.update_text_area(\"future_subsystem\", value=data[\"future_subsystem\"])\n        return _\n    \n    # Dictionary to store the handlers\n    load_handlers = {}\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "5whys.html",
    "href": "5whys.html",
    "title": "Shinylive in Quarto example",
    "section": "",
    "text": "Editor with app\nIf you want to display an editor panel with along with the running application, use #| components: [editor, viewer]. Users will be able to use the editor to modify the code and re-run the application.\n#| standalone: true\n#| viewerHeight: 2000\nfrom shiny import App, ui, render, reactive\nfrom datetime import datetime\n\n# Define the UI\napp_ui = ui.page_fluid(\n    # Add HTML2Canvas JavaScript library\n    ui.tags.script(src=\"https://html2canvas.hertzen.com/dist/html2canvas.min.js\"),\n    \n    ui.tags.head(\n        ui.tags.meta(name=\"viewport\", content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\"),\n        ui.tags.style(\"\"\"\n            body {\n                font-family: Arial, sans-serif;\n                background-color: #f9f9f9;\n                padding: 10px;\n                margin: 0;\n                box-sizing: border-box;\n            }\n            * {\n                box-sizing: border-box;\n            }\n            .title-box {\n                background-color: white;\n                padding: 10px;\n                margin-bottom: 15px;\n                border-radius: 5px;\n                box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n            }\n            .main-container {\n                background-color: #f0f0f0;\n                padding: 15px;\n                border-radius: 5px;\n                box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n                overflow-x: hidden;\n                width: 100%;\n                margin: 0 auto;\n            }\n            .why-box {\n                margin-bottom: 15px;\n                width: 100%;\n            }\n            .buttons-container {\n                text-align: center;\n                margin: 15px 0;\n                display: flex;\n                flex-wrap: wrap;\n                justify-content: center;\n                gap: 10px;\n            }\n            .btn-custom {\n                margin: 5px;\n                padding: 8px 16px;\n                min-height: 44px;\n                font-size: 16px;\n                touch-action: manipulation;\n            }\n            .btn-group {\n                display: inline-flex;\n                align-items: center;\n                margin: 5px;\n            }\n            #capture-area {\n                background-color: white;\n                padding: 15px;\n                border: 1px solid #ddd;\n                border-radius: 8px;\n                margin-bottom: 15px;\n                box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n                overflow-x: auto;\n            }\n            .title-container {\n                text-align: center;\n                margin-bottom: 20px;\n                border-bottom: 2px solid #f0f0f0;\n                padding-bottom: 10px;\n            }\n            .analysis-header {\n                font-size: 22px;\n                font-weight: bold;\n                color: #333;\n                margin-bottom: 5px;\n            }\n            .analysis-subtitle {\n                font-size: 16px;\n                color: #666;\n            }\n            /* Custom diagram styles */\n            .diagram-container {\n                margin-top: 20px;\n                padding: 10px;\n                overflow-x: auto;\n            }\n            .diagram-box {\n                width: 100%;\n                max-width: 800px;\n                margin: 0 auto;\n                text-align: center;\n                min-width: 280px;\n            }\n            .cause-box {\n                border: 2px solid #3a87ad;\n                background-color: #f0f8ff;\n                padding: 15px;\n                margin-bottom: 40px;\n                border-radius: 5px;\n                position: relative;\n                font-size: 16px;\n                min-height: 20px;\n                word-wrap: break-word;\n                white-space: pre-wrap;\n            }\n            .problem-box {\n                border: 2px solid #2c3e50;\n                background-color: #ecf0f1;\n            }\n            .arrow-down {\n                position: absolute;\n                bottom: -30px;\n                left: 50%;\n                transform: translateX(-50%);\n                width: 0;\n                height: 0;\n                border-left: 10px solid transparent;\n                border-right: 10px solid transparent;\n                border-top: 10px solid #3a87ad;\n            }\n            .why-spacer {\n                height: 30px;\n                position: relative;\n                margin-bottom: 10px;\n            }\n            .why-text {\n                font-size: 16px;\n                color: #d9534f;\n                font-weight: bold;\n                text-align: center;\n                padding: 5px;\n                background-color: #ffe6e6;\n                border-radius: 15px;\n                border: 1px solid #d9534f;\n                width: 80px;\n                margin: 0 auto;\n            }\n            .last-box {\n                margin-bottom: 10px;\n            }\n            .download-btn {\n                display: inline-block;\n                margin-left: 10px;\n                vertical-align: middle;\n                min-height: 44px;\n                padding: 8px 16px;\n            }\n            .generating-text {\n                display: inline-block;\n                margin-left: 10px;\n                color: #666;\n                font-style: italic;\n            }\n            /* Make inputs more touch-friendly */\n            input[type=\"text\"], textarea.form-control {\n                min-height: 44px;\n                font-size: 16px;\n                padding: 12px;\n                width: 100%;\n                border: 1px solid #ccc;\n                border-radius: 4px;\n            }\n            \n            /* Textarea styling for multi-line input */\n            textarea.form-control {\n                min-height: 100px;\n                resize: vertical;\n                line-height: 1.5;\n                display: block;\n                width: 100%;\n                box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n            }\n            /* Responsive styles */\n            @media (max-width: 768px) {\n                .title-box {\n                    padding: 8px;\n                }\n                .main-container {\n                    padding: 10px;\n                }\n                #capture-area {\n                    padding: 10px;\n                }\n                .btn-custom {\n                    width: 100%;\n                    margin: 3px 0;\n                }\n                .btn-group {\n                    width: 100%;\n                    display: flex;\n                    flex-direction: column;\n                }\n                .download-btn {\n                    margin-top: 8px;\n                    margin-left: 0;\n                    width: 100%;\n                }\n                .generating-text {\n                    display: block;\n                    margin-top: 8px;\n                    margin-left: 0;\n                    text-align: center;\n                }\n                .diagram-container {\n                    padding: 5px;\n                }\n                .cause-box {\n                    padding: 10px;\n                }\n            }\n        \"\"\")\n    ),\n    ui.div(\n        {\"class\": \"main-container\"},\n        # Input fields (outside capture area)\n        ui.div(\n            ui.div(\n                {\"class\": \"title-container\"},\n                ui.h2(\"5 WHYS Analysis\", class_=\"analysis-header\"),\n                ui.p(\"Root Cause Analysis Tool\", class_=\"analysis-subtitle\"),\n            ),\n            ui.div(\n                {\"id\": \"whys-container\", \"style\": \"width: 100%;\"},\n                ui.div(\n                    {\"style\": \"width: 100%; margin-bottom: 20px;\"},\n                    ui.input_text_area(\"problem\", \"Problem Statement\", placeholder=\"Define the initial problem here\", height=\"100px\", resize=\"vertical\"),\n                ),\n                ui.output_ui(\"why_inputs\"),\n            ),\n        ),\n        \n        # Buttons - with the download link container next to export button\n        ui.div(\n            {\"class\": \"buttons-container\"},\n            ui.input_action_button(\"add_why\", \"Add Why\", class_=\"btn-custom\"),\n            ui.input_action_button(\"reset\", \"Reset\", class_=\"btn-custom\"),\n            ui.div(\n                {\"class\": \"btn-group\"},\n                ui.input_action_button(\"export_png\", \"Export as PNG\", class_=\"btn-custom btn-success\"),\n                ui.span(id=\"download-container\", class_=\"\")\n            )\n        ),\n        \n        # Capture area (only includes diagram for PNG export)\n        ui.div(\n            {\"id\": \"capture-area\"},\n            ui.div(\n                {\"class\": \"title-container\"},\n                ui.h2(\"5 WHYS Analysis\", class_=\"analysis-header\"),\n                ui.p(\"Root Cause Analysis Tool\", class_=\"analysis-subtitle\"),\n            ),\n            ui.div(\n                {\"class\": \"diagram-container\"},\n                ui.h4(\"Causes Chain\"),\n                ui.output_ui(\"why_diagram\")\n            )\n        )\n    ),\n    \n    # JavaScript to handle PNG export and fix focus issues\n    ui.tags.script(\"\"\"\n    $(document).ready(function() {\n        // Store cursor positions\n        var lastFocusedId = '';\n        var cursorPositions = {};\n        \n        // Fix cursor position issues in all textareas\n        function setupTextareas() {\n            $('textarea').each(function() {\n                $(this).off('input.cursorFix').on('input.cursorFix', function() {\n                    var id = $(this).attr('id');\n                    var pos = this.selectionStart;\n                    cursorPositions[id] = pos;\n                    lastFocusedId = id;\n                });\n                \n                $(this).off('focus.cursorFix').on('focus.cursorFix', function() {\n                    lastFocusedId = $(this).attr('id');\n                });\n            });\n        }\n        \n        // Run initially\n        setupTextareas();\n        \n        // Run every time new content is added to the page\n        $(document).on('shiny:value', function() {\n            setTimeout(function() {\n                setupTextareas();\n                \n                if (lastFocusedId) {\n                    var el = document.getElementById(lastFocusedId);\n                    if (el) {\n                        el.focus();\n                        if (cursorPositions[lastFocusedId] !== undefined) {\n                            try {\n                                el.setSelectionRange(cursorPositions[lastFocusedId], cursorPositions[lastFocusedId]);\n                            } catch(e) {\n                                console.log(\"Cursor position error:\", e);\n                            }\n                        }\n                    }\n                }\n            }, 50);\n        });\n        \n        // Function to check if device is mobile\n        function isMobile() {\n            return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth &lt; 768;\n        }\n        \n        // Handle PNG export\n        $(\"#export_png\").click(function() {\n            // Clear any existing download link\n            $(\"#download-container\").empty();\n            \n            // Show loading message\n            $(\"#download-container\").html('&lt;span class=\"generating-text\"&gt;Generating...&lt;/span&gt;');\n            \n            // Adjust scale based on device\n            var scaleValue = isMobile() ? 2 : 3;\n            \n            // Use html2canvas to capture the area\n            html2canvas(document.getElementById(\"capture-area\"), {\n                scale: scaleValue,\n                useCORS: true,\n                backgroundColor: \"#ffffff\",\n                logging: false,\n                allowTaint: true\n            }).then(function(canvas) {\n                // Convert canvas to data URL\n                var dataURL = canvas.toDataURL(\"image/png\");\n                \n                // Generate timestamp for filename\n                var timestamp = new Date().toISOString().replace(/[:.]/g, \"-\");\n                var filename = \"5whys_analysis_\" + timestamp + \".png\";\n                \n                // Create download link\n                var downloadLink = document.createElement(\"a\");\n                downloadLink.href = dataURL;\n                downloadLink.download = filename;\n                downloadLink.innerHTML = \"Download PNG\";\n                downloadLink.className = \"btn btn-primary download-btn\";\n                \n                // Clear loading message and add the download link\n                $(\"#download-container\").empty();\n                $(\"#download-container\").append(downloadLink);\n                \n                // For mobile, trigger download automatically\n                if (isMobile()) {\n                    setTimeout(function() {\n                        downloadLink.click();\n                    }, 100);\n                }\n            }).catch(function(error) {\n                // Handle errors\n                $(\"#download-container\").empty();\n                $(\"#download-container\").html('&lt;span class=\"generating-text\"&gt;Error generating image. Try again.&lt;/span&gt;');\n                console.error(\"Error generating PNG:\", error);\n            });\n        });\n    });\n    \"\"\")\n)\n\n# Define server logic\ndef server(input, output, session):\n    # Track the number of \"why\" questions and store the values\n    why_count = reactive.Value(1)\n    why_values = reactive.Value({\n        \"why1\": \"\", \"why2\": \"\", \"why3\": \"\", \"why4\": \"\", \"why5\": \"\"\n    })\n    \n    # Function to safely get input value\n    def get_input_value(input_id, default=\"\"):\n        try:\n            value = getattr(input, input_id)()\n            return value if value is not None else default\n        except:\n            return default\n    \n    @reactive.Effect\n    @reactive.event(input.add_why)\n    def _():\n        if why_count.get() &lt; 5:\n            # Store current values before adding new input\n            current_values = why_values.get()\n            for i in range(1, why_count.get() + 1):\n                input_id = f\"why{i}\"\n                try:\n                    current_values[input_id] = getattr(input, input_id)()\n                except:\n                    pass\n            why_values.set(current_values)\n            \n            # Increment counter\n            why_count.set(why_count.get() + 1)\n    \n    @reactive.Effect\n    @reactive.event(input.reset)\n    def _():\n        why_count.set(1)\n        why_values.set({\n            \"why1\": \"\", \"why2\": \"\", \"why3\": \"\", \"why4\": \"\", \"why5\": \"\"\n        })\n        ui.update_text_area(\"problem\", value=\"\")\n        for i in range(1, 6):\n            try:\n                ui.update_text_area(f\"why{i}\", value=\"\")\n            except:\n                pass\n    \n    @output\n    @render.ui\n    def why_inputs():\n        inputs = []\n        stored_values = why_values.get()\n        \n        for i in range(1, why_count.get() + 1):\n            input_id = f\"why{i}\"\n            \n            # Get current value safely\n            current_value = get_input_value(input_id, stored_values.get(input_id, \"\"))\n                \n            # Store value\n            if current_value:\n                stored_values[input_id] = current_value\n            \n            # Create identical structure to problem statement\n            inputs.append(\n                ui.div(\n                    {\"style\": \"width: 100%; margin-bottom: 15px;\"},\n                    ui.p(f\"Why? ({i})\", class_=\"text-center\"),\n                    ui.input_text_area(\n                        input_id, \n                        \"\", \n                        value=current_value,\n                        placeholder=f\"Why did this happen? (Cause {i})\",\n                        height=\"100px\",\n                        resize=\"vertical\"\n                    )\n                )\n            )\n        \n        why_values.set(stored_values)\n        return ui.div({\"style\": \"width: 100%;\"}, *inputs)\n    \n    @output\n    @render.ui\n    def why_diagram():\n        # Create a list of entries for the diagram\n        entries = []\n        \n        # First entry is the problem statement\n        problem_text = input.problem() or \"Problem Statement\"\n        entries.append(problem_text)\n        \n        # Add each \"why\" entry\n        for i in range(1, why_count.get() + 1):\n            try:\n                why_text = getattr(input, f\"why{i}\")()\n                if why_text:\n                    entries.append(why_text)\n                else:\n                    entries.append(f\"Cause {i}\")\n            except:\n                entries.append(f\"Cause {i}\")\n        \n        # Create the diagram HTML\n        elements = []\n        for i, text in enumerate(entries):\n            is_last = i == len(entries) - 1\n            is_problem = i == 0\n            \n            # Create box with appropriate classes\n            box_classes = \"cause-box\"\n            if is_problem:\n                box_classes += \" problem-box\"\n            if is_last:\n                box_classes += \" last-box\"\n            \n            box = ui.div(\n                {\"class\": box_classes},\n                text\n            )\n            \n            elements.append(box)\n            \n            # Add \"Why?\" between boxes\n            if not is_last:\n                elements.append(\n                    ui.div(\n                        {\"class\": \"why-spacer\"},\n                        ui.div({\"class\": \"arrow-down\"}),\n                        ui.div({\"class\": \"why-text\"}, \"Why?\")\n                    )\n                )\n        \n        # Wrap all elements in a container\n        return ui.div(\n            {\"class\": \"diagram-box\"},\n            *elements\n        )\n\n# Create the Shiny app\napp = App(app_ui, server)"
  }
]