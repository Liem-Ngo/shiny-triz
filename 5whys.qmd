---
title: Shinylive in Quarto example
format: html
filters:
  - shinylive
---

### Editor with app

If you want to display an editor panel with along with the running application, use `#| components: [editor, viewer]`. Users will be able to use the editor to modify the code and re-run the application.

```{shinylive-python}
#| standalone: true
#| viewerHeight: 2000
from shiny import App, ui, render, reactive
from datetime import datetime

# Define the UI
app_ui = ui.page_fluid(
    # Add HTML2Canvas JavaScript library
    ui.tags.script(src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"),
    
    ui.tags.head(
        ui.tags.meta(name="viewport", content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"),
        ui.tags.style("""
            body {
                font-family: Arial, sans-serif;
                background-color: #f9f9f9;
                padding: 10px;
                margin: 0;
                box-sizing: border-box;
            }
            * {
                box-sizing: border-box;
            }
            .title-box {
                background-color: white;
                padding: 10px;
                margin-bottom: 15px;
                border-radius: 5px;
                box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            }
            .main-container {
                background-color: #f0f0f0;
                padding: 15px;
                border-radius: 5px;
                box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                overflow-x: hidden;
                width: 100%;
                margin: 0 auto;
            }
            .why-box {
                margin-bottom: 15px;
                width: 100%;
            }
            .buttons-container {
                text-align: center;
                margin: 15px 0;
                display: flex;
                flex-wrap: wrap;
                justify-content: center;
                gap: 10px;
            }
            .btn-custom {
                margin: 5px;
                padding: 8px 16px;
                min-height: 44px;
                font-size: 16px;
                touch-action: manipulation;
            }
            .btn-group {
                display: inline-flex;
                align-items: center;
                margin: 5px;
            }
            #capture-area {
                background-color: white;
                padding: 15px;
                border: 1px solid #ddd;
                border-radius: 8px;
                margin-bottom: 15px;
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                overflow-x: auto;
            }
            .title-container {
                text-align: center;
                margin-bottom: 20px;
                border-bottom: 2px solid #f0f0f0;
                padding-bottom: 10px;
            }
            .analysis-header {
                font-size: 22px;
                font-weight: bold;
                color: #333;
                margin-bottom: 5px;
            }
            .analysis-subtitle {
                font-size: 16px;
                color: #666;
            }
            /* Custom diagram styles */
            .diagram-container {
                margin-top: 20px;
                padding: 10px;
                overflow-x: auto;
            }
            .diagram-box {
                width: 100%;
                max-width: 800px;
                margin: 0 auto;
                text-align: center;
                min-width: 280px;
            }
            .cause-box {
                border: 2px solid #3a87ad;
                background-color: #f0f8ff;
                padding: 15px;
                margin-bottom: 40px;
                border-radius: 5px;
                position: relative;
                font-size: 16px;
                min-height: 20px;
                word-wrap: break-word;
                white-space: pre-wrap;
            }
            .problem-box {
                border: 2px solid #2c3e50;
                background-color: #ecf0f1;
            }
            .arrow-down {
                position: absolute;
                bottom: -30px;
                left: 50%;
                transform: translateX(-50%);
                width: 0;
                height: 0;
                border-left: 10px solid transparent;
                border-right: 10px solid transparent;
                border-top: 10px solid #3a87ad;
            }
            .why-spacer {
                height: 30px;
                position: relative;
                margin-bottom: 10px;
            }
            .why-text {
                font-size: 16px;
                color: #d9534f;
                font-weight: bold;
                text-align: center;
                padding: 5px;
                background-color: #ffe6e6;
                border-radius: 15px;
                border: 1px solid #d9534f;
                width: 80px;
                margin: 0 auto;
            }
            .last-box {
                margin-bottom: 10px;
            }
            .download-btn {
                display: inline-block;
                margin-left: 10px;
                vertical-align: middle;
                min-height: 44px;
                padding: 8px 16px;
            }
            .generating-text {
                display: inline-block;
                margin-left: 10px;
                color: #666;
                font-style: italic;
            }
            /* Make inputs more touch-friendly */
            input[type="text"], textarea.form-control {
                min-height: 44px;
                font-size: 16px;
                padding: 12px;
                width: 100%;
                border: 1px solid #ccc;
                border-radius: 4px;
            }
            
            /* Textarea styling for multi-line input */
            textarea.form-control {
                min-height: 100px;
                resize: vertical;
                line-height: 1.5;
                display: block;
                width: 100%;
                box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            }
            /* Responsive styles */
            @media (max-width: 768px) {
                .title-box {
                    padding: 8px;
                }
                .main-container {
                    padding: 10px;
                }
                #capture-area {
                    padding: 10px;
                }
                .btn-custom {
                    width: 100%;
                    margin: 3px 0;
                }
                .btn-group {
                    width: 100%;
                    display: flex;
                    flex-direction: column;
                }
                .download-btn {
                    margin-top: 8px;
                    margin-left: 0;
                    width: 100%;
                }
                .generating-text {
                    display: block;
                    margin-top: 8px;
                    margin-left: 0;
                    text-align: center;
                }
                .diagram-container {
                    padding: 5px;
                }
                .cause-box {
                    padding: 10px;
                }
            }
        """)
    ),
    ui.div(
        {"class": "main-container"},
        # Input fields (outside capture area)
        ui.div(
            ui.div(
                {"class": "title-container"},
                ui.h2("5 WHYS Analysis", class_="analysis-header"),
                ui.p("Root Cause Analysis Tool", class_="analysis-subtitle"),
            ),
            ui.div(
                {"id": "whys-container", "style": "width: 100%;"},
                ui.div(
                    {"style": "width: 100%; margin-bottom: 20px;"},
                    ui.input_text_area("problem", "Problem Statement", placeholder="Define the initial problem here", height="100px", resize="vertical"),
                ),
                ui.output_ui("why_inputs"),
            ),
        ),
        
        # Buttons - with the download link container next to export button
        ui.div(
            {"class": "buttons-container"},
            ui.input_action_button("add_why", "Add Why", class_="btn-custom"),
            ui.input_action_button("reset", "Reset", class_="btn-custom"),
            ui.div(
                {"class": "btn-group"},
                ui.input_action_button("export_png", "Export as PNG", class_="btn-custom btn-success"),
                ui.span(id="download-container", class_="")
            )
        ),
        
        # Capture area (only includes diagram for PNG export)
        ui.div(
            {"id": "capture-area"},
            ui.div(
                {"class": "title-container"},
                ui.h2("5 WHYS Analysis", class_="analysis-header"),
                ui.p("Root Cause Analysis Tool", class_="analysis-subtitle"),
            ),
            ui.div(
                {"class": "diagram-container"},
                ui.h4("Causes Chain"),
                ui.output_ui("why_diagram")
            )
        )
    ),
    
    # JavaScript to handle PNG export and fix focus issues
    ui.tags.script("""
    $(document).ready(function() {
        // Store cursor positions
        var lastFocusedId = '';
        var cursorPositions = {};
        
        // Fix cursor position issues in all textareas
        function setupTextareas() {
            $('textarea').each(function() {
                $(this).off('input.cursorFix').on('input.cursorFix', function() {
                    var id = $(this).attr('id');
                    var pos = this.selectionStart;
                    cursorPositions[id] = pos;
                    lastFocusedId = id;
                });
                
                $(this).off('focus.cursorFix').on('focus.cursorFix', function() {
                    lastFocusedId = $(this).attr('id');
                });
            });
        }
        
        // Run initially
        setupTextareas();
        
        // Run every time new content is added to the page
        $(document).on('shiny:value', function() {
            setTimeout(function() {
                setupTextareas();
                
                if (lastFocusedId) {
                    var el = document.getElementById(lastFocusedId);
                    if (el) {
                        el.focus();
                        if (cursorPositions[lastFocusedId] !== undefined) {
                            try {
                                el.setSelectionRange(cursorPositions[lastFocusedId], cursorPositions[lastFocusedId]);
                            } catch(e) {
                                console.log("Cursor position error:", e);
                            }
                        }
                    }
                }
            }, 50);
        });
        
        // Function to check if device is mobile
        function isMobile() {
            return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth < 768;
        }
        
        // Handle PNG export
        $("#export_png").click(function() {
            // Clear any existing download link
            $("#download-container").empty();
            
            // Show loading message
            $("#download-container").html('<span class="generating-text">Generating...</span>');
            
            // Adjust scale based on device
            var scaleValue = isMobile() ? 2 : 3;
            
            // Use html2canvas to capture the area
            html2canvas(document.getElementById("capture-area"), {
                scale: scaleValue,
                useCORS: true,
                backgroundColor: "#ffffff",
                logging: false,
                allowTaint: true
            }).then(function(canvas) {
                // Convert canvas to data URL
                var dataURL = canvas.toDataURL("image/png");
                
                // Generate timestamp for filename
                var timestamp = new Date().toISOString().replace(/[:.]/g, "-");
                var filename = "5whys_analysis_" + timestamp + ".png";
                
                // Create download link
                var downloadLink = document.createElement("a");
                downloadLink.href = dataURL;
                downloadLink.download = filename;
                downloadLink.innerHTML = "Download PNG";
                downloadLink.className = "btn btn-primary download-btn";
                
                // Clear loading message and add the download link
                $("#download-container").empty();
                $("#download-container").append(downloadLink);
                
                // For mobile, trigger download automatically
                if (isMobile()) {
                    setTimeout(function() {
                        downloadLink.click();
                    }, 100);
                }
            }).catch(function(error) {
                // Handle errors
                $("#download-container").empty();
                $("#download-container").html('<span class="generating-text">Error generating image. Try again.</span>');
                console.error("Error generating PNG:", error);
            });
        });
    });
    """)
)

# Define server logic
def server(input, output, session):
    # Track the number of "why" questions and store the values
    why_count = reactive.Value(1)
    why_values = reactive.Value({
        "why1": "", "why2": "", "why3": "", "why4": "", "why5": ""
    })
    
    # Function to safely get input value
    def get_input_value(input_id, default=""):
        try:
            value = getattr(input, input_id)()
            return value if value is not None else default
        except:
            return default
    
    @reactive.Effect
    @reactive.event(input.add_why)
    def _():
        if why_count.get() < 5:
            # Store current values before adding new input
            current_values = why_values.get()
            for i in range(1, why_count.get() + 1):
                input_id = f"why{i}"
                try:
                    current_values[input_id] = getattr(input, input_id)()
                except:
                    pass
            why_values.set(current_values)
            
            # Increment counter
            why_count.set(why_count.get() + 1)
    
    @reactive.Effect
    @reactive.event(input.reset)
    def _():
        why_count.set(1)
        why_values.set({
            "why1": "", "why2": "", "why3": "", "why4": "", "why5": ""
        })
        ui.update_text_area("problem", value="")
        for i in range(1, 6):
            try:
                ui.update_text_area(f"why{i}", value="")
            except:
                pass
    
    @output
    @render.ui
    def why_inputs():
        inputs = []
        stored_values = why_values.get()
        
        for i in range(1, why_count.get() + 1):
            input_id = f"why{i}"
            
            # Get current value safely
            current_value = get_input_value(input_id, stored_values.get(input_id, ""))
                
            # Store value
            if current_value:
                stored_values[input_id] = current_value
            
            # Create identical structure to problem statement
            inputs.append(
                ui.div(
                    {"style": "width: 100%; margin-bottom: 15px;"},
                    ui.p(f"Why? ({i})", class_="text-center"),
                    ui.input_text_area(
                        input_id, 
                        "", 
                        value=current_value,
                        placeholder=f"Why did this happen? (Cause {i})",
                        height="100px",
                        resize="vertical"
                    )
                )
            )
        
        why_values.set(stored_values)
        return ui.div({"style": "width: 100%;"}, *inputs)
    
    @output
    @render.ui
    def why_diagram():
        # Create a list of entries for the diagram
        entries = []
        
        # First entry is the problem statement
        problem_text = input.problem() or "Problem Statement"
        entries.append(problem_text)
        
        # Add each "why" entry
        for i in range(1, why_count.get() + 1):
            try:
                why_text = getattr(input, f"why{i}")()
                if why_text:
                    entries.append(why_text)
                else:
                    entries.append(f"Cause {i}")
            except:
                entries.append(f"Cause {i}")
        
        # Create the diagram HTML
        elements = []
        for i, text in enumerate(entries):
            is_last = i == len(entries) - 1
            is_problem = i == 0
            
            # Create box with appropriate classes
            box_classes = "cause-box"
            if is_problem:
                box_classes += " problem-box"
            if is_last:
                box_classes += " last-box"
            
            box = ui.div(
                {"class": box_classes},
                text
            )
            
            elements.append(box)
            
            # Add "Why?" between boxes
            if not is_last:
                elements.append(
                    ui.div(
                        {"class": "why-spacer"},
                        ui.div({"class": "arrow-down"}),
                        ui.div({"class": "why-text"}, "Why?")
                    )
                )
        
        # Wrap all elements in a container
        return ui.div(
            {"class": "diagram-box"},
            *elements
        )

# Create the Shiny app
app = App(app_ui, server)
```
