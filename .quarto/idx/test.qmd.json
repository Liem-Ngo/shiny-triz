{"title":"Shinylive in Quarto example","markdown":{"yaml":{"title":"Shinylive in Quarto example","format":"html","filters":["shinylive"]},"headingText":"Editor with app","containsRefs":false,"markdown":"\n\n\nIf you want to display an editor panel with along with the running application, use `#| components: [editor, viewer]`. Users will be able to use the editor to modify the code and re-run the application.\n\n```{shinylive-python}\n#| standalone: true\n#| viewerHeight: 690\n# app.py - TRIZ Principle of Division - Fireproof Fuel Tank Demo\nfrom shiny import App, ui, render, reactive\nfrom htmltools import HTML, css\nimport random\n\n# Define CSS for the app\napp_css = \"\"\"\nbody {\n    margin: 0;\n    padding: 0;\n    font-family: Arial, sans-serif;\n    background-color: #333;\n    color: white;\n    text-align: center;\n}\n.container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    min-height: 100vh;\n    padding: 20px;\n}\nh1 {\n    margin-bottom: 30px;\n    font-size: 2.5rem;\n}\n.tanks-container {\n    display: flex;\n    justify-content: space-around;\n    width: 100%;\n    max-width: 1000px;\n    flex-wrap: wrap;\n    gap: 30px;\n    margin-bottom: 20px;\n}\n.tank-wrapper {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n.tank {\n    position: relative;\n    width: 200px;\n    height: 300px;\n    margin: 0 20px;\n    border: 3px solid #aaa;\n    border-radius: 20px;\n    overflow: hidden;\n}\n.tank-label {\n    font-weight: bold;\n    margin-bottom: 10px;\n    font-size: 1.2rem;\n}\n.liquid {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: #0c0;\n    transition: background-color 3s;\n}\n.cells-grid {\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    grid-template-rows: repeat(6, 1fr);\n    gap: 5px;\n    width: 90%;\n    height: 90%;\n    margin: 5%;\n}\n.cell {\n    background-color: #0c0;\n    border-radius: 5px;\n    transition: background-color 0.5s;\n}\n.fire {\n    background-color: #f30;\n}\n.btn-container {\n    margin-top: 40px;\n}\n.action-btn {\n    padding: 12px 24px;\n    font-size: 16px;\n    color: white;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    margin: 0 10px;\n    transition: background-color 0.3s;\n}\n#start_btn {\n    background: linear-gradient(to bottom, #ff6600, #ff3300);\n}\n#start_btn:disabled {\n    background: #cccccc;\n    cursor: not-allowed;\n}\n#reset_btn {\n    background-color: #4CAF50;\n}\n.description {\n    max-width: 600px;\n    margin: 30px auto;\n    line-height: 1.6;\n    font-size: 1rem;\n    padding: 0 20px;\n}\n.instructions {\n    margin-bottom: 20px;\n    font-style: italic;\n    color: #ddd;\n    max-width: 600px;\n    font-size: 0.9rem;\n}\n.status {\n    margin-top: 15px;\n    padding: 8px 15px;\n    border-radius: 20px;\n    background-color: rgba(255, 255, 255, 0.1);\n    display: inline-block;\n    transition: all 0.3s;\n}\n/* Responsive adjustments */\n@media (max-width: 768px) {\n    .tanks-container {\n        flex-direction: column;\n        align-items: center;\n    }\n    .tank {\n        margin: 0;\n        width: 180px;\n        height: 270px;\n    }\n    .btn-container {\n        display: flex;\n        flex-direction: column;\n        gap: 15px;\n        width: 100%;\n        max-width: 250px;\n    }\n    .action-btn {\n        margin: 0;\n        width: 100%;\n        padding: 15px 20px;\n        font-size: 18px;\n    }\n}\n\"\"\"\n\n# Generate cell divs for the divided tank\ndef generate_cells():\n    cells = []\n    for i in range(1, 25):\n        cells.append(\n            ui.div(\n                id=f\"cell-{i}\",\n                class_=\"cell\"\n            )\n        )\n    return cells\n\n# Define UI\napp_ui = ui.page_fluid(\n    # Include CSS\n    ui.tags.style(app_css),\n    \n    # Include necessary JavaScript\n    ui.tags.script(\"\"\"\n    function setFireCell(cellNumber) {\n        document.getElementById('undivided-liquid').style.backgroundColor = '#f30';\n        document.getElementById('cell-' + cellNumber).style.backgroundColor = '#f30';\n        document.getElementById('status-display').textContent = 'Fire spreading in undivided tank, contained in divided tank';\n        document.getElementById('status-display').style.backgroundColor = 'rgba(255, 100, 0, 0.2)';\n        document.getElementById('start_btn').disabled = true;\n        document.getElementById('start_btn').style.background = '#cccccc';\n        document.getElementById('start_btn').style.cursor = 'not-allowed';\n    }\n    \n    function resetSimulation() {\n        document.getElementById('undivided-liquid').style.backgroundColor = '#0c0';\n        for (let i = 1; i <= 24; i++) {\n            let cell = document.getElementById('cell-' + i);\n            if (cell) cell.style.backgroundColor = '#0c0';\n        }\n        document.getElementById('status-display').textContent = 'Ready to start simulation';\n        document.getElementById('status-display').style.backgroundColor = 'rgba(255, 255, 255, 0.1)';\n        document.getElementById('start_btn').disabled = false;\n        document.getElementById('start_btn').style.background = 'linear-gradient(to bottom, #ff6600, #ff3300)';\n        document.getElementById('start_btn').style.cursor = 'pointer';\n    }\n    \n    // Add a message handler for Python->JS communication\n    $(document).on('shiny:connected', function() {\n        Shiny.addCustomMessageHandler('simulation-action', function(message) {\n            if (message.action === 'setFire') {\n                setFireCell(message.cellNumber);\n            } else if (message.action === 'reset') {\n                resetSimulation();\n            }\n        });\n    });\n    \"\"\"),\n    \n    # Main container\n    ui.div(\n        {\"class\": \"container\"},\n        \n        # Title\n        #ui.h1(\"TRIZ Principle 1: Division\"),\n        \n        # Tanks container\n        ui.div(\n            {\"class\": \"tanks-container\"},\n            \n            # Undivided Tank\n            ui.div(\n                {\"class\": \"tank-wrapper\"},\n                ui.div({\"class\": \"tank-label\"}, \"Undivided Tank\"),\n                ui.div(\n                    {\"class\": \"tank\"},\n                    ui.div({\"id\": \"undivided-liquid\", \"class\": \"liquid\"})\n                )\n            ),\n            \n            # Divided Tank\n            ui.div(\n                {\"class\": \"tank-wrapper\"},\n                ui.div({\"class\": \"tank-label\"}, \"Divided Tank\"),\n                ui.div(\n                    {\"class\": \"tank\"},\n                    ui.div(\n                        {\"id\": \"cells-container\", \"class\": \"cells-grid\"},\n                        *generate_cells()\n                    )\n                )\n            )\n        ),\n        \n        # Instructions\n        ui.div(\n            {\"class\": \"instructions\"},\n            'Click \"Start Fire\" to simulate a fire in both tanks and observe how division prevents fire spreading'\n        ),\n        \n        # Buttons\n        ui.div(\n            {\"class\": \"btn-container\"},\n            ui.input_action_button(\"start_btn\", \"Start Fire\", class_=\"action-btn\"),\n            ui.input_action_button(\"reset_btn\", \"Reset\", class_=\"action-btn\")\n        ),\n        \n        # Status indicator\n        ui.div(\n            {\"id\": \"status-display\", \"class\": \"status\"},\n            \"Ready to start simulation\"\n        ),\n        \n        # Description\n        ui.div(\n            {\"class\": \"description\"},\n            #ui.p( )\n        )\n    )\n)\n\n# Define server logic\ndef server(input, output, session):\n    # Track fire state\n    fire_started = reactive.Value(False)\n    \n    # Handle the Start Fire button click\n    @reactive.Effect\n    @reactive.event(input.start_btn)\n    async def _():\n        if not fire_started.get():\n            fire_started.set(True)\n            # Generate random cell number\n            cell_number = random.randint(1, 24)\n            # Use session to send a message to JavaScript - with await\n            await session.send_custom_message('simulation-action', {'action': 'setFire', 'cellNumber': cell_number})\n    \n    # Handle the Reset button click\n    @reactive.Effect\n    @reactive.event(input.reset_btn)\n    async def _():\n        fire_started.set(False)\n        # Use session to send a message to JavaScript - with await\n        await session.send_custom_message('simulation-action', {'action': 'reset'})\n\n# Create the app\napp = App(app_ui, server)\n```\n\n### TRIZ Principle: Separation\n\n```{shinylive-python}\n#| standalone: true\n#| viewerHeight: 690\n# app.py - TRIZ Principle of Separation - Screwdriver with Interchangeable Bits Demo\nfrom shiny import App, ui, render, reactive\nfrom htmltools import HTML, css\nimport random\n\n# Define CSS for the app\napp_css = \"\"\"\nbody {\n    margin: 0;\n    padding: 0;\n    font-family: Arial, sans-serif;\n    background-color: #333;\n    color: white;\n    text-align: center;\n}\n.container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    min-height: 100vh;\n    padding: 20px;\n}\nh1 {\n    margin-bottom: 30px;\n    font-size: 2.5rem;\n}\n.animation-container {\n    position: relative;\n    width: 800px;\n    height: 400px;\n    background-color: #444;\n    border-radius: 10px;\n    margin-bottom: 30px;\n    box-shadow: 0 0 20px rgba(0,0,0,0.5);\n    overflow: hidden;\n}\n.btn-container {\n    display: flex;\n    justify-content: center;\n    gap: 20px;\n    margin-top: 20px;\n}\n.action-btn {\n    padding: 12px 24px;\n    font-size: 16px;\n    color: white;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    transition: background-color 0.3s;\n}\n#start_btn {\n    background: linear-gradient(to bottom, #4CAF50, #45a049);\n}\n#start_btn:disabled {\n    background: #cccccc;\n    cursor: not-allowed;\n}\n#reset_btn {\n    background-color: #f44336;\n}\n.description {\n    max-width: 600px;\n    margin: 30px auto;\n    line-height: 1.6;\n    font-size: 1rem;\n    padding: 0 20px;\n}\n.instructions {\n    margin-bottom: 20px;\n    font-style: italic;\n    color: #ddd;\n    max-width: 600px;\n    font-size: 0.9rem;\n}\n.status {\n    margin-top: 15px;\n    padding: 8px 15px;\n    border-radius: 20px;\n    background-color: rgba(255, 255, 255, 0.1);\n    display: inline-block;\n    transition: all 0.3s;\n}\n/* Screwdriver animation elements */\n#handle {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 300px;\n    height: 60px;\n    background: linear-gradient(to bottom, #999999, #dddddd, #888888, #dddddd, #999999);\n    border-radius: 30px 5px 5px 30px;\n    border: 1px solid #666666;\n}\n#handle-grip {\n    position: absolute;\n    top: 10px;\n    left: 10px;\n    width: calc(100% - 20px);\n    height: calc(100% - 20px);\n    background: linear-gradient(to bottom, #777777, #aaaaaa, #666666, #777777);\n    border-radius: 20px 0 0 20px;\n}\n#ferrule {\n    position: absolute;\n    top: 5px;\n    right: 5px;\n    width: 35px;\n    height: calc(100% - 10px);\n    background: linear-gradient(to bottom, #999999, #eeeeee, #777777, #eeeeee, #999999);\n    border-radius: 0 5px 5px 0;\n}\n.grip-line {\n    position: absolute;\n    width: 3px;\n    height: 30px;\n    background-color: #555555;\n    top: 15px;\n}\n#flathead-bit {\n    position: absolute;\n    top: 50%;\n    left: calc(50% + 150px - 120px);\n    transform: translate(0, -50%);\n    width: 120px;\n    height: 30px;\n    background: linear-gradient(to bottom, #cc3333, #ff6666, #cc0000, #ff6666, #cc3333);\n    border-radius: 0 5px 5px 0;\n    transition: left 1s ease-in-out;\n}\n#flathead-tip {\n    position: absolute;\n    top: -5px;\n    right: 0;\n    width: 15px;\n    height: 40px;\n    background: linear-gradient(to bottom, #cc3333, #ff6666, #cc0000, #ff6666, #cc3333);\n}\n#phillips-bit {\n    position: absolute;\n    top: 50%;\n    left: 900px;\n    transform: translate(0, -50%);\n    width: 120px;\n    height: 30px;\n    background: linear-gradient(to bottom, #3366cc, #6699ff, #0044cc, #6699ff, #3366cc);\n    border-radius: 0 5px 5px 0;\n    transition: left 1s ease-in-out;\n}\n#phillips-tip {\n    position: absolute;\n    top: -5px;\n    right: 0;\n    width: 15px;\n    height: 40px;\n    background: linear-gradient(to bottom, #3366cc, #6699ff, #0044cc, #6699ff, #3366cc);\n}\n.cross-horizontal {\n    position: absolute;\n    top: 18px;\n    right: 3px;\n    width: 14px;\n    height: 4px;\n    background-color: #002266;\n}\n.cross-vertical {\n    position: absolute;\n    top: 13px;\n    right: 8px;\n    width: 4px;\n    height: 14px;\n    background-color: #002266;\n}\n/* Responsive adjustments */\n@media (max-width: 850px) {\n    .animation-container {\n        width: 95%;\n        height: 300px;\n    }\n}\n\"\"\"\n\n# Define UI\napp_ui = ui.page_fluid(\n    # Include CSS\n    ui.tags.style(app_css),\n    \n    # Include necessary JavaScript for animation\n    ui.tags.script(\"\"\"\n    let animationState = 'initial';\n    let animationInProgress = false;\n    \n    function playAnimation() {\n        if (animationInProgress) return;\n        \n        animationInProgress = true;\n        document.getElementById('start_btn').disabled = true;\n        document.getElementById('start_btn').style.background = '#cccccc';\n        document.getElementById('status-display').textContent = 'Separation: Removing the flathead bit';\n        \n        // Step 1: Separate flathead bit\n        const flatheadBit = document.getElementById('flathead-bit');\n        flatheadBit.style.left = '650px';\n        \n        setTimeout(() => {\n            // Step 2: Transition\n            document.getElementById('status-display').textContent = 'Transition: Switching bits';\n            flatheadBit.style.left = '900px';\n            \n            setTimeout(() => {\n                // Step 3: Phillips bit appears\n                const phillipsBit = document.getElementById('phillips-bit');\n                phillipsBit.style.left = '650px';\n                document.getElementById('status-display').textContent = 'Reattachment: Phillips bit connecting to handle';\n                \n                setTimeout(() => {\n                    // Step 4: Phillips bit connects\n                    phillipsBit.style.left = 'calc(50% + 150px - 120px)';\n                    \n                    setTimeout(() => {\n                        // Complete\n                        document.getElementById('status-display').textContent = 'Complete: Screwdriver now has Phillips bit attached';\n                        animationInProgress = false;\n                    }, 1000);\n                }, 1000);\n            }, 1000);\n        }, 1000);\n    }\n    \n    function resetAnimation() {\n        document.getElementById('flathead-bit').style.left = 'calc(50% + 150px - 120px)';\n        document.getElementById('phillips-bit').style.left = '900px';\n        document.getElementById('status-display').textContent = 'Initial State: Flathead bit attached to handle';\n        document.getElementById('start_btn').disabled = false;\n        document.getElementById('start_btn').style.background = 'linear-gradient(to bottom, #4CAF50, #45a049)';\n        animationInProgress = false;\n    }\n    \n    // Add a message handler for Python->JS communication\n    $(document).on('shiny:connected', function() {\n        Shiny.addCustomMessageHandler('animation-action', function(message) {\n            if (message.action === 'play') {\n                playAnimation();\n            } else if (message.action === 'reset') {\n                resetAnimation();\n            }\n        });\n    });\n    \"\"\"),\n    \n    # Main container\n    ui.div(\n        {\"class\": \"container\"},\n        # Animation container\n        ui.div(\n            {\"class\": \"animation-container\"},\n            \n            # Handle\n            ui.div({\"id\": \"handle\"},\n                # Grip area\n                ui.div({\"id\": \"handle-grip\"}),\n                # Ferrule\n                ui.div({\"id\": \"ferrule\"})\n            ),\n            \n            # Grip lines\n            *[ui.div({\"class\": \"grip-line\", \"style\": f\"left: {40 + i * 30}px;\"}) for i in range(8)],\n            \n            # Flathead bit\n            ui.div({\"id\": \"flathead-bit\"},\n                ui.div({\"id\": \"flathead-tip\"})\n            ),\n            \n            # Phillips bit\n            ui.div({\"id\": \"phillips-bit\"},\n                ui.div({\"id\": \"phillips-tip\"},\n                    ui.div({\"class\": \"cross-horizontal\"}),\n                    ui.div({\"class\": \"cross-vertical\"})\n                )\n            )\n        ),\n        \n        # Status indicator\n        ui.div(\n            {\"id\": \"status-display\", \"class\": \"status\"},\n            \"Initial State: Flathead bit attached to handle\"\n        ),\n        \n        # Buttons\n        ui.div(\n            {\"class\": \"btn-container\"},\n            ui.input_action_button(\"start_btn\", \"Play Animation\", class_=\"action-btn\"),\n            ui.input_action_button(\"reset_btn\", \"Reset\", class_=\"action-btn\")\n        ),\n        \n        # Description\n        ui.div(\n            {\"class\": \"description\"},\n           \n        )\n    )\n)\n\n# Define server logic\ndef server(input, output, session):\n    # Track animation state\n    animation_playing = reactive.Value(False)\n    \n    # Handle the Play Animation button click\n    @reactive.Effect\n    @reactive.event(input.start_btn)\n    async def _():\n        if not animation_playing.get():\n            animation_playing.set(True)\n            # Send message to JavaScript\n            await session.send_custom_message('animation-action', {'action': 'play'})\n    \n    # Handle the Reset button click\n    @reactive.Effect\n    @reactive.event(input.reset_btn)\n    async def _():\n        animation_playing.set(False)\n        # Send message to JavaScript\n        await session.send_custom_message('animation-action', {'action': 'reset'})\n\n# Create the app\napp = App(app_ui, server)\n\n```\n### Editor with app\n\nIf you want to display an editor panel with along with the running application, use `#| components: [editor, viewer]`. Users will be able to use the editor to modify the code and re-run the application.\n\n```{shinylive-python}\n#| standalone: true\n#| viewerHeight: 690\nfrom shiny import App, ui, reactive, render\nimport shinyswatch\nfrom htmltools import HTML, css, tags\n\n# Define the SVG content for the pot visualization\ndef get_homogeneous_pot_svg():\n    return HTML(\"\"\"\n    <svg width=\"300\" height=\"200\" viewBox=\"0 0 300 200\" id=\"pot-svg\">\n        <!-- Homogeneous Pot -->\n        <g id=\"homogeneous-pot\">\n            <!-- Pot body -->\n            <path d=\"M80,40 L80,160 C80,180 220,180 220,160 L220,40\" fill=\"#a9a9a9\" stroke=\"#666\" stroke-width=\"2\"/>\n            \n            <!-- Pot interior - showing uniform material -->\n            <path d=\"M90,50 L90,155 C90,170 210,170 210,155 L210,50\" fill=\"none\" stroke=\"#666\" stroke-width=\"1\" stroke-dasharray=\"3,3\"/>\n            \n            <!-- Pot rim -->\n            <path d=\"M70,40 C70,30 230,30 230,40\" fill=\"#a9a9a9\" stroke=\"#666\" stroke-width=\"2\"/>\n            \n            <!-- Pot handle right -->\n            <path d=\"M220,80 C260,80 260,120 220,120\" fill=\"none\" stroke=\"#666\" stroke-width=\"5\"/>\n            \n            <!-- Label for material -->\n            <text x=\"150\" y=\"100\" text-anchor=\"middle\" fill=\"#fff\" font-weight=\"bold\">Aluminum</text>\n        </g>\n    </svg>\n    \"\"\")\n\ndef get_heterogeneous_pot_svg():\n    return HTML(\"\"\"\n    <svg width=\"300\" height=\"200\" viewBox=\"0 0 300 200\" id=\"pot-svg\">\n        <!-- Heterogeneous Pot -->\n        <g id=\"heterogeneous-pot\">\n            <!-- Pot body - same outer shape -->\n            <path d=\"M80,40 L80,160 C80,180 220,180 220,160 L220,40\" fill=\"#a9a9a9\" stroke=\"#666\" stroke-width=\"2\"/>\n            \n            <!-- Interior layers -->\n            <!-- Stainless steel inner layer -->\n            <path d=\"M90,50 L90,155 C90,170 210,170 210,155 L210,50\" fill=\"none\" stroke=\"#c0c0c0\" stroke-width=\"3\"/>\n            \n            <!-- Aluminum middle layer -->\n            <path d=\"M85,45 L85,157 C85,175 215,175 215,157 L215,45\" fill=\"none\" stroke=\"#a9a9a9\" stroke-width=\"3\"/>\n            \n            <!-- Copper outer layer -->\n            <path d=\"M80,40 L80,160 C80,180 220,180 220,160 L220,40\" fill=\"none\" stroke=\"#b87333\" stroke-width=\"3\"/>\n            \n            <!-- Pot rim -->\n            <path d=\"M70,40 C70,30 230,30 230,40\" fill=\"#c0c0c0\" stroke=\"#666\" stroke-width=\"2\"/>\n            \n            <!-- Pot handle right -->\n            <path d=\"M220,80 C260,80 260,120 220,120\" fill=\"none\" stroke=\"#666\" stroke-width=\"5\"/>\n            \n            <!-- Layer indicators inside pot -->\n            <line x1=\"100\" y1=\"70\" x2=\"120\" y2=\"70\" stroke=\"#c0c0c0\" stroke-width=\"2\"/>\n            <text x=\"125\" y=\"75\" font-size=\"12\">Stainless Steel</text>\n            \n            <line x1=\"100\" y1=\"100\" x2=\"120\" y2=\"100\" stroke=\"#a9a9a9\" stroke-width=\"2\"/>\n            <text x=\"125\" y=\"105\" font-size=\"12\">Aluminum</text>\n            \n            <line x1=\"100\" y1=\"130\" x2=\"120\" y2=\"130\" stroke=\"#b87333\" stroke-width=\"2\"/>\n            <text x=\"125\" y=\"135\" font-size=\"12\">Copper</text>\n        </g>\n    </svg>\n    \"\"\")\n\n# Custom CSS for the app\ncss_content = \"\"\"\n.container {\n    max-width: 900px;\n    margin: 0 auto;\n    background-color: white;\n    padding: 30px;\n    border-radius: 8px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\nh1 {\n    text-align: center;\n    color: #2c3e50;\n    margin-bottom: 30px;\n}\n.illustration-container {\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 30px;\n    position: relative;\n}\n.pot-container {\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    position: relative;\n}\n.layer-diagram {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 20px;\n}\n.layer {\n    width: 200px;\n    height: 40px;\n    margin: 2px 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n    font-weight: bold;\n    border-radius: 4px;\n    cursor: pointer;\n    transition: transform 0.2s, box-shadow 0.2s;\n}\n.layer:hover {\n    transform: scale(1.05);\n    box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n}\n.info-panel {\n    background-color: #f8f9fa;\n    padding: 20px;\n    border-radius: 8px;\n    margin-top: 20px;\n}\n.tooltip-content {\n    display: none;\n    position: absolute;\n    background-color: #34495e;\n    color: white;\n    padding: 10px 15px;\n    border-radius: 4px;\n    z-index: 100;\n    max-width: 250px;\n    box-shadow: 0 3px 10px rgba(0,0,0,0.2);\n}\n.layer:hover .tooltip-content {\n    display: block;\n}\n\"\"\"\n\n# Define the UI\ndef ui_content():\n    # Define the page layout with theme as a keyword argument\n    return ui.page_fluid(\n        ui.tags.head(\n            ui.tags.style(css_content),\n        ),\n        ui.div(\n            {\"class\": \"container\"},\n            ui.h1(\"Principle of Local Quality\"),\n            ui.p(\"Transform an object from a homogeneous structure to a heterogeneous one, where different parts have specialized functions.\"),\n            \n            ui.div(\n                {\"class\": \"illustration-container\"},\n                # Pot container\n                ui.div(\n                    {\"class\": \"pot-container\"},\n                    ui.output_ui(\"pot_svg\")\n                ),\n                # Layer diagram\n                ui.div(\n                    {\"class\": \"layer-diagram\"},\n                    ui.output_ui(\"layer_diagram\")\n                )\n            ),\n            \n            ui.div(\n                {\"class\": \"control-panel\", \"style\": \"text-align: center; margin: 20px 0;\"},\n                ui.input_action_button(\n                    \"toggle_button\", \n                    \"Apply Local Quality Principle\", \n                    class_=\"btn-primary\"\n                )\n            ),\n            \n            ui.div(\n                {\"class\": \"info-panel\"},\n                ui.h3(ui.output_text(\"info_title\")),\n                ui.output_ui(\"info_text\")\n            )\n        ),\n        theme=shinyswatch.theme.cosmo()\n    )\n\n# Define the server\ndef server(input, output, session):\n    # Reactive value to track the current state\n    is_heterogeneous = reactive.Value(False)\n    \n    # Handler for the toggle button\n    @reactive.Effect\n    @reactive.event(input.toggle_button)\n    def _():\n        current_state = is_heterogeneous.get()\n        is_heterogeneous.set(not current_state)\n        \n        # Update the button text\n        if not current_state:\n            ui.update_action_button(\n                \"toggle_button\", \n                label=\"Return to Homogeneous Structure\"\n            )\n        else:\n            ui.update_action_button(\n                \"toggle_button\", \n                label=\"Apply Local Quality Principle\"\n            )\n    \n    # Render the pot SVG based on the current state\n    @output\n    @render.ui\n    def pot_svg():\n        if is_heterogeneous.get():\n            return get_heterogeneous_pot_svg()\n        else:\n            return get_homogeneous_pot_svg()\n    \n    # Render the layer diagram based on the current state\n    @output\n    @render.ui\n    def layer_diagram():\n        if is_heterogeneous.get():\n            return ui.div(\n                ui.div(\n                    {\"class\": \"layer\", \"style\": \"background-color: #c0c0c0;\"},\n                    \"Stainless Steel\",\n                    ui.div(\n                        {\"class\": \"tooltip-content\"},\n                        \"Non-reactive and easy-to-clean surface for food safety\"\n                    )\n                ),\n                ui.div(\n                    {\"class\": \"layer\", \"style\": \"background-color: #a9a9a9;\"},\n                    \"Aluminum\",\n                    ui.div(\n                        {\"class\": \"tooltip-content\"},\n                        \"Distributes heat evenly throughout the pot to prevent hot spots\"\n                    )\n                ),\n                ui.div(\n                    {\"class\": \"layer\", \"style\": \"background-color: #b87333;\"},\n                    \"Copper\",\n                    ui.div(\n                        {\"class\": \"tooltip-content\"},\n                        \"Excellent heat conductor for quick and efficient heating from the bottom\"\n                    )\n                )\n            )\n        else:\n            return ui.div(\n                ui.div(\n                    {\"class\": \"layer\", \"style\": \"background-color: #a9a9a9;\"},\n                    \"Aluminum\"\n                )\n            )\n    \n    # Render the info title based on the current state\n    @output\n    @render.text\n    def info_title():\n        if is_heterogeneous.get():\n            return \"Enhanced Pot: Heterogeneous Structure\"\n        else:\n            return \"Standard Pot: Homogeneous Structure\"\n    \n    # Render the info text based on the current state\n    @output\n    @render.ui\n    def info_text():\n        if is_heterogeneous.get():\n            return ui.HTML(\n                \"\"\"This pot has specialized layers for improved functionality. \n                <strong>Pros:</strong> Copper bottom for quick heating, aluminum middle \n                for even heat distribution, and stainless steel interior for non-reactive \n                cooking surface. <strong>Cons:</strong> More complex to manufacture.\"\"\"\n            )\n        else:\n            return ui.HTML(\n                \"\"\"This pot has a uniform aluminum structure. <strong>Pros:</strong> Simple design, \n                even heat distribution. <strong>Cons:</strong> May react with acidic foods, \n                wear out faster, and doesn't optimize heating efficiency.\"\"\"\n            )\n\n# Create the app\napp = App(ui_content(), server)\n```\n\n\n```{shinylive-python}\n#| standalone: true\n#| viewerHeight: 690\nfrom shiny import App, ui, reactive, render\nimport asyncio\n\n# Define CSS\napp_css = \"\"\"\nbody {\n    margin: 0;\n    padding: 0;\n    font-family: Arial, sans-serif;\n    background-color: #f0f0f0;\n    color: #333;\n    text-align: center;\n}\n.container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    padding: 20px;\n}\nh1 {\n    margin-bottom: 20px;\n    font-size: 2rem;\n    color: #333;\n}\n.description {\n    max-width: 700px;\n    margin: 0 auto 30px;\n    line-height: 1.5;\n    color: #555;\n    font-size: 1rem;\n}\n.animation-container {\n    position: relative;\n    width: 700px;\n    height: 400px;\n    background-color: #e0e0e0;\n    border-radius: 10px;\n    margin-bottom: 30px;\n    box-shadow: 0 0 10px rgba(0,0,0,0.2);\n    overflow: hidden;\n}\n.btn-container {\n    display: flex;\n    justify-content: center;\n    gap: 20px;\n    margin-bottom: 20px;\n}\n.action-btn {\n    padding: 10px 15px;\n    font-size: 16px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    transition: background-color 0.3s;\n}\n.drill-btn {\n    background-color: #4CAF50;\n    color: white;\n}\n.drill-btn:hover {\n    background-color: #45a049;\n}\n.drill-btn:disabled {\n    background-color: #cccccc;\n    cursor: not-allowed;\n}\n.reset-btn {\n    background-color: #888;\n    color: white;\n}\n.reset-btn:hover {\n    background-color: #777;\n}\n.ground {\n    position: absolute;\n    bottom: 0;\n    width: 100%;\n    height: 2px;\n    background-color: #777777;\n}\n.slab {\n    position: absolute;\n    width: 200px;\n    height: 60px;\n    bottom: 2px;\n    background-color: #a0a0a0;\n    border: 2px solid #333333;\n    z-index: 5;\n}\n.left-slab {\n    left: 150px;\n}\n.right-slab {\n    left: 450px;\n}\n.hole {\n    position: absolute;\n    background-color: #555555;\n    box-shadow: inset 0 0 15px rgba(0, 0, 0, 0.7);\n    opacity: 0;\n    transition: opacity 0.5s ease;\n    z-index: 10;\n}\n.round-hole {\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    left: 230px;\n    bottom: 12px;\n}\n.square-hole {\n    width: 40px;\n    height: 40px;\n    left: 530px;\n    bottom: 12px;\n}\n.drill {\n    position: absolute;\n    width: 40px;\n    height: 120px;\n    background-color: #333333;\n    top: 100px;\n    transition: top 1s ease;\n}\n.left-drill {\n    left: 230px;\n}\n.right-drill {\n    left: 530px;\n}\n.drill-handle {\n    position: absolute;\n    top: 20px;\n    right: -15px;\n    width: 15px;\n    height: 30px;\n    background-color: #333333;\n}\n.drill-button {\n    position: absolute;\n    top: 25px;\n    right: -7px;\n    width: 10px;\n    height: 10px;\n    border-radius: 50%;\n    background-color: #ff0000;\n}\n.drill-bit {\n    position: absolute;\n    bottom: -30px;\n    left: 10px;\n    width: 20px;\n    height: 30px;\n    transition: transform 0.1s ease;\n}\n.round-bit {\n    background-color: #666666;\n    clip-path: polygon(0 0, 100% 0, 50% 100%);\n}\n.square-bit {\n    background-color: #666666;\n}\n.label {\n    position: absolute;\n    text-align: center;\n    font-size: 14px;\n    color: #000000;\n}\n.top-label {\n    width: 200px;\n    top: 80px;\n}\n.bottom-label {\n    width: 200px;\n    bottom: -25px;\n}\n.left-top-label {\n    left: 150px;\n}\n.right-top-label {\n    left: 450px;\n}\n.left-bottom-label {\n    left: 150px;\n}\n.right-bottom-label {\n    left: 450px;\n}\n@keyframes vibrate {\n    0% { transform: translateX(0); }\n    25% { transform: translateX(-2px); }\n    50% { transform: translateX(0); }\n    75% { transform: translateX(2px); }\n    100% { transform: translateX(0); }\n}\n.vibrate {\n    animation: vibrate 0.1s infinite;\n}\n.vibrate-strong {\n    animation: vibrate 0.05s infinite;\n}\n\"\"\"\n\n# Define JavaScript\napp_js = \"\"\"\nlet leftDrilling = false;\nlet rightDrilling = false;\nlet leftHasHole = false;\nlet rightHasHole = false;\n\nfunction drillRoundHole() {\n    if (leftDrilling) return;\n    \n    leftDrilling = true;\n    document.getElementById('traditional_btn').disabled = true;\n    \n    // Move drill down\n    const leftDrill = document.getElementById('left-drill');\n    leftDrill.style.top = '220px';\n    \n    // Add vibration effect\n    setTimeout(() => {\n        leftDrill.classList.add('vibrate');\n        const leftBit = document.getElementById('left-bit');\n        leftBit.classList.add('vibrate');\n        \n        // Create hole after delay\n        setTimeout(() => {\n            const hole = document.getElementById('round-hole');\n            hole.style.opacity = '1';\n            leftHasHole = true;\n            \n            // Move drill back up\n            setTimeout(() => {\n                leftDrill.classList.remove('vibrate');\n                leftBit.classList.remove('vibrate');\n                leftDrill.style.top = '100px';\n                \n                // Re-enable button after animation completes\n                setTimeout(() => {\n                    leftDrilling = false;\n                    document.getElementById('traditional_btn').disabled = false;\n                }, 1000);\n            }, 500);\n        }, 1000);\n    }, 1000);\n}\n\nfunction drillSquareHole() {\n    if (rightDrilling) return;\n    \n    rightDrilling = true;\n    document.getElementById('special_btn').disabled = true;\n    \n    // Move drill down\n    const rightDrill = document.getElementById('right-drill');\n    rightDrill.style.top = '220px';\n    \n    // Add vibration effect (stronger for special drill)\n    setTimeout(() => {\n        rightDrill.classList.add('vibrate-strong');\n        const rightBit = document.getElementById('right-bit');\n        rightBit.classList.add('vibrate-strong');\n        \n        // Create hole after delay\n        setTimeout(() => {\n            const hole = document.getElementById('square-hole');\n            hole.style.opacity = '1';\n            rightHasHole = true;\n            \n            // Move drill back up\n            setTimeout(() => {\n                rightDrill.classList.remove('vibrate-strong');\n                rightBit.classList.remove('vibrate-strong');\n                rightDrill.style.top = '100px';\n                \n                // Re-enable button after animation completes\n                setTimeout(() => {\n                    rightDrilling = false;\n                    document.getElementById('special_btn').disabled = false;\n                }, 1000);\n            }, 500);\n        }, 1000);\n    }, 1000);\n}\n\nfunction resetScene() {\n    // Reset holes\n    document.getElementById('round-hole').style.opacity = '0';\n    document.getElementById('square-hole').style.opacity = '0';\n    \n    // Reset drills position\n    document.getElementById('left-drill').style.top = '100px';\n    document.getElementById('right-drill').style.top = '100px';\n    \n    // Remove vibration effects\n    document.getElementById('left-drill').classList.remove('vibrate');\n    document.getElementById('right-drill').classList.remove('vibrate-strong');\n    document.getElementById('left-bit').classList.remove('vibrate');\n    document.getElementById('right-bit').classList.remove('vibrate-strong');\n    \n    // Reset state\n    leftDrilling = false;\n    rightDrilling = false;\n    leftHasHole = false;\n    rightHasHole = false;\n    \n    // Enable buttons\n    document.getElementById('traditional_btn').disabled = false;\n    document.getElementById('special_btn').disabled = false;\n}\n\n// Add a message handler for Python->JS communication\n$(document).on('shiny:connected', function() {\n    Shiny.addCustomMessageHandler('animation-action', function(message) {\n        if (message.action === 'drill-round') {\n            drillRoundHole();\n        } else if (message.action === 'drill-square') {\n            drillSquareHole();\n        } else if (message.action === 'reset') {\n            resetScene();\n        }\n    });\n});\n\"\"\"\n\n# Define UI\napp_ui = ui.page_fluid(\n    # Include CSS and JavaScript\n    ui.tags.style(app_css),\n    ui.tags.script(app_js),\n    \n    # Main container\n    ui.div(\n        {\"class\": \"container\"},\n        ui.h1(\"TRIZ Anti-Asymmetry Principle\"),\n        ui.p(\n            \"This visualization demonstrates the TRIZ principle of \\\"Anti-(Asymmetry)\\\" using drills as an example. \"\n            \"The traditional drill (left) creates round holes, while the special hand-held drill (right) creates square holes in concrete slabs.\",\n            class_=\"description\"\n        ),\n        \n        # Buttons\n        ui.div(\n            {\"class\": \"btn-container\"},\n            ui.input_action_button(\"traditional_btn\", \"Drill Round Hole\", class_=\"action-btn drill-btn\"),\n            ui.input_action_button(\"special_btn\", \"Drill Square Hole\", class_=\"action-btn drill-btn\"),\n            ui.input_action_button(\"reset_btn\", \"Reset\", class_=\"action-btn reset-btn\")\n        ),\n        \n        # Animation container\n        ui.div(\n            {\"class\": \"animation-container\"},\n            \n            # Ground line\n            ui.div({\"class\": \"ground\"}),\n            \n            # Concrete slabs\n            ui.div({\"class\": \"slab left-slab\"}),\n            ui.div({\"class\": \"slab right-slab\"}),\n            \n            # Holes\n            ui.div({\"id\": \"round-hole\", \"class\": \"hole round-hole\"}),\n            ui.div({\"id\": \"square-hole\", \"class\": \"hole square-hole\"}),\n            \n            # Left drill (traditional)\n            ui.div(\n                {\"id\": \"left-drill\", \"class\": \"drill left-drill\"},\n                ui.div({\"class\": \"drill-handle\"}),\n                ui.div({\"class\": \"drill-button\"}),\n                ui.div({\"id\": \"left-bit\", \"class\": \"drill-bit round-bit\"})\n            ),\n            \n            # Right drill (special)\n            ui.div(\n                {\"id\": \"right-drill\", \"class\": \"drill right-drill\"},\n                ui.div({\"class\": \"drill-handle\"}),\n                ui.div({\"class\": \"drill-button\"}),\n                ui.div({\"id\": \"right-bit\", \"class\": \"drill-bit square-bit\"})\n            ),\n            \n            # Labels\n            ui.div({\"class\": \"label top-label left-top-label\"}, \"Traditional Drill\"),\n            ui.div({\"class\": \"label top-label right-top-label\"}, \"Special Drill with Vibrator\"),\n            ui.div({\"class\": \"label bottom-label left-bottom-label\"}, \"Round Hole\"),\n            ui.div({\"class\": \"label bottom-label right-bottom-label\"}, \"Square Hole\")\n        )\n    )\n)\n\n# Define server logic\ndef server(input, output, session):\n    # Handle the traditional drill button click\n    @reactive.Effect\n    @reactive.event(input.traditional_btn)\n    async def handle_traditional_drill():\n        await session.send_custom_message('animation-action', {'action': 'drill-round'})\n    \n    # Handle the special drill button click\n    @reactive.Effect\n    @reactive.event(input.special_btn)\n    async def handle_special_drill():\n        await session.send_custom_message('animation-action', {'action': 'drill-square'})\n    \n    # Handle the reset button click\n    @reactive.Effect\n    @reactive.event(input.reset_btn)\n    async def handle_reset():\n        await session.send_custom_message('animation-action', {'action': 'reset'})\n\n# Create the app\napp = App(app_ui, server)\n\n```\n\n\n\n\n\n\n\n\n\n\n```{shinylive-python}\n#| standalone: true\n#| viewerHeight: 690\nfrom shiny import App, ui, render, reactive\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport numpy as np\nimport matplotlib\nfrom matplotlib.path import Path\n\n# Set better fonts for improved text rendering\nmatplotlib.rcParams['font.family'] = 'sans-serif'\nmatplotlib.rcParams['font.sans-serif'] = ['Arial', 'Helvetica', 'DejaVu Sans']\nmatplotlib.rcParams['font.size'] = 12\nmatplotlib.rcParams['axes.titlesize'] = 16\nmatplotlib.rcParams['figure.titlesize'] = 18\n\n# Define the app UI with enhanced styling\napp_ui = ui.page_fluid(\n    ui.tags.style(\"\"\"\n        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');\n        \n        body {\n            font-family: 'Poppins', sans-serif;\n            background-color: #f5f7fa;\n            color: #333;\n            line-height: 1.6;\n        }\n        \n        h1 {\n            color: #2c3e50;\n            font-weight: 600;\n            margin-bottom: 20px;\n            border-bottom: 2px solid #3498db;\n            padding-bottom: 10px;\n        }\n        \n        h4 {\n            color: #2c3e50;\n            font-weight: 500;\n            margin-top: 20px;\n        }\n        \n        .container-fluid {\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        \n        .control-panel {\n            background-color: white;\n            border-radius: 12px;\n            box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n            padding: 25px;\n            margin-bottom: 20px;\n        }\n        \n        .plot-container {\n            background-color: white;\n            border-radius: 12px;\n            box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n            overflow: hidden;\n            margin-bottom: 20px;\n        }\n        \n        .btn {\n            border-radius: 8px;\n            font-weight: 500;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n            margin-bottom: 15px;\n            padding: 10px 0;\n            transition: all 0.3s ease;\n        }\n        \n        .btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n        }\n        \n        .btn-danger {\n            background-color: #e74c3c;\n            border-color: #e74c3c;\n        }\n        \n        .btn-success {\n            background-color: #2ecc71;\n            border-color: #2ecc71;\n        }\n        \n        .btn-primary {\n            background-color: #3498db;\n            border-color: #3498db;\n        }\n        \n        .btn-secondary {\n            background-color: #7f8c8d;\n            border-color: #7f8c8d;\n        }\n        \n        .color-display {\n            font-size: 24px;\n            font-weight: 600;\n            text-align: center;\n            margin: 15px 0;\n            padding: 10px;\n            border-radius: 8px;\n            background-color: #f8f9fa;\n        }\n        \n        hr {\n            border-color: #eee;\n            margin: 25px 0;\n        }\n        \n        .app-description {\n            background-color: white;\n            border-radius: 12px;\n            padding: 20px;\n            margin-bottom: 20px;\n            box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n            font-size: 16px;\n            line-height: 1.6;\n        }\n    \"\"\"),\n    ui.row(\n        ui.column(3,\n            ui.div(\n                ui.input_action_button(\"red_btn\", \"Red Ink\", class_=\"btn-danger\", width=\"100%\"),\n                ui.input_action_button(\"green_btn\", \"Green Ink\", class_=\"btn-success\", width=\"100%\"),\n                ui.input_action_button(\"blue_btn\", \"Blue Ink\", class_=\"btn-primary\", width=\"100%\"),\n                ui.input_action_button(\"rotate_btn\", \"Rotate Pen\", class_=\"btn-secondary\", width=\"100%\"),\n                class_=\"control-panel\"\n            )\n        ),\n        ui.column(9,\n            ui.div(\n                ui.output_plot(\"pen_plot\", height=\"600px\", width=\"100%\"),\n                class_=\"plot-container\"\n            )\n        )\n    )\n)\n\n# Define the server logic\ndef server(input, output, session):\n    # State variables\n    pen_state = reactive.Value({\n        'color_name': 'Red',\n        'color_hex': '#e74c3c',\n        'rotation_angle': 0\n    })\n\n    # Drawing function\n    @render.plot\n    def pen_plot():\n        # Get current state\n        state = pen_state.get()\n        \n        # Create figure and axis with a larger figure size for better visibility\n        plt.style.use('ggplot')\n        fig, ax = plt.subplots(figsize=(14, 10))\n        \n        # Set up plot with more room\n        ax.set_xlim(-10, 10)\n        ax.set_ylim(-7, 7)\n        ax.set_aspect('equal')\n        ax.set_facecolor('#f8f9fa')\n        \n        # Remove axes\n        ax.set_xticks([])\n        ax.set_yticks([])\n        for spine in ax.spines.values():\n            spine.set_visible(False)\n        \n        # Add a nice background rectangle\n        background = patches.Rectangle(\n            (-10, -7), 20, 14,\n            linewidth=0,\n            facecolor='#ffffff',\n            zorder=-2\n        )\n        ax.add_patch(background)\n                \n        # Define the rotation angle (in radians)\n        angle = state['rotation_angle']\n        \n        # Pen dimensions\n        pen_length = 8.0\n        pen_width = 1.0\n        tip_length = 1.5\n        \n        # Create a transform for rotation\n        cos_ang = np.cos(angle)\n        sin_ang = np.sin(angle)\n        \n        # Rotate point function\n        def rotate_point(x, y):\n            return x * cos_ang - y * sin_ang, x * sin_ang + y * cos_ang\n        \n        # Draw pen body with gradient effect\n        body_color = '#34495e'  # Darker blue-gray\n        \n        # Define corners of the pen body\n        x0, y0 = -pen_length/2, -pen_width/2  # Bottom-left\n        x1, y1 = pen_length/2, -pen_width/2   # Bottom-right\n        x2, y2 = pen_length/2, pen_width/2    # Top-right\n        x3, y3 = -pen_length/2, pen_width/2   # Top-left\n        \n        # Rotated corners\n        rx0, ry0 = rotate_point(x0, y0)\n        rx1, ry1 = rotate_point(x1, y1)\n        rx2, ry2 = rotate_point(x2, y2)\n        rx3, ry3 = rotate_point(x3, y3)\n        \n        # Draw pen body\n        pen_body = patches.Polygon(\n            [[rx0, ry0], [rx1, ry1], [rx2, ry2], [rx3, ry3]],\n            closed=True,\n            facecolor=body_color,\n            edgecolor='#2c3e50',\n            linewidth=1.5\n        )\n        ax.add_patch(pen_body)\n        \n        # Add highlight to pen body for 3D effect\n        highlight_width = pen_width * 0.4\n        hx0, hy0 = -pen_length/2, -pen_width/2 + highlight_width  # Bottom-left\n        hx1, hy1 = pen_length/2, -pen_width/2 + highlight_width   # Bottom-right\n        hx2, hy2 = pen_length/2, -pen_width/2 + highlight_width*2  # Top-right\n        hx3, hy3 = -pen_length/2, -pen_width/2 + highlight_width*2  # Top-left\n        \n        # Rotated corners\n        rhx0, rhy0 = rotate_point(hx0, hy0)\n        rhx1, rhy1 = rotate_point(hx1, hy1)\n        rhx2, rhy2 = rotate_point(hx2, hy2)\n        rhx3, rhy3 = rotate_point(hx3, hy3)\n        \n        # Draw highlight\n        pen_highlight = patches.Polygon(\n            [[rhx0, rhy0], [rhx1, rhy1], [rhx2, rhy2], [rhx3, rhy3]],\n            closed=True,\n            facecolor='#4e6d8c',\n            edgecolor=None,\n            alpha=0.6\n        )\n        ax.add_patch(pen_highlight)\n        \n        # Pen tip (triangle) at right end of pen\n        tip_x = pen_length/2\n        tip_width = pen_width\n        \n        # Define corners of the pen tip\n        tx0, ty0 = tip_x, -tip_width/2            # Bottom-left\n        tx1, ty1 = tip_x + tip_length, 0          # Tip\n        tx2, ty2 = tip_x, tip_width/2             # Top-left\n        \n        # Rotate points\n        rtx0, rty0 = rotate_point(tx0, ty0)\n        rtx1, rty1 = rotate_point(tx1, ty1)\n        rtx2, rty2 = rotate_point(tx2, ty2)\n        \n        # Draw pen tip with current color\n        pen_tip = patches.Polygon(\n            [[rtx0, rty0], [rtx1, rty1], [rtx2, rty2]],\n            closed=True,\n            facecolor=state['color_hex'],\n            edgecolor='#333333',\n            linewidth=1.5\n        )\n        ax.add_patch(pen_tip)\n        \n        # Pen clip (small rectangle on top of pen)\n        clip_length = pen_length * 0.3\n        clip_width = 0.25\n        clip_x = -pen_length * 0.3\n        clip_y = pen_width/2\n        \n        # Define corners of the clip\n        cx0, cy0 = clip_x, clip_y                    # Bottom-left\n        cx1, cy1 = clip_x + clip_length, clip_y      # Bottom-right\n        cx2, cy2 = clip_x + clip_length, clip_y + clip_width  # Top-right\n        cx3, cy3 = clip_x, clip_y + clip_width       # Top-left\n        \n        # Rotate points\n        rcx0, rcy0 = rotate_point(cx0, cy0)\n        rcx1, rcy1 = rotate_point(cx1, cy1)\n        rcx2, rcy2 = rotate_point(cx2, cy2)\n        rcx3, rcy3 = rotate_point(cx3, cy3)\n        \n        # Draw pen clip\n        pen_clip = patches.Polygon(\n            [[rcx0, rcy0], [rcx1, rcy1], [rcx2, rcy2], [rcx3, rcy3]],\n            closed=True,\n            facecolor='#2c3e50',\n            edgecolor='#1c2e40',\n            linewidth=1.5\n        )\n        ax.add_patch(pen_clip)\n        \n        # Horizontal divider in pen body (shows the multi-color mechanism)\n        divider_x = -pen_length * 0.1\n        \n        # Define points for the divider line\n        dx0, dy0 = divider_x, -pen_width/2\n        dx1, dy1 = divider_x, pen_width/2\n        \n        # Rotate points\n        rdx0, rdy0 = rotate_point(dx0, dy0)\n        rdx1, rdy1 = rotate_point(dx1, dy1)\n        \n        # Draw divider line\n        ax.plot([rdx0, rdx1], [rdy0, rdy1], color='#1c2e40', linewidth=2)\n        \n        # Color selector buttons on pen\n        button_radius = 0.35\n        button_x = -pen_length * 0.35\n        buttons_spacing = 0.7\n        button_colors = ['#e74c3c', '#2ecc71', '#3498db']  # Match UI buttons\n        button_names = ['Red', 'Green', 'Blue']\n        button_y = -pen_width * 0.8\n        \n        # Draw three color selector buttons\n        for i, color in enumerate(button_colors):\n            bx = button_x - i * buttons_spacing\n            rbx, rby = rotate_point(bx, button_y)\n            \n            # Highlight the selected color\n            edge_width = 3 if color.upper() == state['color_hex'].upper() else 1.5\n            edge_color = '#1c2e40' if color.upper() == state['color_hex'].upper() else '#333333'\n            \n            # Draw button with shadow effect for 3D look\n            shadow = patches.Circle(\n                (rbx+0.05, rby-0.05),\n                button_radius,\n                facecolor='#00000022',\n                zorder=1\n            )\n            ax.add_patch(shadow)\n            \n            button = patches.Circle(\n                (rbx, rby),\n                button_radius,\n                facecolor=color,\n                edgecolor=edge_color,\n                linewidth=edge_width,\n                zorder=2\n            )\n            ax.add_patch(button)\n            \n            # Add label to the button\n            if color.upper() == state['color_hex'].upper():\n                ax.text(\n                    rbx, rby - button_radius - 0.3,\n                    button_names[i],\n                    ha='center',\n                    va='center',\n                    fontsize=10,\n                    fontweight='bold',\n                    color='#333333',\n                    bbox=dict(facecolor='white', alpha=0.7, edgecolor='none', pad=2, boxstyle=\"round,pad=0.3\")\n                )\n        \n        # Create a nicer paper area with shadow\n        paper_width = 2.0\n        paper_height = 1.5\n        paper_x = -paper_width/2\n        paper_y = -10\n        \n        # Draw paper with rounded corners\n        paper_verts = [\n            (paper_x, paper_y + 0.3),                 # bottom left with radius\n            (paper_x, paper_y + paper_height - 0.3),  # top left with radius\n            (paper_x + 0.3, paper_y + paper_height),  # top left corner\n            (paper_x + paper_width - 0.3, paper_y + paper_height),  # top right corner\n            (paper_x + paper_width, paper_y + paper_height - 0.3),  # top right with radius\n            (paper_x + paper_width, paper_y + 0.3),   # bottom right with radius\n            (paper_x + paper_width - 0.3, paper_y),   # bottom right corner\n            (paper_x + 0.3, paper_y),                 # bottom left corner\n            (paper_x, paper_y + 0.3),                 # back to start\n        ]\n        \n        paper_codes = [\n            Path.MOVETO,\n            Path.LINETO,\n            Path.CURVE3,\n            Path.LINETO,\n            Path.CURVE3,\n            Path.LINETO,\n            Path.CURVE3,\n            Path.LINETO,\n            Path.CURVE3,\n        ]\n        \n        paper_path = Path(paper_verts, paper_codes)\n\n        # Add ruled lines on the paper\n        for i in range(1, 3):\n            y_pos = paper_y + (paper_height/3) * i\n\n        \n        # Add sample text in the current color\n        sample_text = \"Hello, World!\"\n        ax.text(\n            0, paper_y + paper_height/2,\n            sample_text,\n            color=state['color_hex'],\n            fontsize=24,\n            ha='center',\n            va='center',\n            fontweight='bold',\n            family='sans-serif',\n            zorder=4\n        )\n        \n        # Add indicators for the active parts\n        arrow_props = dict(\n            arrowstyle='->',\n            connectionstyle='arc3,rad=0.2',\n            linewidth=2,\n            color='#2c3e50',\n            shrinkA=5,\n            shrinkB=5\n        )\n                \n        return fig\n    \n    @render.text\n    def current_color():\n        # Return the current color name with custom styling\n        state = pen_state.get()\n        return f\"{state['color_name']}\"\n    \n    # Color change handlers\n    @reactive.Effect\n    @reactive.event(input.red_btn)\n    def change_to_red():\n        state = pen_state.get().copy()\n        state['color_name'] = 'Red'\n        state['color_hex'] = '#e74c3c'\n        pen_state.set(state)\n    \n    @reactive.Effect\n    @reactive.event(input.green_btn)\n    def change_to_green():\n        state = pen_state.get().copy()\n        state['color_name'] = 'Green'\n        state['color_hex'] = '#2ecc71'\n        pen_state.set(state)\n    \n    @reactive.Effect\n    @reactive.event(input.blue_btn)\n    def change_to_blue():\n        state = pen_state.get().copy()\n        state['color_name'] = 'Blue'\n        state['color_hex'] = '#3498db'\n        pen_state.set(state)\n    \n    # Rotation handler\n    @reactive.Effect\n    @reactive.event(input.rotate_btn)\n    def rotate_pen():\n        state = pen_state.get().copy()\n        \n        # Rotate by 45 degrees (π/4 radians)\n        state['rotation_angle'] = (state['rotation_angle'] + np.pi/4) % (2 * np.pi)\n        pen_state.set(state)\n\n# Create and run the app\napp = App(app_ui, server)\n```\n\n\n\n\n\n```{shinylive-python}\n#| standalone: true\n#| viewerHeight: 690\nimport math\nfrom shiny import App, ui, reactive, render\n\n# Define UI\napp_ui = ui.page_fluid(\n    ui.h2(\"TRIZ Universal Principle Demonstration\", style=\"text-align: center;\"),\n    ui.p(\"This shows a tool that can work as both a screwdriver and an electrical tester\", style=\"text-align: center;\"),\n    ui.div(\n        ui.input_action_button(\"screwdriver_btn\", \"Use as Screwdriver\", style=\"margin: 5px;\"),\n        ui.input_action_button(\"tester_btn\", \"Use as Electrical Tester\", style=\"margin: 5px;\"),\n        ui.input_action_button(\"reset_btn\", \"Reset\", style=\"margin: 5px;\"),\n        style=\"text-align: center; margin-bottom: 20px;\"\n    ),\n    ui.div(\n        ui.output_text(\"status_text\"),\n        style=\"text-align: center; font-weight: bold; margin: 10px; height: 30px;\"\n    ),\n    ui.div(\n        ui.output_ui(\"animation_display\"),\n        style=\"width: 600px; height: 300px; background-color: #f0f0f0; margin: 0 auto; position: relative; border: 1px solid #ccc;\"\n    )\n)\n\ndef server(input, output, session):\n    # Reactive values\n    frame = reactive.Value(0.0)           # Tracks the current animation frame\n    animation_running = reactive.Value(False)  # Controls whether animation is active\n    current_state = reactive.Value(\"idle\")     # Tracks the tool's state\n\n    # Status text\n    @output\n    @render.text\n    def status_text():\n        state = current_state.get()\n        current_frame = frame.get()\n        if state == \"idle\":\n            return \"Tool ready for use\"\n        elif state == \"screwdriver\":\n            if 5 <= current_frame < 15:\n                return \"Using as a screwdriver - Turning the screw slowly...\"\n            else:\n                return \"Using as a screwdriver\"\n        elif state == \"tester\":\n            if 5 <= current_frame < 15:\n                if int(current_frame) % 2 == 0:  # Flicker effect in text\n                    return \"Using as an electrical tester - Current detected! ⚡\"\n                else:\n                    return \"Using as an electrical tester - Testing circuit...\"\n            else:\n                return \"Using as an electrical tester\"\n\n    # Main animation display\n    @output\n    @render.ui\n    def animation_display():\n        current_frame = frame.get()\n        state = current_state.get()\n        \n        # Basic elements always shown\n        elements = []\n        \n        # Set horizontal position based on state - adjusted for proper contact\n        if state == \"screwdriver\":\n            tool_left = 152\n        elif state == \"tester\":\n            tool_left = 375  # Further adjusted to properly align with outlet\n        else:\n            tool_left = 150\n\n        # Initial vertical position; this will animate.\n        tool_top = 20  \n        # Light color - illuminate in tester mode by default\n        neon_color = \"#888888\"  # Default: off\n        if state == \"tester\":\n            neon_color = \"#FFFF00\"  # Always on in tester mode\n        \n        tool_rotate = \"rotate(0deg)\"\n        \n        if state == \"screwdriver\":\n            # Animate screw depth during rotation - more realistic with slight delay\n            screw_depth = 0\n            # Draw more realistic screw - positioned higher to be visible and reachable\n            elements.append(\n                ui.div(\n                    # Screw head\n                    ui.div(style=\"position: absolute; width: 20px; height: 6px; background-color: #444; top: 0; border-radius: 3px; box-shadow: 0 1px 2px rgba(0,0,0,0.3);\"),\n                    # Slot in screw head\n                    ui.div(style=\"position: absolute; width: 14px; height: 2px; background-color: #222; top: 2px; left: 3px;\"),\n                    # Screw shaft\n                    ui.div(style=f\"position: absolute; width: 8px; height: {20 + screw_depth}px; background-color: #666; top: 6px; left: 6px; background-image: linear-gradient(90deg, #555, #777); border-radius: 0 0 4px 4px;\"),\n                    style=f\"position: absolute; bottom: {80 + screw_depth}px; left: 157px; height: 26px; width: 20px;\"\n                )\n            )\n        \n        elif state == \"tester\":\n            # Normalize to 0-1 over 20 seconds (slower animation)\n            t = current_frame / 20\n            \n            # Make the light always on in tester mode, with flickering when touching\n            flicker_speed = current_frame * 5\n            flicker_intensity = abs(((flicker_speed % 10) - 5) / 5)\n            \n            \n            # Highly realistic electrical outlet with proper 3D effects and details\n            elements.append(\n                ui.div(\n                    # Main outlet plate with 3D effect\n                    ui.div(style=\"position: absolute; width: 70px; height: 120px; background: linear-gradient(135deg, #f5f5f5, #e0e0e0); border: 1px solid #bbb; border-radius: 8px; box-shadow: 2px 2px 5px rgba(0,0,0,0.2), inset 0 0 2px rgba(255,255,255,0.8); top: 5px; left: 5px;\"),\n      \n                    # Socket holes (top)\n                    ui.div(style=\"position: absolute; width: 8px; height: 22px; background-color: #111; top: 28px; left: 25px; border-radius: 2px; box-shadow: inset 0 0 2px rgba(0,0,0,0.8);\"),\n                    ui.div(style=\"position: absolute; width: 8px; height: 22px; background-color: #111; top: 28px; left: 47px; border-radius: 2px; box-shadow: inset 0 0 2px rgba(0,0,0,0.8);\"),\n                    \n                    # Socket holes (bottom)\n                    ui.div(style=\"position: absolute; width: 8px; height: 22px; background-color: #111; top: 78px; left: 25px; border-radius: 2px; box-shadow: inset 0 0 2px rgba(0,0,0,0.8);\"),\n                    ui.div(style=\"position: absolute; width: 8px; height: 22px; background-color: #111; top: 78px; left: 47px; border-radius: 2px; box-shadow: inset 0 0 2px rgba(0,0,0,0.8);\"),\n                    \n                    # Outlet manufacturer branding detail\n                    ui.div(style=\"position: absolute; width: 20px; height: 4px; background-color: rgba(0,0,0,0.1); top: 62px; left: 30px; border-radius: 1px;\"),\n                    \n                    style=\"position: absolute; bottom: 150px; left: 361px;\"\n                )\n            )\n        \n        # Draw the tool (common for both modes, but with more detail)\n        elements.append(\n            ui.div(\n                # Handle\n                ui.div(\n                    # Main handle body\n                    ui.div(style=\"position: absolute; width: 30px; height: 70px; background-color: #d32f2f; border-radius: 5px; background-image: linear-gradient(to right, #c62828, #d32f2f, #c62828);\"),\n                    # Handle grip texture\n                    ui.div(style=\"position: absolute; width: 24px; height: 50px; border-left: 2px dotted rgba(0,0,0,0.2); border-right: 2px dotted rgba(0,0,0,0.2); top: 10px; left: 3px;\"),\n                    # Handle top cap\n                    #ui.div(style=\"position: absolute; width: 30px; height: 5px; background-color: #b71c1c; top: 0; border-radius: 5px 5px 0 0;\"),\n                    # Handle bottom transition\n                    #ui.div(style=\"position: absolute; width: 30px; height: 5px; background-color: #b71c1c; bottom: 0; border-radius: 0 0 5px 5px;\"),\n                    #style=\"position: absolute; width: 30px; height: 70px;\"\n                ),\n                # Neon light with animated glow\n                ui.div(\n                    # Bulb\n                    ui.div(style=f\"width: 20px; height: 20px; background-color: {neon_color}; border-radius: 50%; box-shadow: 0 0 5px {neon_color};\"),\n                    # Light housing\n                    ui.div(style=\"position: absolute; width: 22px; height: 22px; border: 1px solid #999; border-radius: 50%; top: -1px; left: -1px; background-color: rgba(255,255,255,0.2);\"),\n                    style=f\"position: absolute; top: 25px; left: 5px; filter: drop-shadow(0 0 8px {neon_color});\"\n                ),\n                # Shaft with metal texture\n                ui.div(\n                    # Main shaft\n                    ui.div(style=\"position: absolute; width: 6px; height: 100px; background-color: silver; left: 0; background-image: linear-gradient(to right, #a0a0a0, #e0e0e0, #a0a0a0);\"),\n                    # Highlight reflection on shaft\n                    ui.div(style=\"position: absolute; width: 2px; height: 100px; background-color: rgba(255,255,255,0.5); left: 2px;\"),\n                    style=\"position: absolute; width: 6px; height: 100px; top: 70px; left: 12px;\"\n                ),\n                # Tip with more detailed styling\n                ui.div(\n                    # Flat tip\n                    ui.div(style=\"position: absolute; width: 10px; height: 5px; background-color: #444; top: 90; left: 90; border-radius: 9px; background-image: linear-gradient(to bottom, #666, #333);\"),\n                    # Tip edge highlight\n                    ui.div(style=\"position: absolute; width: 8px; height: 1px; background-color: rgba(255,255,255,0.3); top: 9.5px; left: 9px;\"),\n                    style=\"position: absolute; width: 90px; height: 9px; top: 166px; left: 10px;\"\n                ),\n                style=f\"position: absolute; left: {tool_left}px; top: {tool_top}px; transform: {tool_rotate}; transition: top 0.1s ease, transform 0.1s ease;\"\n            )\n        )\n        \n\n        \n        return ui.div(*elements)\n\n    # Handler for screwdriver button\n    @reactive.Effect\n    @reactive.event(input.screwdriver_btn)\n    def handle_screwdriver():\n        current_state.set(\"screwdriver\")\n        frame.set(0.0)\n        animation_running.set(True)\n\n    # Handler for tester button\n    @reactive.Effect\n    @reactive.event(input.tester_btn)\n    def handle_tester():\n        current_state.set(\"tester\")\n        frame.set(0.0)\n        animation_running.set(True)\n\n    # Handler for reset button\n    @reactive.Effect\n    @reactive.event(input.reset_btn)\n    def handle_reset():\n        current_state.set(\"idle\")\n        animation_running.set(False)\n        frame.set(0.0)\n\n# Create app\napp = App(app_ui, server)\n```","srcMarkdownNoYaml":"\n\n### Editor with app\n\nIf you want to display an editor panel with along with the running application, use `#| components: [editor, viewer]`. Users will be able to use the editor to modify the code and re-run the application.\n\n```{shinylive-python}\n#| standalone: true\n#| viewerHeight: 690\n# app.py - TRIZ Principle of Division - Fireproof Fuel Tank Demo\nfrom shiny import App, ui, render, reactive\nfrom htmltools import HTML, css\nimport random\n\n# Define CSS for the app\napp_css = \"\"\"\nbody {\n    margin: 0;\n    padding: 0;\n    font-family: Arial, sans-serif;\n    background-color: #333;\n    color: white;\n    text-align: center;\n}\n.container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    min-height: 100vh;\n    padding: 20px;\n}\nh1 {\n    margin-bottom: 30px;\n    font-size: 2.5rem;\n}\n.tanks-container {\n    display: flex;\n    justify-content: space-around;\n    width: 100%;\n    max-width: 1000px;\n    flex-wrap: wrap;\n    gap: 30px;\n    margin-bottom: 20px;\n}\n.tank-wrapper {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n.tank {\n    position: relative;\n    width: 200px;\n    height: 300px;\n    margin: 0 20px;\n    border: 3px solid #aaa;\n    border-radius: 20px;\n    overflow: hidden;\n}\n.tank-label {\n    font-weight: bold;\n    margin-bottom: 10px;\n    font-size: 1.2rem;\n}\n.liquid {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: #0c0;\n    transition: background-color 3s;\n}\n.cells-grid {\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    grid-template-rows: repeat(6, 1fr);\n    gap: 5px;\n    width: 90%;\n    height: 90%;\n    margin: 5%;\n}\n.cell {\n    background-color: #0c0;\n    border-radius: 5px;\n    transition: background-color 0.5s;\n}\n.fire {\n    background-color: #f30;\n}\n.btn-container {\n    margin-top: 40px;\n}\n.action-btn {\n    padding: 12px 24px;\n    font-size: 16px;\n    color: white;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    margin: 0 10px;\n    transition: background-color 0.3s;\n}\n#start_btn {\n    background: linear-gradient(to bottom, #ff6600, #ff3300);\n}\n#start_btn:disabled {\n    background: #cccccc;\n    cursor: not-allowed;\n}\n#reset_btn {\n    background-color: #4CAF50;\n}\n.description {\n    max-width: 600px;\n    margin: 30px auto;\n    line-height: 1.6;\n    font-size: 1rem;\n    padding: 0 20px;\n}\n.instructions {\n    margin-bottom: 20px;\n    font-style: italic;\n    color: #ddd;\n    max-width: 600px;\n    font-size: 0.9rem;\n}\n.status {\n    margin-top: 15px;\n    padding: 8px 15px;\n    border-radius: 20px;\n    background-color: rgba(255, 255, 255, 0.1);\n    display: inline-block;\n    transition: all 0.3s;\n}\n/* Responsive adjustments */\n@media (max-width: 768px) {\n    .tanks-container {\n        flex-direction: column;\n        align-items: center;\n    }\n    .tank {\n        margin: 0;\n        width: 180px;\n        height: 270px;\n    }\n    .btn-container {\n        display: flex;\n        flex-direction: column;\n        gap: 15px;\n        width: 100%;\n        max-width: 250px;\n    }\n    .action-btn {\n        margin: 0;\n        width: 100%;\n        padding: 15px 20px;\n        font-size: 18px;\n    }\n}\n\"\"\"\n\n# Generate cell divs for the divided tank\ndef generate_cells():\n    cells = []\n    for i in range(1, 25):\n        cells.append(\n            ui.div(\n                id=f\"cell-{i}\",\n                class_=\"cell\"\n            )\n        )\n    return cells\n\n# Define UI\napp_ui = ui.page_fluid(\n    # Include CSS\n    ui.tags.style(app_css),\n    \n    # Include necessary JavaScript\n    ui.tags.script(\"\"\"\n    function setFireCell(cellNumber) {\n        document.getElementById('undivided-liquid').style.backgroundColor = '#f30';\n        document.getElementById('cell-' + cellNumber).style.backgroundColor = '#f30';\n        document.getElementById('status-display').textContent = 'Fire spreading in undivided tank, contained in divided tank';\n        document.getElementById('status-display').style.backgroundColor = 'rgba(255, 100, 0, 0.2)';\n        document.getElementById('start_btn').disabled = true;\n        document.getElementById('start_btn').style.background = '#cccccc';\n        document.getElementById('start_btn').style.cursor = 'not-allowed';\n    }\n    \n    function resetSimulation() {\n        document.getElementById('undivided-liquid').style.backgroundColor = '#0c0';\n        for (let i = 1; i <= 24; i++) {\n            let cell = document.getElementById('cell-' + i);\n            if (cell) cell.style.backgroundColor = '#0c0';\n        }\n        document.getElementById('status-display').textContent = 'Ready to start simulation';\n        document.getElementById('status-display').style.backgroundColor = 'rgba(255, 255, 255, 0.1)';\n        document.getElementById('start_btn').disabled = false;\n        document.getElementById('start_btn').style.background = 'linear-gradient(to bottom, #ff6600, #ff3300)';\n        document.getElementById('start_btn').style.cursor = 'pointer';\n    }\n    \n    // Add a message handler for Python->JS communication\n    $(document).on('shiny:connected', function() {\n        Shiny.addCustomMessageHandler('simulation-action', function(message) {\n            if (message.action === 'setFire') {\n                setFireCell(message.cellNumber);\n            } else if (message.action === 'reset') {\n                resetSimulation();\n            }\n        });\n    });\n    \"\"\"),\n    \n    # Main container\n    ui.div(\n        {\"class\": \"container\"},\n        \n        # Title\n        #ui.h1(\"TRIZ Principle 1: Division\"),\n        \n        # Tanks container\n        ui.div(\n            {\"class\": \"tanks-container\"},\n            \n            # Undivided Tank\n            ui.div(\n                {\"class\": \"tank-wrapper\"},\n                ui.div({\"class\": \"tank-label\"}, \"Undivided Tank\"),\n                ui.div(\n                    {\"class\": \"tank\"},\n                    ui.div({\"id\": \"undivided-liquid\", \"class\": \"liquid\"})\n                )\n            ),\n            \n            # Divided Tank\n            ui.div(\n                {\"class\": \"tank-wrapper\"},\n                ui.div({\"class\": \"tank-label\"}, \"Divided Tank\"),\n                ui.div(\n                    {\"class\": \"tank\"},\n                    ui.div(\n                        {\"id\": \"cells-container\", \"class\": \"cells-grid\"},\n                        *generate_cells()\n                    )\n                )\n            )\n        ),\n        \n        # Instructions\n        ui.div(\n            {\"class\": \"instructions\"},\n            'Click \"Start Fire\" to simulate a fire in both tanks and observe how division prevents fire spreading'\n        ),\n        \n        # Buttons\n        ui.div(\n            {\"class\": \"btn-container\"},\n            ui.input_action_button(\"start_btn\", \"Start Fire\", class_=\"action-btn\"),\n            ui.input_action_button(\"reset_btn\", \"Reset\", class_=\"action-btn\")\n        ),\n        \n        # Status indicator\n        ui.div(\n            {\"id\": \"status-display\", \"class\": \"status\"},\n            \"Ready to start simulation\"\n        ),\n        \n        # Description\n        ui.div(\n            {\"class\": \"description\"},\n            #ui.p( )\n        )\n    )\n)\n\n# Define server logic\ndef server(input, output, session):\n    # Track fire state\n    fire_started = reactive.Value(False)\n    \n    # Handle the Start Fire button click\n    @reactive.Effect\n    @reactive.event(input.start_btn)\n    async def _():\n        if not fire_started.get():\n            fire_started.set(True)\n            # Generate random cell number\n            cell_number = random.randint(1, 24)\n            # Use session to send a message to JavaScript - with await\n            await session.send_custom_message('simulation-action', {'action': 'setFire', 'cellNumber': cell_number})\n    \n    # Handle the Reset button click\n    @reactive.Effect\n    @reactive.event(input.reset_btn)\n    async def _():\n        fire_started.set(False)\n        # Use session to send a message to JavaScript - with await\n        await session.send_custom_message('simulation-action', {'action': 'reset'})\n\n# Create the app\napp = App(app_ui, server)\n```\n\n### TRIZ Principle: Separation\n\n```{shinylive-python}\n#| standalone: true\n#| viewerHeight: 690\n# app.py - TRIZ Principle of Separation - Screwdriver with Interchangeable Bits Demo\nfrom shiny import App, ui, render, reactive\nfrom htmltools import HTML, css\nimport random\n\n# Define CSS for the app\napp_css = \"\"\"\nbody {\n    margin: 0;\n    padding: 0;\n    font-family: Arial, sans-serif;\n    background-color: #333;\n    color: white;\n    text-align: center;\n}\n.container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    min-height: 100vh;\n    padding: 20px;\n}\nh1 {\n    margin-bottom: 30px;\n    font-size: 2.5rem;\n}\n.animation-container {\n    position: relative;\n    width: 800px;\n    height: 400px;\n    background-color: #444;\n    border-radius: 10px;\n    margin-bottom: 30px;\n    box-shadow: 0 0 20px rgba(0,0,0,0.5);\n    overflow: hidden;\n}\n.btn-container {\n    display: flex;\n    justify-content: center;\n    gap: 20px;\n    margin-top: 20px;\n}\n.action-btn {\n    padding: 12px 24px;\n    font-size: 16px;\n    color: white;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    transition: background-color 0.3s;\n}\n#start_btn {\n    background: linear-gradient(to bottom, #4CAF50, #45a049);\n}\n#start_btn:disabled {\n    background: #cccccc;\n    cursor: not-allowed;\n}\n#reset_btn {\n    background-color: #f44336;\n}\n.description {\n    max-width: 600px;\n    margin: 30px auto;\n    line-height: 1.6;\n    font-size: 1rem;\n    padding: 0 20px;\n}\n.instructions {\n    margin-bottom: 20px;\n    font-style: italic;\n    color: #ddd;\n    max-width: 600px;\n    font-size: 0.9rem;\n}\n.status {\n    margin-top: 15px;\n    padding: 8px 15px;\n    border-radius: 20px;\n    background-color: rgba(255, 255, 255, 0.1);\n    display: inline-block;\n    transition: all 0.3s;\n}\n/* Screwdriver animation elements */\n#handle {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 300px;\n    height: 60px;\n    background: linear-gradient(to bottom, #999999, #dddddd, #888888, #dddddd, #999999);\n    border-radius: 30px 5px 5px 30px;\n    border: 1px solid #666666;\n}\n#handle-grip {\n    position: absolute;\n    top: 10px;\n    left: 10px;\n    width: calc(100% - 20px);\n    height: calc(100% - 20px);\n    background: linear-gradient(to bottom, #777777, #aaaaaa, #666666, #777777);\n    border-radius: 20px 0 0 20px;\n}\n#ferrule {\n    position: absolute;\n    top: 5px;\n    right: 5px;\n    width: 35px;\n    height: calc(100% - 10px);\n    background: linear-gradient(to bottom, #999999, #eeeeee, #777777, #eeeeee, #999999);\n    border-radius: 0 5px 5px 0;\n}\n.grip-line {\n    position: absolute;\n    width: 3px;\n    height: 30px;\n    background-color: #555555;\n    top: 15px;\n}\n#flathead-bit {\n    position: absolute;\n    top: 50%;\n    left: calc(50% + 150px - 120px);\n    transform: translate(0, -50%);\n    width: 120px;\n    height: 30px;\n    background: linear-gradient(to bottom, #cc3333, #ff6666, #cc0000, #ff6666, #cc3333);\n    border-radius: 0 5px 5px 0;\n    transition: left 1s ease-in-out;\n}\n#flathead-tip {\n    position: absolute;\n    top: -5px;\n    right: 0;\n    width: 15px;\n    height: 40px;\n    background: linear-gradient(to bottom, #cc3333, #ff6666, #cc0000, #ff6666, #cc3333);\n}\n#phillips-bit {\n    position: absolute;\n    top: 50%;\n    left: 900px;\n    transform: translate(0, -50%);\n    width: 120px;\n    height: 30px;\n    background: linear-gradient(to bottom, #3366cc, #6699ff, #0044cc, #6699ff, #3366cc);\n    border-radius: 0 5px 5px 0;\n    transition: left 1s ease-in-out;\n}\n#phillips-tip {\n    position: absolute;\n    top: -5px;\n    right: 0;\n    width: 15px;\n    height: 40px;\n    background: linear-gradient(to bottom, #3366cc, #6699ff, #0044cc, #6699ff, #3366cc);\n}\n.cross-horizontal {\n    position: absolute;\n    top: 18px;\n    right: 3px;\n    width: 14px;\n    height: 4px;\n    background-color: #002266;\n}\n.cross-vertical {\n    position: absolute;\n    top: 13px;\n    right: 8px;\n    width: 4px;\n    height: 14px;\n    background-color: #002266;\n}\n/* Responsive adjustments */\n@media (max-width: 850px) {\n    .animation-container {\n        width: 95%;\n        height: 300px;\n    }\n}\n\"\"\"\n\n# Define UI\napp_ui = ui.page_fluid(\n    # Include CSS\n    ui.tags.style(app_css),\n    \n    # Include necessary JavaScript for animation\n    ui.tags.script(\"\"\"\n    let animationState = 'initial';\n    let animationInProgress = false;\n    \n    function playAnimation() {\n        if (animationInProgress) return;\n        \n        animationInProgress = true;\n        document.getElementById('start_btn').disabled = true;\n        document.getElementById('start_btn').style.background = '#cccccc';\n        document.getElementById('status-display').textContent = 'Separation: Removing the flathead bit';\n        \n        // Step 1: Separate flathead bit\n        const flatheadBit = document.getElementById('flathead-bit');\n        flatheadBit.style.left = '650px';\n        \n        setTimeout(() => {\n            // Step 2: Transition\n            document.getElementById('status-display').textContent = 'Transition: Switching bits';\n            flatheadBit.style.left = '900px';\n            \n            setTimeout(() => {\n                // Step 3: Phillips bit appears\n                const phillipsBit = document.getElementById('phillips-bit');\n                phillipsBit.style.left = '650px';\n                document.getElementById('status-display').textContent = 'Reattachment: Phillips bit connecting to handle';\n                \n                setTimeout(() => {\n                    // Step 4: Phillips bit connects\n                    phillipsBit.style.left = 'calc(50% + 150px - 120px)';\n                    \n                    setTimeout(() => {\n                        // Complete\n                        document.getElementById('status-display').textContent = 'Complete: Screwdriver now has Phillips bit attached';\n                        animationInProgress = false;\n                    }, 1000);\n                }, 1000);\n            }, 1000);\n        }, 1000);\n    }\n    \n    function resetAnimation() {\n        document.getElementById('flathead-bit').style.left = 'calc(50% + 150px - 120px)';\n        document.getElementById('phillips-bit').style.left = '900px';\n        document.getElementById('status-display').textContent = 'Initial State: Flathead bit attached to handle';\n        document.getElementById('start_btn').disabled = false;\n        document.getElementById('start_btn').style.background = 'linear-gradient(to bottom, #4CAF50, #45a049)';\n        animationInProgress = false;\n    }\n    \n    // Add a message handler for Python->JS communication\n    $(document).on('shiny:connected', function() {\n        Shiny.addCustomMessageHandler('animation-action', function(message) {\n            if (message.action === 'play') {\n                playAnimation();\n            } else if (message.action === 'reset') {\n                resetAnimation();\n            }\n        });\n    });\n    \"\"\"),\n    \n    # Main container\n    ui.div(\n        {\"class\": \"container\"},\n        # Animation container\n        ui.div(\n            {\"class\": \"animation-container\"},\n            \n            # Handle\n            ui.div({\"id\": \"handle\"},\n                # Grip area\n                ui.div({\"id\": \"handle-grip\"}),\n                # Ferrule\n                ui.div({\"id\": \"ferrule\"})\n            ),\n            \n            # Grip lines\n            *[ui.div({\"class\": \"grip-line\", \"style\": f\"left: {40 + i * 30}px;\"}) for i in range(8)],\n            \n            # Flathead bit\n            ui.div({\"id\": \"flathead-bit\"},\n                ui.div({\"id\": \"flathead-tip\"})\n            ),\n            \n            # Phillips bit\n            ui.div({\"id\": \"phillips-bit\"},\n                ui.div({\"id\": \"phillips-tip\"},\n                    ui.div({\"class\": \"cross-horizontal\"}),\n                    ui.div({\"class\": \"cross-vertical\"})\n                )\n            )\n        ),\n        \n        # Status indicator\n        ui.div(\n            {\"id\": \"status-display\", \"class\": \"status\"},\n            \"Initial State: Flathead bit attached to handle\"\n        ),\n        \n        # Buttons\n        ui.div(\n            {\"class\": \"btn-container\"},\n            ui.input_action_button(\"start_btn\", \"Play Animation\", class_=\"action-btn\"),\n            ui.input_action_button(\"reset_btn\", \"Reset\", class_=\"action-btn\")\n        ),\n        \n        # Description\n        ui.div(\n            {\"class\": \"description\"},\n           \n        )\n    )\n)\n\n# Define server logic\ndef server(input, output, session):\n    # Track animation state\n    animation_playing = reactive.Value(False)\n    \n    # Handle the Play Animation button click\n    @reactive.Effect\n    @reactive.event(input.start_btn)\n    async def _():\n        if not animation_playing.get():\n            animation_playing.set(True)\n            # Send message to JavaScript\n            await session.send_custom_message('animation-action', {'action': 'play'})\n    \n    # Handle the Reset button click\n    @reactive.Effect\n    @reactive.event(input.reset_btn)\n    async def _():\n        animation_playing.set(False)\n        # Send message to JavaScript\n        await session.send_custom_message('animation-action', {'action': 'reset'})\n\n# Create the app\napp = App(app_ui, server)\n\n```\n### Editor with app\n\nIf you want to display an editor panel with along with the running application, use `#| components: [editor, viewer]`. Users will be able to use the editor to modify the code and re-run the application.\n\n```{shinylive-python}\n#| standalone: true\n#| viewerHeight: 690\nfrom shiny import App, ui, reactive, render\nimport shinyswatch\nfrom htmltools import HTML, css, tags\n\n# Define the SVG content for the pot visualization\ndef get_homogeneous_pot_svg():\n    return HTML(\"\"\"\n    <svg width=\"300\" height=\"200\" viewBox=\"0 0 300 200\" id=\"pot-svg\">\n        <!-- Homogeneous Pot -->\n        <g id=\"homogeneous-pot\">\n            <!-- Pot body -->\n            <path d=\"M80,40 L80,160 C80,180 220,180 220,160 L220,40\" fill=\"#a9a9a9\" stroke=\"#666\" stroke-width=\"2\"/>\n            \n            <!-- Pot interior - showing uniform material -->\n            <path d=\"M90,50 L90,155 C90,170 210,170 210,155 L210,50\" fill=\"none\" stroke=\"#666\" stroke-width=\"1\" stroke-dasharray=\"3,3\"/>\n            \n            <!-- Pot rim -->\n            <path d=\"M70,40 C70,30 230,30 230,40\" fill=\"#a9a9a9\" stroke=\"#666\" stroke-width=\"2\"/>\n            \n            <!-- Pot handle right -->\n            <path d=\"M220,80 C260,80 260,120 220,120\" fill=\"none\" stroke=\"#666\" stroke-width=\"5\"/>\n            \n            <!-- Label for material -->\n            <text x=\"150\" y=\"100\" text-anchor=\"middle\" fill=\"#fff\" font-weight=\"bold\">Aluminum</text>\n        </g>\n    </svg>\n    \"\"\")\n\ndef get_heterogeneous_pot_svg():\n    return HTML(\"\"\"\n    <svg width=\"300\" height=\"200\" viewBox=\"0 0 300 200\" id=\"pot-svg\">\n        <!-- Heterogeneous Pot -->\n        <g id=\"heterogeneous-pot\">\n            <!-- Pot body - same outer shape -->\n            <path d=\"M80,40 L80,160 C80,180 220,180 220,160 L220,40\" fill=\"#a9a9a9\" stroke=\"#666\" stroke-width=\"2\"/>\n            \n            <!-- Interior layers -->\n            <!-- Stainless steel inner layer -->\n            <path d=\"M90,50 L90,155 C90,170 210,170 210,155 L210,50\" fill=\"none\" stroke=\"#c0c0c0\" stroke-width=\"3\"/>\n            \n            <!-- Aluminum middle layer -->\n            <path d=\"M85,45 L85,157 C85,175 215,175 215,157 L215,45\" fill=\"none\" stroke=\"#a9a9a9\" stroke-width=\"3\"/>\n            \n            <!-- Copper outer layer -->\n            <path d=\"M80,40 L80,160 C80,180 220,180 220,160 L220,40\" fill=\"none\" stroke=\"#b87333\" stroke-width=\"3\"/>\n            \n            <!-- Pot rim -->\n            <path d=\"M70,40 C70,30 230,30 230,40\" fill=\"#c0c0c0\" stroke=\"#666\" stroke-width=\"2\"/>\n            \n            <!-- Pot handle right -->\n            <path d=\"M220,80 C260,80 260,120 220,120\" fill=\"none\" stroke=\"#666\" stroke-width=\"5\"/>\n            \n            <!-- Layer indicators inside pot -->\n            <line x1=\"100\" y1=\"70\" x2=\"120\" y2=\"70\" stroke=\"#c0c0c0\" stroke-width=\"2\"/>\n            <text x=\"125\" y=\"75\" font-size=\"12\">Stainless Steel</text>\n            \n            <line x1=\"100\" y1=\"100\" x2=\"120\" y2=\"100\" stroke=\"#a9a9a9\" stroke-width=\"2\"/>\n            <text x=\"125\" y=\"105\" font-size=\"12\">Aluminum</text>\n            \n            <line x1=\"100\" y1=\"130\" x2=\"120\" y2=\"130\" stroke=\"#b87333\" stroke-width=\"2\"/>\n            <text x=\"125\" y=\"135\" font-size=\"12\">Copper</text>\n        </g>\n    </svg>\n    \"\"\")\n\n# Custom CSS for the app\ncss_content = \"\"\"\n.container {\n    max-width: 900px;\n    margin: 0 auto;\n    background-color: white;\n    padding: 30px;\n    border-radius: 8px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\nh1 {\n    text-align: center;\n    color: #2c3e50;\n    margin-bottom: 30px;\n}\n.illustration-container {\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 30px;\n    position: relative;\n}\n.pot-container {\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    position: relative;\n}\n.layer-diagram {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 20px;\n}\n.layer {\n    width: 200px;\n    height: 40px;\n    margin: 2px 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n    font-weight: bold;\n    border-radius: 4px;\n    cursor: pointer;\n    transition: transform 0.2s, box-shadow 0.2s;\n}\n.layer:hover {\n    transform: scale(1.05);\n    box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n}\n.info-panel {\n    background-color: #f8f9fa;\n    padding: 20px;\n    border-radius: 8px;\n    margin-top: 20px;\n}\n.tooltip-content {\n    display: none;\n    position: absolute;\n    background-color: #34495e;\n    color: white;\n    padding: 10px 15px;\n    border-radius: 4px;\n    z-index: 100;\n    max-width: 250px;\n    box-shadow: 0 3px 10px rgba(0,0,0,0.2);\n}\n.layer:hover .tooltip-content {\n    display: block;\n}\n\"\"\"\n\n# Define the UI\ndef ui_content():\n    # Define the page layout with theme as a keyword argument\n    return ui.page_fluid(\n        ui.tags.head(\n            ui.tags.style(css_content),\n        ),\n        ui.div(\n            {\"class\": \"container\"},\n            ui.h1(\"Principle of Local Quality\"),\n            ui.p(\"Transform an object from a homogeneous structure to a heterogeneous one, where different parts have specialized functions.\"),\n            \n            ui.div(\n                {\"class\": \"illustration-container\"},\n                # Pot container\n                ui.div(\n                    {\"class\": \"pot-container\"},\n                    ui.output_ui(\"pot_svg\")\n                ),\n                # Layer diagram\n                ui.div(\n                    {\"class\": \"layer-diagram\"},\n                    ui.output_ui(\"layer_diagram\")\n                )\n            ),\n            \n            ui.div(\n                {\"class\": \"control-panel\", \"style\": \"text-align: center; margin: 20px 0;\"},\n                ui.input_action_button(\n                    \"toggle_button\", \n                    \"Apply Local Quality Principle\", \n                    class_=\"btn-primary\"\n                )\n            ),\n            \n            ui.div(\n                {\"class\": \"info-panel\"},\n                ui.h3(ui.output_text(\"info_title\")),\n                ui.output_ui(\"info_text\")\n            )\n        ),\n        theme=shinyswatch.theme.cosmo()\n    )\n\n# Define the server\ndef server(input, output, session):\n    # Reactive value to track the current state\n    is_heterogeneous = reactive.Value(False)\n    \n    # Handler for the toggle button\n    @reactive.Effect\n    @reactive.event(input.toggle_button)\n    def _():\n        current_state = is_heterogeneous.get()\n        is_heterogeneous.set(not current_state)\n        \n        # Update the button text\n        if not current_state:\n            ui.update_action_button(\n                \"toggle_button\", \n                label=\"Return to Homogeneous Structure\"\n            )\n        else:\n            ui.update_action_button(\n                \"toggle_button\", \n                label=\"Apply Local Quality Principle\"\n            )\n    \n    # Render the pot SVG based on the current state\n    @output\n    @render.ui\n    def pot_svg():\n        if is_heterogeneous.get():\n            return get_heterogeneous_pot_svg()\n        else:\n            return get_homogeneous_pot_svg()\n    \n    # Render the layer diagram based on the current state\n    @output\n    @render.ui\n    def layer_diagram():\n        if is_heterogeneous.get():\n            return ui.div(\n                ui.div(\n                    {\"class\": \"layer\", \"style\": \"background-color: #c0c0c0;\"},\n                    \"Stainless Steel\",\n                    ui.div(\n                        {\"class\": \"tooltip-content\"},\n                        \"Non-reactive and easy-to-clean surface for food safety\"\n                    )\n                ),\n                ui.div(\n                    {\"class\": \"layer\", \"style\": \"background-color: #a9a9a9;\"},\n                    \"Aluminum\",\n                    ui.div(\n                        {\"class\": \"tooltip-content\"},\n                        \"Distributes heat evenly throughout the pot to prevent hot spots\"\n                    )\n                ),\n                ui.div(\n                    {\"class\": \"layer\", \"style\": \"background-color: #b87333;\"},\n                    \"Copper\",\n                    ui.div(\n                        {\"class\": \"tooltip-content\"},\n                        \"Excellent heat conductor for quick and efficient heating from the bottom\"\n                    )\n                )\n            )\n        else:\n            return ui.div(\n                ui.div(\n                    {\"class\": \"layer\", \"style\": \"background-color: #a9a9a9;\"},\n                    \"Aluminum\"\n                )\n            )\n    \n    # Render the info title based on the current state\n    @output\n    @render.text\n    def info_title():\n        if is_heterogeneous.get():\n            return \"Enhanced Pot: Heterogeneous Structure\"\n        else:\n            return \"Standard Pot: Homogeneous Structure\"\n    \n    # Render the info text based on the current state\n    @output\n    @render.ui\n    def info_text():\n        if is_heterogeneous.get():\n            return ui.HTML(\n                \"\"\"This pot has specialized layers for improved functionality. \n                <strong>Pros:</strong> Copper bottom for quick heating, aluminum middle \n                for even heat distribution, and stainless steel interior for non-reactive \n                cooking surface. <strong>Cons:</strong> More complex to manufacture.\"\"\"\n            )\n        else:\n            return ui.HTML(\n                \"\"\"This pot has a uniform aluminum structure. <strong>Pros:</strong> Simple design, \n                even heat distribution. <strong>Cons:</strong> May react with acidic foods, \n                wear out faster, and doesn't optimize heating efficiency.\"\"\"\n            )\n\n# Create the app\napp = App(ui_content(), server)\n```\n\n\n```{shinylive-python}\n#| standalone: true\n#| viewerHeight: 690\nfrom shiny import App, ui, reactive, render\nimport asyncio\n\n# Define CSS\napp_css = \"\"\"\nbody {\n    margin: 0;\n    padding: 0;\n    font-family: Arial, sans-serif;\n    background-color: #f0f0f0;\n    color: #333;\n    text-align: center;\n}\n.container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    padding: 20px;\n}\nh1 {\n    margin-bottom: 20px;\n    font-size: 2rem;\n    color: #333;\n}\n.description {\n    max-width: 700px;\n    margin: 0 auto 30px;\n    line-height: 1.5;\n    color: #555;\n    font-size: 1rem;\n}\n.animation-container {\n    position: relative;\n    width: 700px;\n    height: 400px;\n    background-color: #e0e0e0;\n    border-radius: 10px;\n    margin-bottom: 30px;\n    box-shadow: 0 0 10px rgba(0,0,0,0.2);\n    overflow: hidden;\n}\n.btn-container {\n    display: flex;\n    justify-content: center;\n    gap: 20px;\n    margin-bottom: 20px;\n}\n.action-btn {\n    padding: 10px 15px;\n    font-size: 16px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    transition: background-color 0.3s;\n}\n.drill-btn {\n    background-color: #4CAF50;\n    color: white;\n}\n.drill-btn:hover {\n    background-color: #45a049;\n}\n.drill-btn:disabled {\n    background-color: #cccccc;\n    cursor: not-allowed;\n}\n.reset-btn {\n    background-color: #888;\n    color: white;\n}\n.reset-btn:hover {\n    background-color: #777;\n}\n.ground {\n    position: absolute;\n    bottom: 0;\n    width: 100%;\n    height: 2px;\n    background-color: #777777;\n}\n.slab {\n    position: absolute;\n    width: 200px;\n    height: 60px;\n    bottom: 2px;\n    background-color: #a0a0a0;\n    border: 2px solid #333333;\n    z-index: 5;\n}\n.left-slab {\n    left: 150px;\n}\n.right-slab {\n    left: 450px;\n}\n.hole {\n    position: absolute;\n    background-color: #555555;\n    box-shadow: inset 0 0 15px rgba(0, 0, 0, 0.7);\n    opacity: 0;\n    transition: opacity 0.5s ease;\n    z-index: 10;\n}\n.round-hole {\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    left: 230px;\n    bottom: 12px;\n}\n.square-hole {\n    width: 40px;\n    height: 40px;\n    left: 530px;\n    bottom: 12px;\n}\n.drill {\n    position: absolute;\n    width: 40px;\n    height: 120px;\n    background-color: #333333;\n    top: 100px;\n    transition: top 1s ease;\n}\n.left-drill {\n    left: 230px;\n}\n.right-drill {\n    left: 530px;\n}\n.drill-handle {\n    position: absolute;\n    top: 20px;\n    right: -15px;\n    width: 15px;\n    height: 30px;\n    background-color: #333333;\n}\n.drill-button {\n    position: absolute;\n    top: 25px;\n    right: -7px;\n    width: 10px;\n    height: 10px;\n    border-radius: 50%;\n    background-color: #ff0000;\n}\n.drill-bit {\n    position: absolute;\n    bottom: -30px;\n    left: 10px;\n    width: 20px;\n    height: 30px;\n    transition: transform 0.1s ease;\n}\n.round-bit {\n    background-color: #666666;\n    clip-path: polygon(0 0, 100% 0, 50% 100%);\n}\n.square-bit {\n    background-color: #666666;\n}\n.label {\n    position: absolute;\n    text-align: center;\n    font-size: 14px;\n    color: #000000;\n}\n.top-label {\n    width: 200px;\n    top: 80px;\n}\n.bottom-label {\n    width: 200px;\n    bottom: -25px;\n}\n.left-top-label {\n    left: 150px;\n}\n.right-top-label {\n    left: 450px;\n}\n.left-bottom-label {\n    left: 150px;\n}\n.right-bottom-label {\n    left: 450px;\n}\n@keyframes vibrate {\n    0% { transform: translateX(0); }\n    25% { transform: translateX(-2px); }\n    50% { transform: translateX(0); }\n    75% { transform: translateX(2px); }\n    100% { transform: translateX(0); }\n}\n.vibrate {\n    animation: vibrate 0.1s infinite;\n}\n.vibrate-strong {\n    animation: vibrate 0.05s infinite;\n}\n\"\"\"\n\n# Define JavaScript\napp_js = \"\"\"\nlet leftDrilling = false;\nlet rightDrilling = false;\nlet leftHasHole = false;\nlet rightHasHole = false;\n\nfunction drillRoundHole() {\n    if (leftDrilling) return;\n    \n    leftDrilling = true;\n    document.getElementById('traditional_btn').disabled = true;\n    \n    // Move drill down\n    const leftDrill = document.getElementById('left-drill');\n    leftDrill.style.top = '220px';\n    \n    // Add vibration effect\n    setTimeout(() => {\n        leftDrill.classList.add('vibrate');\n        const leftBit = document.getElementById('left-bit');\n        leftBit.classList.add('vibrate');\n        \n        // Create hole after delay\n        setTimeout(() => {\n            const hole = document.getElementById('round-hole');\n            hole.style.opacity = '1';\n            leftHasHole = true;\n            \n            // Move drill back up\n            setTimeout(() => {\n                leftDrill.classList.remove('vibrate');\n                leftBit.classList.remove('vibrate');\n                leftDrill.style.top = '100px';\n                \n                // Re-enable button after animation completes\n                setTimeout(() => {\n                    leftDrilling = false;\n                    document.getElementById('traditional_btn').disabled = false;\n                }, 1000);\n            }, 500);\n        }, 1000);\n    }, 1000);\n}\n\nfunction drillSquareHole() {\n    if (rightDrilling) return;\n    \n    rightDrilling = true;\n    document.getElementById('special_btn').disabled = true;\n    \n    // Move drill down\n    const rightDrill = document.getElementById('right-drill');\n    rightDrill.style.top = '220px';\n    \n    // Add vibration effect (stronger for special drill)\n    setTimeout(() => {\n        rightDrill.classList.add('vibrate-strong');\n        const rightBit = document.getElementById('right-bit');\n        rightBit.classList.add('vibrate-strong');\n        \n        // Create hole after delay\n        setTimeout(() => {\n            const hole = document.getElementById('square-hole');\n            hole.style.opacity = '1';\n            rightHasHole = true;\n            \n            // Move drill back up\n            setTimeout(() => {\n                rightDrill.classList.remove('vibrate-strong');\n                rightBit.classList.remove('vibrate-strong');\n                rightDrill.style.top = '100px';\n                \n                // Re-enable button after animation completes\n                setTimeout(() => {\n                    rightDrilling = false;\n                    document.getElementById('special_btn').disabled = false;\n                }, 1000);\n            }, 500);\n        }, 1000);\n    }, 1000);\n}\n\nfunction resetScene() {\n    // Reset holes\n    document.getElementById('round-hole').style.opacity = '0';\n    document.getElementById('square-hole').style.opacity = '0';\n    \n    // Reset drills position\n    document.getElementById('left-drill').style.top = '100px';\n    document.getElementById('right-drill').style.top = '100px';\n    \n    // Remove vibration effects\n    document.getElementById('left-drill').classList.remove('vibrate');\n    document.getElementById('right-drill').classList.remove('vibrate-strong');\n    document.getElementById('left-bit').classList.remove('vibrate');\n    document.getElementById('right-bit').classList.remove('vibrate-strong');\n    \n    // Reset state\n    leftDrilling = false;\n    rightDrilling = false;\n    leftHasHole = false;\n    rightHasHole = false;\n    \n    // Enable buttons\n    document.getElementById('traditional_btn').disabled = false;\n    document.getElementById('special_btn').disabled = false;\n}\n\n// Add a message handler for Python->JS communication\n$(document).on('shiny:connected', function() {\n    Shiny.addCustomMessageHandler('animation-action', function(message) {\n        if (message.action === 'drill-round') {\n            drillRoundHole();\n        } else if (message.action === 'drill-square') {\n            drillSquareHole();\n        } else if (message.action === 'reset') {\n            resetScene();\n        }\n    });\n});\n\"\"\"\n\n# Define UI\napp_ui = ui.page_fluid(\n    # Include CSS and JavaScript\n    ui.tags.style(app_css),\n    ui.tags.script(app_js),\n    \n    # Main container\n    ui.div(\n        {\"class\": \"container\"},\n        ui.h1(\"TRIZ Anti-Asymmetry Principle\"),\n        ui.p(\n            \"This visualization demonstrates the TRIZ principle of \\\"Anti-(Asymmetry)\\\" using drills as an example. \"\n            \"The traditional drill (left) creates round holes, while the special hand-held drill (right) creates square holes in concrete slabs.\",\n            class_=\"description\"\n        ),\n        \n        # Buttons\n        ui.div(\n            {\"class\": \"btn-container\"},\n            ui.input_action_button(\"traditional_btn\", \"Drill Round Hole\", class_=\"action-btn drill-btn\"),\n            ui.input_action_button(\"special_btn\", \"Drill Square Hole\", class_=\"action-btn drill-btn\"),\n            ui.input_action_button(\"reset_btn\", \"Reset\", class_=\"action-btn reset-btn\")\n        ),\n        \n        # Animation container\n        ui.div(\n            {\"class\": \"animation-container\"},\n            \n            # Ground line\n            ui.div({\"class\": \"ground\"}),\n            \n            # Concrete slabs\n            ui.div({\"class\": \"slab left-slab\"}),\n            ui.div({\"class\": \"slab right-slab\"}),\n            \n            # Holes\n            ui.div({\"id\": \"round-hole\", \"class\": \"hole round-hole\"}),\n            ui.div({\"id\": \"square-hole\", \"class\": \"hole square-hole\"}),\n            \n            # Left drill (traditional)\n            ui.div(\n                {\"id\": \"left-drill\", \"class\": \"drill left-drill\"},\n                ui.div({\"class\": \"drill-handle\"}),\n                ui.div({\"class\": \"drill-button\"}),\n                ui.div({\"id\": \"left-bit\", \"class\": \"drill-bit round-bit\"})\n            ),\n            \n            # Right drill (special)\n            ui.div(\n                {\"id\": \"right-drill\", \"class\": \"drill right-drill\"},\n                ui.div({\"class\": \"drill-handle\"}),\n                ui.div({\"class\": \"drill-button\"}),\n                ui.div({\"id\": \"right-bit\", \"class\": \"drill-bit square-bit\"})\n            ),\n            \n            # Labels\n            ui.div({\"class\": \"label top-label left-top-label\"}, \"Traditional Drill\"),\n            ui.div({\"class\": \"label top-label right-top-label\"}, \"Special Drill with Vibrator\"),\n            ui.div({\"class\": \"label bottom-label left-bottom-label\"}, \"Round Hole\"),\n            ui.div({\"class\": \"label bottom-label right-bottom-label\"}, \"Square Hole\")\n        )\n    )\n)\n\n# Define server logic\ndef server(input, output, session):\n    # Handle the traditional drill button click\n    @reactive.Effect\n    @reactive.event(input.traditional_btn)\n    async def handle_traditional_drill():\n        await session.send_custom_message('animation-action', {'action': 'drill-round'})\n    \n    # Handle the special drill button click\n    @reactive.Effect\n    @reactive.event(input.special_btn)\n    async def handle_special_drill():\n        await session.send_custom_message('animation-action', {'action': 'drill-square'})\n    \n    # Handle the reset button click\n    @reactive.Effect\n    @reactive.event(input.reset_btn)\n    async def handle_reset():\n        await session.send_custom_message('animation-action', {'action': 'reset'})\n\n# Create the app\napp = App(app_ui, server)\n\n```\n\n\n\n\n\n\n\n\n\n\n```{shinylive-python}\n#| standalone: true\n#| viewerHeight: 690\nfrom shiny import App, ui, render, reactive\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport numpy as np\nimport matplotlib\nfrom matplotlib.path import Path\n\n# Set better fonts for improved text rendering\nmatplotlib.rcParams['font.family'] = 'sans-serif'\nmatplotlib.rcParams['font.sans-serif'] = ['Arial', 'Helvetica', 'DejaVu Sans']\nmatplotlib.rcParams['font.size'] = 12\nmatplotlib.rcParams['axes.titlesize'] = 16\nmatplotlib.rcParams['figure.titlesize'] = 18\n\n# Define the app UI with enhanced styling\napp_ui = ui.page_fluid(\n    ui.tags.style(\"\"\"\n        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');\n        \n        body {\n            font-family: 'Poppins', sans-serif;\n            background-color: #f5f7fa;\n            color: #333;\n            line-height: 1.6;\n        }\n        \n        h1 {\n            color: #2c3e50;\n            font-weight: 600;\n            margin-bottom: 20px;\n            border-bottom: 2px solid #3498db;\n            padding-bottom: 10px;\n        }\n        \n        h4 {\n            color: #2c3e50;\n            font-weight: 500;\n            margin-top: 20px;\n        }\n        \n        .container-fluid {\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        \n        .control-panel {\n            background-color: white;\n            border-radius: 12px;\n            box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n            padding: 25px;\n            margin-bottom: 20px;\n        }\n        \n        .plot-container {\n            background-color: white;\n            border-radius: 12px;\n            box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n            overflow: hidden;\n            margin-bottom: 20px;\n        }\n        \n        .btn {\n            border-radius: 8px;\n            font-weight: 500;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n            margin-bottom: 15px;\n            padding: 10px 0;\n            transition: all 0.3s ease;\n        }\n        \n        .btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n        }\n        \n        .btn-danger {\n            background-color: #e74c3c;\n            border-color: #e74c3c;\n        }\n        \n        .btn-success {\n            background-color: #2ecc71;\n            border-color: #2ecc71;\n        }\n        \n        .btn-primary {\n            background-color: #3498db;\n            border-color: #3498db;\n        }\n        \n        .btn-secondary {\n            background-color: #7f8c8d;\n            border-color: #7f8c8d;\n        }\n        \n        .color-display {\n            font-size: 24px;\n            font-weight: 600;\n            text-align: center;\n            margin: 15px 0;\n            padding: 10px;\n            border-radius: 8px;\n            background-color: #f8f9fa;\n        }\n        \n        hr {\n            border-color: #eee;\n            margin: 25px 0;\n        }\n        \n        .app-description {\n            background-color: white;\n            border-radius: 12px;\n            padding: 20px;\n            margin-bottom: 20px;\n            box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n            font-size: 16px;\n            line-height: 1.6;\n        }\n    \"\"\"),\n    ui.row(\n        ui.column(3,\n            ui.div(\n                ui.input_action_button(\"red_btn\", \"Red Ink\", class_=\"btn-danger\", width=\"100%\"),\n                ui.input_action_button(\"green_btn\", \"Green Ink\", class_=\"btn-success\", width=\"100%\"),\n                ui.input_action_button(\"blue_btn\", \"Blue Ink\", class_=\"btn-primary\", width=\"100%\"),\n                ui.input_action_button(\"rotate_btn\", \"Rotate Pen\", class_=\"btn-secondary\", width=\"100%\"),\n                class_=\"control-panel\"\n            )\n        ),\n        ui.column(9,\n            ui.div(\n                ui.output_plot(\"pen_plot\", height=\"600px\", width=\"100%\"),\n                class_=\"plot-container\"\n            )\n        )\n    )\n)\n\n# Define the server logic\ndef server(input, output, session):\n    # State variables\n    pen_state = reactive.Value({\n        'color_name': 'Red',\n        'color_hex': '#e74c3c',\n        'rotation_angle': 0\n    })\n\n    # Drawing function\n    @render.plot\n    def pen_plot():\n        # Get current state\n        state = pen_state.get()\n        \n        # Create figure and axis with a larger figure size for better visibility\n        plt.style.use('ggplot')\n        fig, ax = plt.subplots(figsize=(14, 10))\n        \n        # Set up plot with more room\n        ax.set_xlim(-10, 10)\n        ax.set_ylim(-7, 7)\n        ax.set_aspect('equal')\n        ax.set_facecolor('#f8f9fa')\n        \n        # Remove axes\n        ax.set_xticks([])\n        ax.set_yticks([])\n        for spine in ax.spines.values():\n            spine.set_visible(False)\n        \n        # Add a nice background rectangle\n        background = patches.Rectangle(\n            (-10, -7), 20, 14,\n            linewidth=0,\n            facecolor='#ffffff',\n            zorder=-2\n        )\n        ax.add_patch(background)\n                \n        # Define the rotation angle (in radians)\n        angle = state['rotation_angle']\n        \n        # Pen dimensions\n        pen_length = 8.0\n        pen_width = 1.0\n        tip_length = 1.5\n        \n        # Create a transform for rotation\n        cos_ang = np.cos(angle)\n        sin_ang = np.sin(angle)\n        \n        # Rotate point function\n        def rotate_point(x, y):\n            return x * cos_ang - y * sin_ang, x * sin_ang + y * cos_ang\n        \n        # Draw pen body with gradient effect\n        body_color = '#34495e'  # Darker blue-gray\n        \n        # Define corners of the pen body\n        x0, y0 = -pen_length/2, -pen_width/2  # Bottom-left\n        x1, y1 = pen_length/2, -pen_width/2   # Bottom-right\n        x2, y2 = pen_length/2, pen_width/2    # Top-right\n        x3, y3 = -pen_length/2, pen_width/2   # Top-left\n        \n        # Rotated corners\n        rx0, ry0 = rotate_point(x0, y0)\n        rx1, ry1 = rotate_point(x1, y1)\n        rx2, ry2 = rotate_point(x2, y2)\n        rx3, ry3 = rotate_point(x3, y3)\n        \n        # Draw pen body\n        pen_body = patches.Polygon(\n            [[rx0, ry0], [rx1, ry1], [rx2, ry2], [rx3, ry3]],\n            closed=True,\n            facecolor=body_color,\n            edgecolor='#2c3e50',\n            linewidth=1.5\n        )\n        ax.add_patch(pen_body)\n        \n        # Add highlight to pen body for 3D effect\n        highlight_width = pen_width * 0.4\n        hx0, hy0 = -pen_length/2, -pen_width/2 + highlight_width  # Bottom-left\n        hx1, hy1 = pen_length/2, -pen_width/2 + highlight_width   # Bottom-right\n        hx2, hy2 = pen_length/2, -pen_width/2 + highlight_width*2  # Top-right\n        hx3, hy3 = -pen_length/2, -pen_width/2 + highlight_width*2  # Top-left\n        \n        # Rotated corners\n        rhx0, rhy0 = rotate_point(hx0, hy0)\n        rhx1, rhy1 = rotate_point(hx1, hy1)\n        rhx2, rhy2 = rotate_point(hx2, hy2)\n        rhx3, rhy3 = rotate_point(hx3, hy3)\n        \n        # Draw highlight\n        pen_highlight = patches.Polygon(\n            [[rhx0, rhy0], [rhx1, rhy1], [rhx2, rhy2], [rhx3, rhy3]],\n            closed=True,\n            facecolor='#4e6d8c',\n            edgecolor=None,\n            alpha=0.6\n        )\n        ax.add_patch(pen_highlight)\n        \n        # Pen tip (triangle) at right end of pen\n        tip_x = pen_length/2\n        tip_width = pen_width\n        \n        # Define corners of the pen tip\n        tx0, ty0 = tip_x, -tip_width/2            # Bottom-left\n        tx1, ty1 = tip_x + tip_length, 0          # Tip\n        tx2, ty2 = tip_x, tip_width/2             # Top-left\n        \n        # Rotate points\n        rtx0, rty0 = rotate_point(tx0, ty0)\n        rtx1, rty1 = rotate_point(tx1, ty1)\n        rtx2, rty2 = rotate_point(tx2, ty2)\n        \n        # Draw pen tip with current color\n        pen_tip = patches.Polygon(\n            [[rtx0, rty0], [rtx1, rty1], [rtx2, rty2]],\n            closed=True,\n            facecolor=state['color_hex'],\n            edgecolor='#333333',\n            linewidth=1.5\n        )\n        ax.add_patch(pen_tip)\n        \n        # Pen clip (small rectangle on top of pen)\n        clip_length = pen_length * 0.3\n        clip_width = 0.25\n        clip_x = -pen_length * 0.3\n        clip_y = pen_width/2\n        \n        # Define corners of the clip\n        cx0, cy0 = clip_x, clip_y                    # Bottom-left\n        cx1, cy1 = clip_x + clip_length, clip_y      # Bottom-right\n        cx2, cy2 = clip_x + clip_length, clip_y + clip_width  # Top-right\n        cx3, cy3 = clip_x, clip_y + clip_width       # Top-left\n        \n        # Rotate points\n        rcx0, rcy0 = rotate_point(cx0, cy0)\n        rcx1, rcy1 = rotate_point(cx1, cy1)\n        rcx2, rcy2 = rotate_point(cx2, cy2)\n        rcx3, rcy3 = rotate_point(cx3, cy3)\n        \n        # Draw pen clip\n        pen_clip = patches.Polygon(\n            [[rcx0, rcy0], [rcx1, rcy1], [rcx2, rcy2], [rcx3, rcy3]],\n            closed=True,\n            facecolor='#2c3e50',\n            edgecolor='#1c2e40',\n            linewidth=1.5\n        )\n        ax.add_patch(pen_clip)\n        \n        # Horizontal divider in pen body (shows the multi-color mechanism)\n        divider_x = -pen_length * 0.1\n        \n        # Define points for the divider line\n        dx0, dy0 = divider_x, -pen_width/2\n        dx1, dy1 = divider_x, pen_width/2\n        \n        # Rotate points\n        rdx0, rdy0 = rotate_point(dx0, dy0)\n        rdx1, rdy1 = rotate_point(dx1, dy1)\n        \n        # Draw divider line\n        ax.plot([rdx0, rdx1], [rdy0, rdy1], color='#1c2e40', linewidth=2)\n        \n        # Color selector buttons on pen\n        button_radius = 0.35\n        button_x = -pen_length * 0.35\n        buttons_spacing = 0.7\n        button_colors = ['#e74c3c', '#2ecc71', '#3498db']  # Match UI buttons\n        button_names = ['Red', 'Green', 'Blue']\n        button_y = -pen_width * 0.8\n        \n        # Draw three color selector buttons\n        for i, color in enumerate(button_colors):\n            bx = button_x - i * buttons_spacing\n            rbx, rby = rotate_point(bx, button_y)\n            \n            # Highlight the selected color\n            edge_width = 3 if color.upper() == state['color_hex'].upper() else 1.5\n            edge_color = '#1c2e40' if color.upper() == state['color_hex'].upper() else '#333333'\n            \n            # Draw button with shadow effect for 3D look\n            shadow = patches.Circle(\n                (rbx+0.05, rby-0.05),\n                button_radius,\n                facecolor='#00000022',\n                zorder=1\n            )\n            ax.add_patch(shadow)\n            \n            button = patches.Circle(\n                (rbx, rby),\n                button_radius,\n                facecolor=color,\n                edgecolor=edge_color,\n                linewidth=edge_width,\n                zorder=2\n            )\n            ax.add_patch(button)\n            \n            # Add label to the button\n            if color.upper() == state['color_hex'].upper():\n                ax.text(\n                    rbx, rby - button_radius - 0.3,\n                    button_names[i],\n                    ha='center',\n                    va='center',\n                    fontsize=10,\n                    fontweight='bold',\n                    color='#333333',\n                    bbox=dict(facecolor='white', alpha=0.7, edgecolor='none', pad=2, boxstyle=\"round,pad=0.3\")\n                )\n        \n        # Create a nicer paper area with shadow\n        paper_width = 2.0\n        paper_height = 1.5\n        paper_x = -paper_width/2\n        paper_y = -10\n        \n        # Draw paper with rounded corners\n        paper_verts = [\n            (paper_x, paper_y + 0.3),                 # bottom left with radius\n            (paper_x, paper_y + paper_height - 0.3),  # top left with radius\n            (paper_x + 0.3, paper_y + paper_height),  # top left corner\n            (paper_x + paper_width - 0.3, paper_y + paper_height),  # top right corner\n            (paper_x + paper_width, paper_y + paper_height - 0.3),  # top right with radius\n            (paper_x + paper_width, paper_y + 0.3),   # bottom right with radius\n            (paper_x + paper_width - 0.3, paper_y),   # bottom right corner\n            (paper_x + 0.3, paper_y),                 # bottom left corner\n            (paper_x, paper_y + 0.3),                 # back to start\n        ]\n        \n        paper_codes = [\n            Path.MOVETO,\n            Path.LINETO,\n            Path.CURVE3,\n            Path.LINETO,\n            Path.CURVE3,\n            Path.LINETO,\n            Path.CURVE3,\n            Path.LINETO,\n            Path.CURVE3,\n        ]\n        \n        paper_path = Path(paper_verts, paper_codes)\n\n        # Add ruled lines on the paper\n        for i in range(1, 3):\n            y_pos = paper_y + (paper_height/3) * i\n\n        \n        # Add sample text in the current color\n        sample_text = \"Hello, World!\"\n        ax.text(\n            0, paper_y + paper_height/2,\n            sample_text,\n            color=state['color_hex'],\n            fontsize=24,\n            ha='center',\n            va='center',\n            fontweight='bold',\n            family='sans-serif',\n            zorder=4\n        )\n        \n        # Add indicators for the active parts\n        arrow_props = dict(\n            arrowstyle='->',\n            connectionstyle='arc3,rad=0.2',\n            linewidth=2,\n            color='#2c3e50',\n            shrinkA=5,\n            shrinkB=5\n        )\n                \n        return fig\n    \n    @render.text\n    def current_color():\n        # Return the current color name with custom styling\n        state = pen_state.get()\n        return f\"{state['color_name']}\"\n    \n    # Color change handlers\n    @reactive.Effect\n    @reactive.event(input.red_btn)\n    def change_to_red():\n        state = pen_state.get().copy()\n        state['color_name'] = 'Red'\n        state['color_hex'] = '#e74c3c'\n        pen_state.set(state)\n    \n    @reactive.Effect\n    @reactive.event(input.green_btn)\n    def change_to_green():\n        state = pen_state.get().copy()\n        state['color_name'] = 'Green'\n        state['color_hex'] = '#2ecc71'\n        pen_state.set(state)\n    \n    @reactive.Effect\n    @reactive.event(input.blue_btn)\n    def change_to_blue():\n        state = pen_state.get().copy()\n        state['color_name'] = 'Blue'\n        state['color_hex'] = '#3498db'\n        pen_state.set(state)\n    \n    # Rotation handler\n    @reactive.Effect\n    @reactive.event(input.rotate_btn)\n    def rotate_pen():\n        state = pen_state.get().copy()\n        \n        # Rotate by 45 degrees (π/4 radians)\n        state['rotation_angle'] = (state['rotation_angle'] + np.pi/4) % (2 * np.pi)\n        pen_state.set(state)\n\n# Create and run the app\napp = App(app_ui, server)\n```\n\n\n\n\n\n```{shinylive-python}\n#| standalone: true\n#| viewerHeight: 690\nimport math\nfrom shiny import App, ui, reactive, render\n\n# Define UI\napp_ui = ui.page_fluid(\n    ui.h2(\"TRIZ Universal Principle Demonstration\", style=\"text-align: center;\"),\n    ui.p(\"This shows a tool that can work as both a screwdriver and an electrical tester\", style=\"text-align: center;\"),\n    ui.div(\n        ui.input_action_button(\"screwdriver_btn\", \"Use as Screwdriver\", style=\"margin: 5px;\"),\n        ui.input_action_button(\"tester_btn\", \"Use as Electrical Tester\", style=\"margin: 5px;\"),\n        ui.input_action_button(\"reset_btn\", \"Reset\", style=\"margin: 5px;\"),\n        style=\"text-align: center; margin-bottom: 20px;\"\n    ),\n    ui.div(\n        ui.output_text(\"status_text\"),\n        style=\"text-align: center; font-weight: bold; margin: 10px; height: 30px;\"\n    ),\n    ui.div(\n        ui.output_ui(\"animation_display\"),\n        style=\"width: 600px; height: 300px; background-color: #f0f0f0; margin: 0 auto; position: relative; border: 1px solid #ccc;\"\n    )\n)\n\ndef server(input, output, session):\n    # Reactive values\n    frame = reactive.Value(0.0)           # Tracks the current animation frame\n    animation_running = reactive.Value(False)  # Controls whether animation is active\n    current_state = reactive.Value(\"idle\")     # Tracks the tool's state\n\n    # Status text\n    @output\n    @render.text\n    def status_text():\n        state = current_state.get()\n        current_frame = frame.get()\n        if state == \"idle\":\n            return \"Tool ready for use\"\n        elif state == \"screwdriver\":\n            if 5 <= current_frame < 15:\n                return \"Using as a screwdriver - Turning the screw slowly...\"\n            else:\n                return \"Using as a screwdriver\"\n        elif state == \"tester\":\n            if 5 <= current_frame < 15:\n                if int(current_frame) % 2 == 0:  # Flicker effect in text\n                    return \"Using as an electrical tester - Current detected! ⚡\"\n                else:\n                    return \"Using as an electrical tester - Testing circuit...\"\n            else:\n                return \"Using as an electrical tester\"\n\n    # Main animation display\n    @output\n    @render.ui\n    def animation_display():\n        current_frame = frame.get()\n        state = current_state.get()\n        \n        # Basic elements always shown\n        elements = []\n        \n        # Set horizontal position based on state - adjusted for proper contact\n        if state == \"screwdriver\":\n            tool_left = 152\n        elif state == \"tester\":\n            tool_left = 375  # Further adjusted to properly align with outlet\n        else:\n            tool_left = 150\n\n        # Initial vertical position; this will animate.\n        tool_top = 20  \n        # Light color - illuminate in tester mode by default\n        neon_color = \"#888888\"  # Default: off\n        if state == \"tester\":\n            neon_color = \"#FFFF00\"  # Always on in tester mode\n        \n        tool_rotate = \"rotate(0deg)\"\n        \n        if state == \"screwdriver\":\n            # Animate screw depth during rotation - more realistic with slight delay\n            screw_depth = 0\n            # Draw more realistic screw - positioned higher to be visible and reachable\n            elements.append(\n                ui.div(\n                    # Screw head\n                    ui.div(style=\"position: absolute; width: 20px; height: 6px; background-color: #444; top: 0; border-radius: 3px; box-shadow: 0 1px 2px rgba(0,0,0,0.3);\"),\n                    # Slot in screw head\n                    ui.div(style=\"position: absolute; width: 14px; height: 2px; background-color: #222; top: 2px; left: 3px;\"),\n                    # Screw shaft\n                    ui.div(style=f\"position: absolute; width: 8px; height: {20 + screw_depth}px; background-color: #666; top: 6px; left: 6px; background-image: linear-gradient(90deg, #555, #777); border-radius: 0 0 4px 4px;\"),\n                    style=f\"position: absolute; bottom: {80 + screw_depth}px; left: 157px; height: 26px; width: 20px;\"\n                )\n            )\n        \n        elif state == \"tester\":\n            # Normalize to 0-1 over 20 seconds (slower animation)\n            t = current_frame / 20\n            \n            # Make the light always on in tester mode, with flickering when touching\n            flicker_speed = current_frame * 5\n            flicker_intensity = abs(((flicker_speed % 10) - 5) / 5)\n            \n            \n            # Highly realistic electrical outlet with proper 3D effects and details\n            elements.append(\n                ui.div(\n                    # Main outlet plate with 3D effect\n                    ui.div(style=\"position: absolute; width: 70px; height: 120px; background: linear-gradient(135deg, #f5f5f5, #e0e0e0); border: 1px solid #bbb; border-radius: 8px; box-shadow: 2px 2px 5px rgba(0,0,0,0.2), inset 0 0 2px rgba(255,255,255,0.8); top: 5px; left: 5px;\"),\n      \n                    # Socket holes (top)\n                    ui.div(style=\"position: absolute; width: 8px; height: 22px; background-color: #111; top: 28px; left: 25px; border-radius: 2px; box-shadow: inset 0 0 2px rgba(0,0,0,0.8);\"),\n                    ui.div(style=\"position: absolute; width: 8px; height: 22px; background-color: #111; top: 28px; left: 47px; border-radius: 2px; box-shadow: inset 0 0 2px rgba(0,0,0,0.8);\"),\n                    \n                    # Socket holes (bottom)\n                    ui.div(style=\"position: absolute; width: 8px; height: 22px; background-color: #111; top: 78px; left: 25px; border-radius: 2px; box-shadow: inset 0 0 2px rgba(0,0,0,0.8);\"),\n                    ui.div(style=\"position: absolute; width: 8px; height: 22px; background-color: #111; top: 78px; left: 47px; border-radius: 2px; box-shadow: inset 0 0 2px rgba(0,0,0,0.8);\"),\n                    \n                    # Outlet manufacturer branding detail\n                    ui.div(style=\"position: absolute; width: 20px; height: 4px; background-color: rgba(0,0,0,0.1); top: 62px; left: 30px; border-radius: 1px;\"),\n                    \n                    style=\"position: absolute; bottom: 150px; left: 361px;\"\n                )\n            )\n        \n        # Draw the tool (common for both modes, but with more detail)\n        elements.append(\n            ui.div(\n                # Handle\n                ui.div(\n                    # Main handle body\n                    ui.div(style=\"position: absolute; width: 30px; height: 70px; background-color: #d32f2f; border-radius: 5px; background-image: linear-gradient(to right, #c62828, #d32f2f, #c62828);\"),\n                    # Handle grip texture\n                    ui.div(style=\"position: absolute; width: 24px; height: 50px; border-left: 2px dotted rgba(0,0,0,0.2); border-right: 2px dotted rgba(0,0,0,0.2); top: 10px; left: 3px;\"),\n                    # Handle top cap\n                    #ui.div(style=\"position: absolute; width: 30px; height: 5px; background-color: #b71c1c; top: 0; border-radius: 5px 5px 0 0;\"),\n                    # Handle bottom transition\n                    #ui.div(style=\"position: absolute; width: 30px; height: 5px; background-color: #b71c1c; bottom: 0; border-radius: 0 0 5px 5px;\"),\n                    #style=\"position: absolute; width: 30px; height: 70px;\"\n                ),\n                # Neon light with animated glow\n                ui.div(\n                    # Bulb\n                    ui.div(style=f\"width: 20px; height: 20px; background-color: {neon_color}; border-radius: 50%; box-shadow: 0 0 5px {neon_color};\"),\n                    # Light housing\n                    ui.div(style=\"position: absolute; width: 22px; height: 22px; border: 1px solid #999; border-radius: 50%; top: -1px; left: -1px; background-color: rgba(255,255,255,0.2);\"),\n                    style=f\"position: absolute; top: 25px; left: 5px; filter: drop-shadow(0 0 8px {neon_color});\"\n                ),\n                # Shaft with metal texture\n                ui.div(\n                    # Main shaft\n                    ui.div(style=\"position: absolute; width: 6px; height: 100px; background-color: silver; left: 0; background-image: linear-gradient(to right, #a0a0a0, #e0e0e0, #a0a0a0);\"),\n                    # Highlight reflection on shaft\n                    ui.div(style=\"position: absolute; width: 2px; height: 100px; background-color: rgba(255,255,255,0.5); left: 2px;\"),\n                    style=\"position: absolute; width: 6px; height: 100px; top: 70px; left: 12px;\"\n                ),\n                # Tip with more detailed styling\n                ui.div(\n                    # Flat tip\n                    ui.div(style=\"position: absolute; width: 10px; height: 5px; background-color: #444; top: 90; left: 90; border-radius: 9px; background-image: linear-gradient(to bottom, #666, #333);\"),\n                    # Tip edge highlight\n                    ui.div(style=\"position: absolute; width: 8px; height: 1px; background-color: rgba(255,255,255,0.3); top: 9.5px; left: 9px;\"),\n                    style=\"position: absolute; width: 90px; height: 9px; top: 166px; left: 10px;\"\n                ),\n                style=f\"position: absolute; left: {tool_left}px; top: {tool_top}px; transform: {tool_rotate}; transition: top 0.1s ease, transform 0.1s ease;\"\n            )\n        )\n        \n\n        \n        return ui.div(*elements)\n\n    # Handler for screwdriver button\n    @reactive.Effect\n    @reactive.event(input.screwdriver_btn)\n    def handle_screwdriver():\n        current_state.set(\"screwdriver\")\n        frame.set(0.0)\n        animation_running.set(True)\n\n    # Handler for tester button\n    @reactive.Effect\n    @reactive.event(input.tester_btn)\n    def handle_tester():\n        current_state.set(\"tester\")\n        frame.set(0.0)\n        animation_running.set(True)\n\n    # Handler for reset button\n    @reactive.Effect\n    @reactive.event(input.reset_btn)\n    def handle_reset():\n        current_state.set(\"idle\")\n        animation_running.set(False)\n        frame.set(0.0)\n\n# Create app\napp = App(app_ui, server)\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"filters":["shinylive"],"output-file":"test.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.43","theme":"cosmo","title":"Shinylive in Quarto example"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}