---
title: Shinylive in Quarto example
format: html
filters:
  - shinylive
---

### Editor with app

If you want to display an editor panel with along with the running application, use `#| components: [editor, viewer]`. Users will be able to use the editor to modify the code and re-run the application.

```{shinylive-python}
#| standalone: true
#| viewerHeight: 690
# app.py - TRIZ Principle of Division - Fireproof Fuel Tank Demo
from shiny import App, ui, render, reactive
from htmltools import HTML, css
import random

# Define CSS for the app
app_css = """
body {
    margin: 0;
    padding: 0;
    font-family: Arial, sans-serif;
    background-color: #333;
    color: white;
    text-align: center;
}
.container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    padding: 20px;
}
h1 {
    margin-bottom: 30px;
    font-size: 2.5rem;
}
.tanks-container {
    display: flex;
    justify-content: space-around;
    width: 100%;
    max-width: 1000px;
    flex-wrap: wrap;
    gap: 30px;
    margin-bottom: 20px;
}
.tank-wrapper {
    display: flex;
    flex-direction: column;
    align-items: center;
}
.tank {
    position: relative;
    width: 200px;
    height: 300px;
    margin: 0 20px;
    border: 3px solid #aaa;
    border-radius: 20px;
    overflow: hidden;
}
.tank-label {
    font-weight: bold;
    margin-bottom: 10px;
    font-size: 1.2rem;
}
.liquid {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #0c0;
    transition: background-color 3s;
}
.cells-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    grid-template-rows: repeat(6, 1fr);
    gap: 5px;
    width: 90%;
    height: 90%;
    margin: 5%;
}
.cell {
    background-color: #0c0;
    border-radius: 5px;
    transition: background-color 0.5s;
}
.fire {
    background-color: #f30;
}
.btn-container {
    margin-top: 40px;
}
.action-btn {
    padding: 12px 24px;
    font-size: 16px;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    margin: 0 10px;
    transition: background-color 0.3s;
}
#start_btn {
    background: linear-gradient(to bottom, #ff6600, #ff3300);
}
#start_btn:disabled {
    background: #cccccc;
    cursor: not-allowed;
}
#reset_btn {
    background-color: #4CAF50;
}
.description {
    max-width: 600px;
    margin: 30px auto;
    line-height: 1.6;
    font-size: 1rem;
    padding: 0 20px;
}
.instructions {
    margin-bottom: 20px;
    font-style: italic;
    color: #ddd;
    max-width: 600px;
    font-size: 0.9rem;
}
.status {
    margin-top: 15px;
    padding: 8px 15px;
    border-radius: 20px;
    background-color: rgba(255, 255, 255, 0.1);
    display: inline-block;
    transition: all 0.3s;
}
/* Responsive adjustments */
@media (max-width: 768px) {
    .tanks-container {
        flex-direction: column;
        align-items: center;
    }
    .tank {
        margin: 0;
        width: 180px;
        height: 270px;
    }
    .btn-container {
        display: flex;
        flex-direction: column;
        gap: 15px;
        width: 100%;
        max-width: 250px;
    }
    .action-btn {
        margin: 0;
        width: 100%;
        padding: 15px 20px;
        font-size: 18px;
    }
}
"""

# Generate cell divs for the divided tank
def generate_cells():
    cells = []
    for i in range(1, 25):
        cells.append(
            ui.div(
                id=f"cell-{i}",
                class_="cell"
            )
        )
    return cells

# Define UI
app_ui = ui.page_fluid(
    # Include CSS
    ui.tags.style(app_css),
    
    # Include necessary JavaScript
    ui.tags.script("""
    function setFireCell(cellNumber) {
        document.getElementById('undivided-liquid').style.backgroundColor = '#f30';
        document.getElementById('cell-' + cellNumber).style.backgroundColor = '#f30';
        document.getElementById('status-display').textContent = 'Fire spreading in undivided tank, contained in divided tank';
        document.getElementById('status-display').style.backgroundColor = 'rgba(255, 100, 0, 0.2)';
        document.getElementById('start_btn').disabled = true;
        document.getElementById('start_btn').style.background = '#cccccc';
        document.getElementById('start_btn').style.cursor = 'not-allowed';
    }
    
    function resetSimulation() {
        document.getElementById('undivided-liquid').style.backgroundColor = '#0c0';
        for (let i = 1; i <= 24; i++) {
            let cell = document.getElementById('cell-' + i);
            if (cell) cell.style.backgroundColor = '#0c0';
        }
        document.getElementById('status-display').textContent = 'Ready to start simulation';
        document.getElementById('status-display').style.backgroundColor = 'rgba(255, 255, 255, 0.1)';
        document.getElementById('start_btn').disabled = false;
        document.getElementById('start_btn').style.background = 'linear-gradient(to bottom, #ff6600, #ff3300)';
        document.getElementById('start_btn').style.cursor = 'pointer';
    }
    
    // Add a message handler for Python->JS communication
    $(document).on('shiny:connected', function() {
        Shiny.addCustomMessageHandler('simulation-action', function(message) {
            if (message.action === 'setFire') {
                setFireCell(message.cellNumber);
            } else if (message.action === 'reset') {
                resetSimulation();
            }
        });
    });
    """),
    
    # Main container
    ui.div(
        {"class": "container"},
        
        # Title
        #ui.h1("TRIZ Principle 1: Division"),
        
        # Tanks container
        ui.div(
            {"class": "tanks-container"},
            
            # Undivided Tank
            ui.div(
                {"class": "tank-wrapper"},
                ui.div({"class": "tank-label"}, "Undivided Tank"),
                ui.div(
                    {"class": "tank"},
                    ui.div({"id": "undivided-liquid", "class": "liquid"})
                )
            ),
            
            # Divided Tank
            ui.div(
                {"class": "tank-wrapper"},
                ui.div({"class": "tank-label"}, "Divided Tank"),
                ui.div(
                    {"class": "tank"},
                    ui.div(
                        {"id": "cells-container", "class": "cells-grid"},
                        *generate_cells()
                    )
                )
            )
        ),
        
        # Instructions
        ui.div(
            {"class": "instructions"},
            'Click "Start Fire" to simulate a fire in both tanks and observe how division prevents fire spreading'
        ),
        
        # Buttons
        ui.div(
            {"class": "btn-container"},
            ui.input_action_button("start_btn", "Start Fire", class_="action-btn"),
            ui.input_action_button("reset_btn", "Reset", class_="action-btn")
        ),
        
        # Status indicator
        ui.div(
            {"id": "status-display", "class": "status"},
            "Ready to start simulation"
        ),
        
        # Description
        ui.div(
            {"class": "description"},
            #ui.p( )
        )
    )
)

# Define server logic
def server(input, output, session):
    # Track fire state
    fire_started = reactive.Value(False)
    
    # Handle the Start Fire button click
    @reactive.Effect
    @reactive.event(input.start_btn)
    async def _():
        if not fire_started.get():
            fire_started.set(True)
            # Generate random cell number
            cell_number = random.randint(1, 24)
            # Use session to send a message to JavaScript - with await
            await session.send_custom_message('simulation-action', {'action': 'setFire', 'cellNumber': cell_number})
    
    # Handle the Reset button click
    @reactive.Effect
    @reactive.event(input.reset_btn)
    async def _():
        fire_started.set(False)
        # Use session to send a message to JavaScript - with await
        await session.send_custom_message('simulation-action', {'action': 'reset'})

# Create the app
app = App(app_ui, server)
```

### TRIZ Principle: Separation

```{shinylive-python}
#| standalone: true
#| viewerHeight: 690
# app.py - TRIZ Principle of Separation - Screwdriver with Interchangeable Bits Demo
from shiny import App, ui, render, reactive
from htmltools import HTML, css
import random

# Define CSS for the app
app_css = """
body {
    margin: 0;
    padding: 0;
    font-family: Arial, sans-serif;
    background-color: #333;
    color: white;
    text-align: center;
}
.container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    padding: 20px;
}
h1 {
    margin-bottom: 30px;
    font-size: 2.5rem;
}
.animation-container {
    position: relative;
    width: 800px;
    height: 400px;
    background-color: #444;
    border-radius: 10px;
    margin-bottom: 30px;
    box-shadow: 0 0 20px rgba(0,0,0,0.5);
    overflow: hidden;
}
.btn-container {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin-top: 20px;
}
.action-btn {
    padding: 12px 24px;
    font-size: 16px;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s;
}
#start_btn {
    background: linear-gradient(to bottom, #4CAF50, #45a049);
}
#start_btn:disabled {
    background: #cccccc;
    cursor: not-allowed;
}
#reset_btn {
    background-color: #f44336;
}
.description {
    max-width: 600px;
    margin: 30px auto;
    line-height: 1.6;
    font-size: 1rem;
    padding: 0 20px;
}
.instructions {
    margin-bottom: 20px;
    font-style: italic;
    color: #ddd;
    max-width: 600px;
    font-size: 0.9rem;
}
.status {
    margin-top: 15px;
    padding: 8px 15px;
    border-radius: 20px;
    background-color: rgba(255, 255, 255, 0.1);
    display: inline-block;
    transition: all 0.3s;
}
/* Screwdriver animation elements */
#handle {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 300px;
    height: 60px;
    background: linear-gradient(to bottom, #999999, #dddddd, #888888, #dddddd, #999999);
    border-radius: 30px 5px 5px 30px;
    border: 1px solid #666666;
}
#handle-grip {
    position: absolute;
    top: 10px;
    left: 10px;
    width: calc(100% - 20px);
    height: calc(100% - 20px);
    background: linear-gradient(to bottom, #777777, #aaaaaa, #666666, #777777);
    border-radius: 20px 0 0 20px;
}
#ferrule {
    position: absolute;
    top: 5px;
    right: 5px;
    width: 35px;
    height: calc(100% - 10px);
    background: linear-gradient(to bottom, #999999, #eeeeee, #777777, #eeeeee, #999999);
    border-radius: 0 5px 5px 0;
}
.grip-line {
    position: absolute;
    width: 3px;
    height: 30px;
    background-color: #555555;
    top: 15px;
}
#flathead-bit {
    position: absolute;
    top: 50%;
    left: calc(50% + 150px - 120px);
    transform: translate(0, -50%);
    width: 120px;
    height: 30px;
    background: linear-gradient(to bottom, #cc3333, #ff6666, #cc0000, #ff6666, #cc3333);
    border-radius: 0 5px 5px 0;
    transition: left 1s ease-in-out;
}
#flathead-tip {
    position: absolute;
    top: -5px;
    right: 0;
    width: 15px;
    height: 40px;
    background: linear-gradient(to bottom, #cc3333, #ff6666, #cc0000, #ff6666, #cc3333);
}
#phillips-bit {
    position: absolute;
    top: 50%;
    left: 900px;
    transform: translate(0, -50%);
    width: 120px;
    height: 30px;
    background: linear-gradient(to bottom, #3366cc, #6699ff, #0044cc, #6699ff, #3366cc);
    border-radius: 0 5px 5px 0;
    transition: left 1s ease-in-out;
}
#phillips-tip {
    position: absolute;
    top: -5px;
    right: 0;
    width: 15px;
    height: 40px;
    background: linear-gradient(to bottom, #3366cc, #6699ff, #0044cc, #6699ff, #3366cc);
}
.cross-horizontal {
    position: absolute;
    top: 18px;
    right: 3px;
    width: 14px;
    height: 4px;
    background-color: #002266;
}
.cross-vertical {
    position: absolute;
    top: 13px;
    right: 8px;
    width: 4px;
    height: 14px;
    background-color: #002266;
}
/* Responsive adjustments */
@media (max-width: 850px) {
    .animation-container {
        width: 95%;
        height: 300px;
    }
}
"""

# Define UI
app_ui = ui.page_fluid(
    # Include CSS
    ui.tags.style(app_css),
    
    # Include necessary JavaScript for animation
    ui.tags.script("""
    let animationState = 'initial';
    let animationInProgress = false;
    
    function playAnimation() {
        if (animationInProgress) return;
        
        animationInProgress = true;
        document.getElementById('start_btn').disabled = true;
        document.getElementById('start_btn').style.background = '#cccccc';
        document.getElementById('status-display').textContent = 'Separation: Removing the flathead bit';
        
        // Step 1: Separate flathead bit
        const flatheadBit = document.getElementById('flathead-bit');
        flatheadBit.style.left = '650px';
        
        setTimeout(() => {
            // Step 2: Transition
            document.getElementById('status-display').textContent = 'Transition: Switching bits';
            flatheadBit.style.left = '900px';
            
            setTimeout(() => {
                // Step 3: Phillips bit appears
                const phillipsBit = document.getElementById('phillips-bit');
                phillipsBit.style.left = '650px';
                document.getElementById('status-display').textContent = 'Reattachment: Phillips bit connecting to handle';
                
                setTimeout(() => {
                    // Step 4: Phillips bit connects
                    phillipsBit.style.left = 'calc(50% + 150px - 120px)';
                    
                    setTimeout(() => {
                        // Complete
                        document.getElementById('status-display').textContent = 'Complete: Screwdriver now has Phillips bit attached';
                        animationInProgress = false;
                    }, 1000);
                }, 1000);
            }, 1000);
        }, 1000);
    }
    
    function resetAnimation() {
        document.getElementById('flathead-bit').style.left = 'calc(50% + 150px - 120px)';
        document.getElementById('phillips-bit').style.left = '900px';
        document.getElementById('status-display').textContent = 'Initial State: Flathead bit attached to handle';
        document.getElementById('start_btn').disabled = false;
        document.getElementById('start_btn').style.background = 'linear-gradient(to bottom, #4CAF50, #45a049)';
        animationInProgress = false;
    }
    
    // Add a message handler for Python->JS communication
    $(document).on('shiny:connected', function() {
        Shiny.addCustomMessageHandler('animation-action', function(message) {
            if (message.action === 'play') {
                playAnimation();
            } else if (message.action === 'reset') {
                resetAnimation();
            }
        });
    });
    """),
    
    # Main container
    ui.div(
        {"class": "container"},
        # Animation container
        ui.div(
            {"class": "animation-container"},
            
            # Handle
            ui.div({"id": "handle"},
                # Grip area
                ui.div({"id": "handle-grip"}),
                # Ferrule
                ui.div({"id": "ferrule"})
            ),
            
            # Grip lines
            *[ui.div({"class": "grip-line", "style": f"left: {40 + i * 30}px;"}) for i in range(8)],
            
            # Flathead bit
            ui.div({"id": "flathead-bit"},
                ui.div({"id": "flathead-tip"})
            ),
            
            # Phillips bit
            ui.div({"id": "phillips-bit"},
                ui.div({"id": "phillips-tip"},
                    ui.div({"class": "cross-horizontal"}),
                    ui.div({"class": "cross-vertical"})
                )
            )
        ),
        
        # Status indicator
        ui.div(
            {"id": "status-display", "class": "status"},
            "Initial State: Flathead bit attached to handle"
        ),
        
        # Buttons
        ui.div(
            {"class": "btn-container"},
            ui.input_action_button("start_btn", "Play Animation", class_="action-btn"),
            ui.input_action_button("reset_btn", "Reset", class_="action-btn")
        ),
        
        # Description
        ui.div(
            {"class": "description"},
           
        )
    )
)

# Define server logic
def server(input, output, session):
    # Track animation state
    animation_playing = reactive.Value(False)
    
    # Handle the Play Animation button click
    @reactive.Effect
    @reactive.event(input.start_btn)
    async def _():
        if not animation_playing.get():
            animation_playing.set(True)
            # Send message to JavaScript
            await session.send_custom_message('animation-action', {'action': 'play'})
    
    # Handle the Reset button click
    @reactive.Effect
    @reactive.event(input.reset_btn)
    async def _():
        animation_playing.set(False)
        # Send message to JavaScript
        await session.send_custom_message('animation-action', {'action': 'reset'})

# Create the app
app = App(app_ui, server)

```
### Editor with app

If you want to display an editor panel with along with the running application, use `#| components: [editor, viewer]`. Users will be able to use the editor to modify the code and re-run the application.

```{shinylive-python}
#| standalone: true
#| viewerHeight: 690
from shiny import App, ui, reactive, render
import shinyswatch
from htmltools import HTML, css, tags

# Define the SVG content for the pot visualization
def get_homogeneous_pot_svg():
    return HTML("""
    <svg width="300" height="200" viewBox="0 0 300 200" id="pot-svg">
        <!-- Homogeneous Pot -->
        <g id="homogeneous-pot">
            <!-- Pot body -->
            <path d="M80,40 L80,160 C80,180 220,180 220,160 L220,40" fill="#a9a9a9" stroke="#666" stroke-width="2"/>
            
            <!-- Pot interior - showing uniform material -->
            <path d="M90,50 L90,155 C90,170 210,170 210,155 L210,50" fill="none" stroke="#666" stroke-width="1" stroke-dasharray="3,3"/>
            
            <!-- Pot rim -->
            <path d="M70,40 C70,30 230,30 230,40" fill="#a9a9a9" stroke="#666" stroke-width="2"/>
            
            <!-- Pot handle right -->
            <path d="M220,80 C260,80 260,120 220,120" fill="none" stroke="#666" stroke-width="5"/>
            
            <!-- Label for material -->
            <text x="150" y="100" text-anchor="middle" fill="#fff" font-weight="bold">Aluminum</text>
        </g>
    </svg>
    """)

def get_heterogeneous_pot_svg():
    return HTML("""
    <svg width="300" height="200" viewBox="0 0 300 200" id="pot-svg">
        <!-- Heterogeneous Pot -->
        <g id="heterogeneous-pot">
            <!-- Pot body - same outer shape -->
            <path d="M80,40 L80,160 C80,180 220,180 220,160 L220,40" fill="#a9a9a9" stroke="#666" stroke-width="2"/>
            
            <!-- Interior layers -->
            <!-- Stainless steel inner layer -->
            <path d="M90,50 L90,155 C90,170 210,170 210,155 L210,50" fill="none" stroke="#c0c0c0" stroke-width="3"/>
            
            <!-- Aluminum middle layer -->
            <path d="M85,45 L85,157 C85,175 215,175 215,157 L215,45" fill="none" stroke="#a9a9a9" stroke-width="3"/>
            
            <!-- Copper outer layer -->
            <path d="M80,40 L80,160 C80,180 220,180 220,160 L220,40" fill="none" stroke="#b87333" stroke-width="3"/>
            
            <!-- Pot rim -->
            <path d="M70,40 C70,30 230,30 230,40" fill="#c0c0c0" stroke="#666" stroke-width="2"/>
            
            <!-- Pot handle right -->
            <path d="M220,80 C260,80 260,120 220,120" fill="none" stroke="#666" stroke-width="5"/>
            
            <!-- Layer indicators inside pot -->
            <line x1="100" y1="70" x2="120" y2="70" stroke="#c0c0c0" stroke-width="2"/>
            <text x="125" y="75" font-size="12">Stainless Steel</text>
            
            <line x1="100" y1="100" x2="120" y2="100" stroke="#a9a9a9" stroke-width="2"/>
            <text x="125" y="105" font-size="12">Aluminum</text>
            
            <line x1="100" y1="130" x2="120" y2="130" stroke="#b87333" stroke-width="2"/>
            <text x="125" y="135" font-size="12">Copper</text>
        </g>
    </svg>
    """)

# Custom CSS for the app
css_content = """
.container {
    max-width: 900px;
    margin: 0 auto;
    background-color: white;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}
h1 {
    text-align: center;
    color: #2c3e50;
    margin-bottom: 30px;
}
.illustration-container {
    display: flex;
    justify-content: space-between;
    margin-bottom: 30px;
    position: relative;
}
.pot-container {
    flex: 1;
    display: flex;
    justify-content: center;
    position: relative;
}
.layer-diagram {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 20px;
}
.layer {
    width: 200px;
    height: 40px;
    margin: 2px 0;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: bold;
    border-radius: 4px;
    cursor: pointer;
    transition: transform 0.2s, box-shadow 0.2s;
}
.layer:hover {
    transform: scale(1.05);
    box-shadow: 0 2px 8px rgba(0,0,0,0.2);
}
.info-panel {
    background-color: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
    margin-top: 20px;
}
.tooltip-content {
    display: none;
    position: absolute;
    background-color: #34495e;
    color: white;
    padding: 10px 15px;
    border-radius: 4px;
    z-index: 100;
    max-width: 250px;
    box-shadow: 0 3px 10px rgba(0,0,0,0.2);
}
.layer:hover .tooltip-content {
    display: block;
}
"""

# Define the UI
def ui_content():
    # Define the page layout with theme as a keyword argument
    return ui.page_fluid(
        ui.tags.head(
            ui.tags.style(css_content),
        ),
        ui.div(
            {"class": "container"},
            ui.h1("Principle of Local Quality"),
            ui.p("Transform an object from a homogeneous structure to a heterogeneous one, where different parts have specialized functions."),
            
            ui.div(
                {"class": "illustration-container"},
                # Pot container
                ui.div(
                    {"class": "pot-container"},
                    ui.output_ui("pot_svg")
                ),
                # Layer diagram
                ui.div(
                    {"class": "layer-diagram"},
                    ui.output_ui("layer_diagram")
                )
            ),
            
            ui.div(
                {"class": "control-panel", "style": "text-align: center; margin: 20px 0;"},
                ui.input_action_button(
                    "toggle_button", 
                    "Apply Local Quality Principle", 
                    class_="btn-primary"
                )
            ),
            
            ui.div(
                {"class": "info-panel"},
                ui.h3(ui.output_text("info_title")),
                ui.output_ui("info_text")
            )
        ),
        theme=shinyswatch.theme.cosmo()
    )

# Define the server
def server(input, output, session):
    # Reactive value to track the current state
    is_heterogeneous = reactive.Value(False)
    
    # Handler for the toggle button
    @reactive.Effect
    @reactive.event(input.toggle_button)
    def _():
        current_state = is_heterogeneous.get()
        is_heterogeneous.set(not current_state)
        
        # Update the button text
        if not current_state:
            ui.update_action_button(
                "toggle_button", 
                label="Return to Homogeneous Structure"
            )
        else:
            ui.update_action_button(
                "toggle_button", 
                label="Apply Local Quality Principle"
            )
    
    # Render the pot SVG based on the current state
    @output
    @render.ui
    def pot_svg():
        if is_heterogeneous.get():
            return get_heterogeneous_pot_svg()
        else:
            return get_homogeneous_pot_svg()
    
    # Render the layer diagram based on the current state
    @output
    @render.ui
    def layer_diagram():
        if is_heterogeneous.get():
            return ui.div(
                ui.div(
                    {"class": "layer", "style": "background-color: #c0c0c0;"},
                    "Stainless Steel",
                    ui.div(
                        {"class": "tooltip-content"},
                        "Non-reactive and easy-to-clean surface for food safety"
                    )
                ),
                ui.div(
                    {"class": "layer", "style": "background-color: #a9a9a9;"},
                    "Aluminum",
                    ui.div(
                        {"class": "tooltip-content"},
                        "Distributes heat evenly throughout the pot to prevent hot spots"
                    )
                ),
                ui.div(
                    {"class": "layer", "style": "background-color: #b87333;"},
                    "Copper",
                    ui.div(
                        {"class": "tooltip-content"},
                        "Excellent heat conductor for quick and efficient heating from the bottom"
                    )
                )
            )
        else:
            return ui.div(
                ui.div(
                    {"class": "layer", "style": "background-color: #a9a9a9;"},
                    "Aluminum"
                )
            )
    
    # Render the info title based on the current state
    @output
    @render.text
    def info_title():
        if is_heterogeneous.get():
            return "Enhanced Pot: Heterogeneous Structure"
        else:
            return "Standard Pot: Homogeneous Structure"
    
    # Render the info text based on the current state
    @output
    @render.ui
    def info_text():
        if is_heterogeneous.get():
            return ui.HTML(
                """This pot has specialized layers for improved functionality. 
                <strong>Pros:</strong> Copper bottom for quick heating, aluminum middle 
                for even heat distribution, and stainless steel interior for non-reactive 
                cooking surface. <strong>Cons:</strong> More complex to manufacture."""
            )
        else:
            return ui.HTML(
                """This pot has a uniform aluminum structure. <strong>Pros:</strong> Simple design, 
                even heat distribution. <strong>Cons:</strong> May react with acidic foods, 
                wear out faster, and doesn't optimize heating efficiency."""
            )

# Create the app
app = App(ui_content(), server)
```


```{shinylive-python}
#| standalone: true
#| viewerHeight: 690
from shiny import App, ui, reactive, render
import asyncio

# Define CSS
app_css = """
body {
    margin: 0;
    padding: 0;
    font-family: Arial, sans-serif;
    background-color: #f0f0f0;
    color: #333;
    text-align: center;
}
.container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 20px;
}
h1 {
    margin-bottom: 20px;
    font-size: 2rem;
    color: #333;
}
.description {
    max-width: 700px;
    margin: 0 auto 30px;
    line-height: 1.5;
    color: #555;
    font-size: 1rem;
}
.animation-container {
    position: relative;
    width: 700px;
    height: 400px;
    background-color: #e0e0e0;
    border-radius: 10px;
    margin-bottom: 30px;
    box-shadow: 0 0 10px rgba(0,0,0,0.2);
    overflow: hidden;
}
.btn-container {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin-bottom: 20px;
}
.action-btn {
    padding: 10px 15px;
    font-size: 16px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
}
.drill-btn {
    background-color: #4CAF50;
    color: white;
}
.drill-btn:hover {
    background-color: #45a049;
}
.drill-btn:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
}
.reset-btn {
    background-color: #888;
    color: white;
}
.reset-btn:hover {
    background-color: #777;
}
.ground {
    position: absolute;
    bottom: 0;
    width: 100%;
    height: 2px;
    background-color: #777777;
}
.slab {
    position: absolute;
    width: 200px;
    height: 60px;
    bottom: 2px;
    background-color: #a0a0a0;
    border: 2px solid #333333;
    z-index: 5;
}
.left-slab {
    left: 150px;
}
.right-slab {
    left: 450px;
}
.hole {
    position: absolute;
    background-color: #555555;
    box-shadow: inset 0 0 15px rgba(0, 0, 0, 0.7);
    opacity: 0;
    transition: opacity 0.5s ease;
    z-index: 10;
}
.round-hole {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    left: 230px;
    bottom: 12px;
}
.square-hole {
    width: 40px;
    height: 40px;
    left: 530px;
    bottom: 12px;
}
.drill {
    position: absolute;
    width: 40px;
    height: 120px;
    background-color: #333333;
    top: 100px;
    transition: top 1s ease;
}
.left-drill {
    left: 230px;
}
.right-drill {
    left: 530px;
}
.drill-handle {
    position: absolute;
    top: 20px;
    right: -15px;
    width: 15px;
    height: 30px;
    background-color: #333333;
}
.drill-button {
    position: absolute;
    top: 25px;
    right: -7px;
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: #ff0000;
}
.drill-bit {
    position: absolute;
    bottom: -30px;
    left: 10px;
    width: 20px;
    height: 30px;
    transition: transform 0.1s ease;
}
.round-bit {
    background-color: #666666;
    clip-path: polygon(0 0, 100% 0, 50% 100%);
}
.square-bit {
    background-color: #666666;
}
.label {
    position: absolute;
    text-align: center;
    font-size: 14px;
    color: #000000;
}
.top-label {
    width: 200px;
    top: 80px;
}
.bottom-label {
    width: 200px;
    bottom: -25px;
}
.left-top-label {
    left: 150px;
}
.right-top-label {
    left: 450px;
}
.left-bottom-label {
    left: 150px;
}
.right-bottom-label {
    left: 450px;
}
@keyframes vibrate {
    0% { transform: translateX(0); }
    25% { transform: translateX(-2px); }
    50% { transform: translateX(0); }
    75% { transform: translateX(2px); }
    100% { transform: translateX(0); }
}
.vibrate {
    animation: vibrate 0.1s infinite;
}
.vibrate-strong {
    animation: vibrate 0.05s infinite;
}
"""

# Define JavaScript
app_js = """
let leftDrilling = false;
let rightDrilling = false;
let leftHasHole = false;
let rightHasHole = false;

function drillRoundHole() {
    if (leftDrilling) return;
    
    leftDrilling = true;
    document.getElementById('traditional_btn').disabled = true;
    
    // Move drill down
    const leftDrill = document.getElementById('left-drill');
    leftDrill.style.top = '220px';
    
    // Add vibration effect
    setTimeout(() => {
        leftDrill.classList.add('vibrate');
        const leftBit = document.getElementById('left-bit');
        leftBit.classList.add('vibrate');
        
        // Create hole after delay
        setTimeout(() => {
            const hole = document.getElementById('round-hole');
            hole.style.opacity = '1';
            leftHasHole = true;
            
            // Move drill back up
            setTimeout(() => {
                leftDrill.classList.remove('vibrate');
                leftBit.classList.remove('vibrate');
                leftDrill.style.top = '100px';
                
                // Re-enable button after animation completes
                setTimeout(() => {
                    leftDrilling = false;
                    document.getElementById('traditional_btn').disabled = false;
                }, 1000);
            }, 500);
        }, 1000);
    }, 1000);
}

function drillSquareHole() {
    if (rightDrilling) return;
    
    rightDrilling = true;
    document.getElementById('special_btn').disabled = true;
    
    // Move drill down
    const rightDrill = document.getElementById('right-drill');
    rightDrill.style.top = '220px';
    
    // Add vibration effect (stronger for special drill)
    setTimeout(() => {
        rightDrill.classList.add('vibrate-strong');
        const rightBit = document.getElementById('right-bit');
        rightBit.classList.add('vibrate-strong');
        
        // Create hole after delay
        setTimeout(() => {
            const hole = document.getElementById('square-hole');
            hole.style.opacity = '1';
            rightHasHole = true;
            
            // Move drill back up
            setTimeout(() => {
                rightDrill.classList.remove('vibrate-strong');
                rightBit.classList.remove('vibrate-strong');
                rightDrill.style.top = '100px';
                
                // Re-enable button after animation completes
                setTimeout(() => {
                    rightDrilling = false;
                    document.getElementById('special_btn').disabled = false;
                }, 1000);
            }, 500);
        }, 1000);
    }, 1000);
}

function resetScene() {
    // Reset holes
    document.getElementById('round-hole').style.opacity = '0';
    document.getElementById('square-hole').style.opacity = '0';
    
    // Reset drills position
    document.getElementById('left-drill').style.top = '100px';
    document.getElementById('right-drill').style.top = '100px';
    
    // Remove vibration effects
    document.getElementById('left-drill').classList.remove('vibrate');
    document.getElementById('right-drill').classList.remove('vibrate-strong');
    document.getElementById('left-bit').classList.remove('vibrate');
    document.getElementById('right-bit').classList.remove('vibrate-strong');
    
    // Reset state
    leftDrilling = false;
    rightDrilling = false;
    leftHasHole = false;
    rightHasHole = false;
    
    // Enable buttons
    document.getElementById('traditional_btn').disabled = false;
    document.getElementById('special_btn').disabled = false;
}

// Add a message handler for Python->JS communication
$(document).on('shiny:connected', function() {
    Shiny.addCustomMessageHandler('animation-action', function(message) {
        if (message.action === 'drill-round') {
            drillRoundHole();
        } else if (message.action === 'drill-square') {
            drillSquareHole();
        } else if (message.action === 'reset') {
            resetScene();
        }
    });
});
"""

# Define UI
app_ui = ui.page_fluid(
    # Include CSS and JavaScript
    ui.tags.style(app_css),
    ui.tags.script(app_js),
    
    # Main container
    ui.div(
        {"class": "container"},
        ui.h1("TRIZ Anti-Asymmetry Principle"),
        ui.p(
            "This visualization demonstrates the TRIZ principle of \"Anti-(Asymmetry)\" using drills as an example. "
            "The traditional drill (left) creates round holes, while the special hand-held drill (right) creates square holes in concrete slabs.",
            class_="description"
        ),
        
        # Buttons
        ui.div(
            {"class": "btn-container"},
            ui.input_action_button("traditional_btn", "Drill Round Hole", class_="action-btn drill-btn"),
            ui.input_action_button("special_btn", "Drill Square Hole", class_="action-btn drill-btn"),
            ui.input_action_button("reset_btn", "Reset", class_="action-btn reset-btn")
        ),
        
        # Animation container
        ui.div(
            {"class": "animation-container"},
            
            # Ground line
            ui.div({"class": "ground"}),
            
            # Concrete slabs
            ui.div({"class": "slab left-slab"}),
            ui.div({"class": "slab right-slab"}),
            
            # Holes
            ui.div({"id": "round-hole", "class": "hole round-hole"}),
            ui.div({"id": "square-hole", "class": "hole square-hole"}),
            
            # Left drill (traditional)
            ui.div(
                {"id": "left-drill", "class": "drill left-drill"},
                ui.div({"class": "drill-handle"}),
                ui.div({"class": "drill-button"}),
                ui.div({"id": "left-bit", "class": "drill-bit round-bit"})
            ),
            
            # Right drill (special)
            ui.div(
                {"id": "right-drill", "class": "drill right-drill"},
                ui.div({"class": "drill-handle"}),
                ui.div({"class": "drill-button"}),
                ui.div({"id": "right-bit", "class": "drill-bit square-bit"})
            ),
            
            # Labels
            ui.div({"class": "label top-label left-top-label"}, "Traditional Drill"),
            ui.div({"class": "label top-label right-top-label"}, "Special Drill with Vibrator"),
            ui.div({"class": "label bottom-label left-bottom-label"}, "Round Hole"),
            ui.div({"class": "label bottom-label right-bottom-label"}, "Square Hole")
        )
    )
)

# Define server logic
def server(input, output, session):
    # Handle the traditional drill button click
    @reactive.Effect
    @reactive.event(input.traditional_btn)
    async def handle_traditional_drill():
        await session.send_custom_message('animation-action', {'action': 'drill-round'})
    
    # Handle the special drill button click
    @reactive.Effect
    @reactive.event(input.special_btn)
    async def handle_special_drill():
        await session.send_custom_message('animation-action', {'action': 'drill-square'})
    
    # Handle the reset button click
    @reactive.Effect
    @reactive.event(input.reset_btn)
    async def handle_reset():
        await session.send_custom_message('animation-action', {'action': 'reset'})

# Create the app
app = App(app_ui, server)

```










```{shinylive-python}
#| standalone: true
#| viewerHeight: 690
from shiny import App, ui, render, reactive
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np
import matplotlib
from matplotlib.path import Path

# Set better fonts for improved text rendering
matplotlib.rcParams['font.family'] = 'sans-serif'
matplotlib.rcParams['font.sans-serif'] = ['Arial', 'Helvetica', 'DejaVu Sans']
matplotlib.rcParams['font.size'] = 12
matplotlib.rcParams['axes.titlesize'] = 16
matplotlib.rcParams['figure.titlesize'] = 18

# Define the app UI with enhanced styling
app_ui = ui.page_fluid(
    ui.tags.style("""
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');
        
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f5f7fa;
            color: #333;
            line-height: 1.6;
        }
        
        h1 {
            color: #2c3e50;
            font-weight: 600;
            margin-bottom: 20px;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }
        
        h4 {
            color: #2c3e50;
            font-weight: 500;
            margin-top: 20px;
        }
        
        .container-fluid {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .control-panel {
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            padding: 25px;
            margin-bottom: 20px;
        }
        
        .plot-container {
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            overflow: hidden;
            margin-bottom: 20px;
        }
        
        .btn {
            border-radius: 8px;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 15px;
            padding: 10px 0;
            transition: all 0.3s ease;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .btn-danger {
            background-color: #e74c3c;
            border-color: #e74c3c;
        }
        
        .btn-success {
            background-color: #2ecc71;
            border-color: #2ecc71;
        }
        
        .btn-primary {
            background-color: #3498db;
            border-color: #3498db;
        }
        
        .btn-secondary {
            background-color: #7f8c8d;
            border-color: #7f8c8d;
        }
        
        .color-display {
            font-size: 24px;
            font-weight: 600;
            text-align: center;
            margin: 15px 0;
            padding: 10px;
            border-radius: 8px;
            background-color: #f8f9fa;
        }
        
        hr {
            border-color: #eee;
            margin: 25px 0;
        }
        
        .app-description {
            background-color: white;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            font-size: 16px;
            line-height: 1.6;
        }
    """),
    ui.row(
        ui.column(3,
            ui.div(
                ui.input_action_button("red_btn", "Red Ink", class_="btn-danger", width="100%"),
                ui.input_action_button("green_btn", "Green Ink", class_="btn-success", width="100%"),
                ui.input_action_button("blue_btn", "Blue Ink", class_="btn-primary", width="100%"),
                ui.input_action_button("rotate_btn", "Rotate Pen", class_="btn-secondary", width="100%"),
                class_="control-panel"
            )
        ),
        ui.column(9,
            ui.div(
                ui.output_plot("pen_plot", height="600px", width="100%"),
                class_="plot-container"
            )
        )
    )
)

# Define the server logic
def server(input, output, session):
    # State variables
    pen_state = reactive.Value({
        'color_name': 'Red',
        'color_hex': '#e74c3c',
        'rotation_angle': 0
    })

    # Drawing function
    @render.plot
    def pen_plot():
        # Get current state
        state = pen_state.get()
        
        # Create figure and axis with a larger figure size for better visibility
        plt.style.use('ggplot')
        fig, ax = plt.subplots(figsize=(14, 10))
        
        # Set up plot with more room
        ax.set_xlim(-10, 10)
        ax.set_ylim(-7, 7)
        ax.set_aspect('equal')
        ax.set_facecolor('#f8f9fa')
        
        # Remove axes
        ax.set_xticks([])
        ax.set_yticks([])
        for spine in ax.spines.values():
            spine.set_visible(False)
        
        # Add a nice background rectangle
        background = patches.Rectangle(
            (-10, -7), 20, 14,
            linewidth=0,
            facecolor='#ffffff',
            zorder=-2
        )
        ax.add_patch(background)
                
        # Define the rotation angle (in radians)
        angle = state['rotation_angle']
        
        # Pen dimensions
        pen_length = 8.0
        pen_width = 1.0
        tip_length = 1.5
        
        # Create a transform for rotation
        cos_ang = np.cos(angle)
        sin_ang = np.sin(angle)
        
        # Rotate point function
        def rotate_point(x, y):
            return x * cos_ang - y * sin_ang, x * sin_ang + y * cos_ang
        
        # Draw pen body with gradient effect
        body_color = '#34495e'  # Darker blue-gray
        
        # Define corners of the pen body
        x0, y0 = -pen_length/2, -pen_width/2  # Bottom-left
        x1, y1 = pen_length/2, -pen_width/2   # Bottom-right
        x2, y2 = pen_length/2, pen_width/2    # Top-right
        x3, y3 = -pen_length/2, pen_width/2   # Top-left
        
        # Rotated corners
        rx0, ry0 = rotate_point(x0, y0)
        rx1, ry1 = rotate_point(x1, y1)
        rx2, ry2 = rotate_point(x2, y2)
        rx3, ry3 = rotate_point(x3, y3)
        
        # Draw pen body
        pen_body = patches.Polygon(
            [[rx0, ry0], [rx1, ry1], [rx2, ry2], [rx3, ry3]],
            closed=True,
            facecolor=body_color,
            edgecolor='#2c3e50',
            linewidth=1.5
        )
        ax.add_patch(pen_body)
        
        # Add highlight to pen body for 3D effect
        highlight_width = pen_width * 0.4
        hx0, hy0 = -pen_length/2, -pen_width/2 + highlight_width  # Bottom-left
        hx1, hy1 = pen_length/2, -pen_width/2 + highlight_width   # Bottom-right
        hx2, hy2 = pen_length/2, -pen_width/2 + highlight_width*2  # Top-right
        hx3, hy3 = -pen_length/2, -pen_width/2 + highlight_width*2  # Top-left
        
        # Rotated corners
        rhx0, rhy0 = rotate_point(hx0, hy0)
        rhx1, rhy1 = rotate_point(hx1, hy1)
        rhx2, rhy2 = rotate_point(hx2, hy2)
        rhx3, rhy3 = rotate_point(hx3, hy3)
        
        # Draw highlight
        pen_highlight = patches.Polygon(
            [[rhx0, rhy0], [rhx1, rhy1], [rhx2, rhy2], [rhx3, rhy3]],
            closed=True,
            facecolor='#4e6d8c',
            edgecolor=None,
            alpha=0.6
        )
        ax.add_patch(pen_highlight)
        
        # Pen tip (triangle) at right end of pen
        tip_x = pen_length/2
        tip_width = pen_width
        
        # Define corners of the pen tip
        tx0, ty0 = tip_x, -tip_width/2            # Bottom-left
        tx1, ty1 = tip_x + tip_length, 0          # Tip
        tx2, ty2 = tip_x, tip_width/2             # Top-left
        
        # Rotate points
        rtx0, rty0 = rotate_point(tx0, ty0)
        rtx1, rty1 = rotate_point(tx1, ty1)
        rtx2, rty2 = rotate_point(tx2, ty2)
        
        # Draw pen tip with current color
        pen_tip = patches.Polygon(
            [[rtx0, rty0], [rtx1, rty1], [rtx2, rty2]],
            closed=True,
            facecolor=state['color_hex'],
            edgecolor='#333333',
            linewidth=1.5
        )
        ax.add_patch(pen_tip)
        
        # Pen clip (small rectangle on top of pen)
        clip_length = pen_length * 0.3
        clip_width = 0.25
        clip_x = -pen_length * 0.3
        clip_y = pen_width/2
        
        # Define corners of the clip
        cx0, cy0 = clip_x, clip_y                    # Bottom-left
        cx1, cy1 = clip_x + clip_length, clip_y      # Bottom-right
        cx2, cy2 = clip_x + clip_length, clip_y + clip_width  # Top-right
        cx3, cy3 = clip_x, clip_y + clip_width       # Top-left
        
        # Rotate points
        rcx0, rcy0 = rotate_point(cx0, cy0)
        rcx1, rcy1 = rotate_point(cx1, cy1)
        rcx2, rcy2 = rotate_point(cx2, cy2)
        rcx3, rcy3 = rotate_point(cx3, cy3)
        
        # Draw pen clip
        pen_clip = patches.Polygon(
            [[rcx0, rcy0], [rcx1, rcy1], [rcx2, rcy2], [rcx3, rcy3]],
            closed=True,
            facecolor='#2c3e50',
            edgecolor='#1c2e40',
            linewidth=1.5
        )
        ax.add_patch(pen_clip)
        
        # Horizontal divider in pen body (shows the multi-color mechanism)
        divider_x = -pen_length * 0.1
        
        # Define points for the divider line
        dx0, dy0 = divider_x, -pen_width/2
        dx1, dy1 = divider_x, pen_width/2
        
        # Rotate points
        rdx0, rdy0 = rotate_point(dx0, dy0)
        rdx1, rdy1 = rotate_point(dx1, dy1)
        
        # Draw divider line
        ax.plot([rdx0, rdx1], [rdy0, rdy1], color='#1c2e40', linewidth=2)
        
        # Color selector buttons on pen
        button_radius = 0.35
        button_x = -pen_length * 0.35
        buttons_spacing = 0.7
        button_colors = ['#e74c3c', '#2ecc71', '#3498db']  # Match UI buttons
        button_names = ['Red', 'Green', 'Blue']
        button_y = -pen_width * 0.8
        
        # Draw three color selector buttons
        for i, color in enumerate(button_colors):
            bx = button_x - i * buttons_spacing
            rbx, rby = rotate_point(bx, button_y)
            
            # Highlight the selected color
            edge_width = 3 if color.upper() == state['color_hex'].upper() else 1.5
            edge_color = '#1c2e40' if color.upper() == state['color_hex'].upper() else '#333333'
            
            # Draw button with shadow effect for 3D look
            shadow = patches.Circle(
                (rbx+0.05, rby-0.05),
                button_radius,
                facecolor='#00000022',
                zorder=1
            )
            ax.add_patch(shadow)
            
            button = patches.Circle(
                (rbx, rby),
                button_radius,
                facecolor=color,
                edgecolor=edge_color,
                linewidth=edge_width,
                zorder=2
            )
            ax.add_patch(button)
            
            # Add label to the button
            if color.upper() == state['color_hex'].upper():
                ax.text(
                    rbx, rby - button_radius - 0.3,
                    button_names[i],
                    ha='center',
                    va='center',
                    fontsize=10,
                    fontweight='bold',
                    color='#333333',
                    bbox=dict(facecolor='white', alpha=0.7, edgecolor='none', pad=2, boxstyle="round,pad=0.3")
                )
        
        # Create a nicer paper area with shadow
        paper_width = 2.0
        paper_height = 1.5
        paper_x = -paper_width/2
        paper_y = -10
        
        # Draw paper with rounded corners
        paper_verts = [
            (paper_x, paper_y + 0.3),                 # bottom left with radius
            (paper_x, paper_y + paper_height - 0.3),  # top left with radius
            (paper_x + 0.3, paper_y + paper_height),  # top left corner
            (paper_x + paper_width - 0.3, paper_y + paper_height),  # top right corner
            (paper_x + paper_width, paper_y + paper_height - 0.3),  # top right with radius
            (paper_x + paper_width, paper_y + 0.3),   # bottom right with radius
            (paper_x + paper_width - 0.3, paper_y),   # bottom right corner
            (paper_x + 0.3, paper_y),                 # bottom left corner
            (paper_x, paper_y + 0.3),                 # back to start
        ]
        
        paper_codes = [
            Path.MOVETO,
            Path.LINETO,
            Path.CURVE3,
            Path.LINETO,
            Path.CURVE3,
            Path.LINETO,
            Path.CURVE3,
            Path.LINETO,
            Path.CURVE3,
        ]
        
        paper_path = Path(paper_verts, paper_codes)

        # Add ruled lines on the paper
        for i in range(1, 3):
            y_pos = paper_y + (paper_height/3) * i

        
        # Add sample text in the current color
        sample_text = "Hello, World!"
        ax.text(
            0, paper_y + paper_height/2,
            sample_text,
            color=state['color_hex'],
            fontsize=24,
            ha='center',
            va='center',
            fontweight='bold',
            family='sans-serif',
            zorder=4
        )
        
        # Add indicators for the active parts
        arrow_props = dict(
            arrowstyle='->',
            connectionstyle='arc3,rad=0.2',
            linewidth=2,
            color='#2c3e50',
            shrinkA=5,
            shrinkB=5
        )
                
        return fig
    
    @render.text
    def current_color():
        # Return the current color name with custom styling
        state = pen_state.get()
        return f"{state['color_name']}"
    
    # Color change handlers
    @reactive.Effect
    @reactive.event(input.red_btn)
    def change_to_red():
        state = pen_state.get().copy()
        state['color_name'] = 'Red'
        state['color_hex'] = '#e74c3c'
        pen_state.set(state)
    
    @reactive.Effect
    @reactive.event(input.green_btn)
    def change_to_green():
        state = pen_state.get().copy()
        state['color_name'] = 'Green'
        state['color_hex'] = '#2ecc71'
        pen_state.set(state)
    
    @reactive.Effect
    @reactive.event(input.blue_btn)
    def change_to_blue():
        state = pen_state.get().copy()
        state['color_name'] = 'Blue'
        state['color_hex'] = '#3498db'
        pen_state.set(state)
    
    # Rotation handler
    @reactive.Effect
    @reactive.event(input.rotate_btn)
    def rotate_pen():
        state = pen_state.get().copy()
        
        # Rotate by 45 degrees (π/4 radians)
        state['rotation_angle'] = (state['rotation_angle'] + np.pi/4) % (2 * np.pi)
        pen_state.set(state)

# Create and run the app
app = App(app_ui, server)
```





```{shinylive-python}
#| standalone: true
#| viewerHeight: 690
import math
from shiny import App, ui, reactive, render

# Define UI
app_ui = ui.page_fluid(
    ui.h2("TRIZ Universal Principle Demonstration", style="text-align: center;"),
    ui.p("This shows a tool that can work as both a screwdriver and an electrical tester", style="text-align: center;"),
    ui.div(
        ui.input_action_button("screwdriver_btn", "Use as Screwdriver", style="margin: 5px;"),
        ui.input_action_button("tester_btn", "Use as Electrical Tester", style="margin: 5px;"),
        ui.input_action_button("reset_btn", "Reset", style="margin: 5px;"),
        style="text-align: center; margin-bottom: 20px;"
    ),
    ui.div(
        ui.output_text("status_text"),
        style="text-align: center; font-weight: bold; margin: 10px; height: 30px;"
    ),
    ui.div(
        ui.output_ui("animation_display"),
        style="width: 600px; height: 300px; background-color: #f0f0f0; margin: 0 auto; position: relative; border: 1px solid #ccc;"
    )
)

def server(input, output, session):
    # Reactive values
    frame = reactive.Value(0.0)           # Tracks the current animation frame
    animation_running = reactive.Value(False)  # Controls whether animation is active
    current_state = reactive.Value("idle")     # Tracks the tool's state

    # Status text
    @output
    @render.text
    def status_text():
        state = current_state.get()
        current_frame = frame.get()
        if state == "idle":
            return "Tool ready for use"
        elif state == "screwdriver":
            if 5 <= current_frame < 15:
                return "Using as a screwdriver - Turning the screw slowly..."
            else:
                return "Using as a screwdriver"
        elif state == "tester":
            if 5 <= current_frame < 15:
                if int(current_frame) % 2 == 0:  # Flicker effect in text
                    return "Using as an electrical tester - Current detected! ⚡"
                else:
                    return "Using as an electrical tester - Testing circuit..."
            else:
                return "Using as an electrical tester"

    # Main animation display
    @output
    @render.ui
    def animation_display():
        current_frame = frame.get()
        state = current_state.get()
        
        # Basic elements always shown
        elements = []
        
        # Set horizontal position based on state - adjusted for proper contact
        if state == "screwdriver":
            tool_left = 152
        elif state == "tester":
            tool_left = 375  # Further adjusted to properly align with outlet
        else:
            tool_left = 150

        # Initial vertical position; this will animate.
        tool_top = 20  
        # Light color - illuminate in tester mode by default
        neon_color = "#888888"  # Default: off
        if state == "tester":
            neon_color = "#FFFF00"  # Always on in tester mode
        
        tool_rotate = "rotate(0deg)"
        
        if state == "screwdriver":
            # Animate screw depth during rotation - more realistic with slight delay
            screw_depth = 0
            # Draw more realistic screw - positioned higher to be visible and reachable
            elements.append(
                ui.div(
                    # Screw head
                    ui.div(style="position: absolute; width: 20px; height: 6px; background-color: #444; top: 0; border-radius: 3px; box-shadow: 0 1px 2px rgba(0,0,0,0.3);"),
                    # Slot in screw head
                    ui.div(style="position: absolute; width: 14px; height: 2px; background-color: #222; top: 2px; left: 3px;"),
                    # Screw shaft
                    ui.div(style=f"position: absolute; width: 8px; height: {20 + screw_depth}px; background-color: #666; top: 6px; left: 6px; background-image: linear-gradient(90deg, #555, #777); border-radius: 0 0 4px 4px;"),
                    style=f"position: absolute; bottom: {80 + screw_depth}px; left: 157px; height: 26px; width: 20px;"
                )
            )
        
        elif state == "tester":
            # Normalize to 0-1 over 20 seconds (slower animation)
            t = current_frame / 20
            
            # Make the light always on in tester mode, with flickering when touching
            flicker_speed = current_frame * 5
            flicker_intensity = abs(((flicker_speed % 10) - 5) / 5)
            
            
            # Highly realistic electrical outlet with proper 3D effects and details
            elements.append(
                ui.div(
                    # Main outlet plate with 3D effect
                    ui.div(style="position: absolute; width: 70px; height: 120px; background: linear-gradient(135deg, #f5f5f5, #e0e0e0); border: 1px solid #bbb; border-radius: 8px; box-shadow: 2px 2px 5px rgba(0,0,0,0.2), inset 0 0 2px rgba(255,255,255,0.8); top: 5px; left: 5px;"),
      
                    # Socket holes (top)
                    ui.div(style="position: absolute; width: 8px; height: 22px; background-color: #111; top: 28px; left: 25px; border-radius: 2px; box-shadow: inset 0 0 2px rgba(0,0,0,0.8);"),
                    ui.div(style="position: absolute; width: 8px; height: 22px; background-color: #111; top: 28px; left: 47px; border-radius: 2px; box-shadow: inset 0 0 2px rgba(0,0,0,0.8);"),
                    
                    # Socket holes (bottom)
                    ui.div(style="position: absolute; width: 8px; height: 22px; background-color: #111; top: 78px; left: 25px; border-radius: 2px; box-shadow: inset 0 0 2px rgba(0,0,0,0.8);"),
                    ui.div(style="position: absolute; width: 8px; height: 22px; background-color: #111; top: 78px; left: 47px; border-radius: 2px; box-shadow: inset 0 0 2px rgba(0,0,0,0.8);"),
                    
                    # Outlet manufacturer branding detail
                    ui.div(style="position: absolute; width: 20px; height: 4px; background-color: rgba(0,0,0,0.1); top: 62px; left: 30px; border-radius: 1px;"),
                    
                    style="position: absolute; bottom: 150px; left: 361px;"
                )
            )
        
        # Draw the tool (common for both modes, but with more detail)
        elements.append(
            ui.div(
                # Handle
                ui.div(
                    # Main handle body
                    ui.div(style="position: absolute; width: 30px; height: 70px; background-color: #d32f2f; border-radius: 5px; background-image: linear-gradient(to right, #c62828, #d32f2f, #c62828);"),
                    # Handle grip texture
                    ui.div(style="position: absolute; width: 24px; height: 50px; border-left: 2px dotted rgba(0,0,0,0.2); border-right: 2px dotted rgba(0,0,0,0.2); top: 10px; left: 3px;"),
                    # Handle top cap
                    #ui.div(style="position: absolute; width: 30px; height: 5px; background-color: #b71c1c; top: 0; border-radius: 5px 5px 0 0;"),
                    # Handle bottom transition
                    #ui.div(style="position: absolute; width: 30px; height: 5px; background-color: #b71c1c; bottom: 0; border-radius: 0 0 5px 5px;"),
                    #style="position: absolute; width: 30px; height: 70px;"
                ),
                # Neon light with animated glow
                ui.div(
                    # Bulb
                    ui.div(style=f"width: 20px; height: 20px; background-color: {neon_color}; border-radius: 50%; box-shadow: 0 0 5px {neon_color};"),
                    # Light housing
                    ui.div(style="position: absolute; width: 22px; height: 22px; border: 1px solid #999; border-radius: 50%; top: -1px; left: -1px; background-color: rgba(255,255,255,0.2);"),
                    style=f"position: absolute; top: 25px; left: 5px; filter: drop-shadow(0 0 8px {neon_color});"
                ),
                # Shaft with metal texture
                ui.div(
                    # Main shaft
                    ui.div(style="position: absolute; width: 6px; height: 100px; background-color: silver; left: 0; background-image: linear-gradient(to right, #a0a0a0, #e0e0e0, #a0a0a0);"),
                    # Highlight reflection on shaft
                    ui.div(style="position: absolute; width: 2px; height: 100px; background-color: rgba(255,255,255,0.5); left: 2px;"),
                    style="position: absolute; width: 6px; height: 100px; top: 70px; left: 12px;"
                ),
                # Tip with more detailed styling
                ui.div(
                    # Flat tip
                    ui.div(style="position: absolute; width: 10px; height: 5px; background-color: #444; top: 90; left: 90; border-radius: 9px; background-image: linear-gradient(to bottom, #666, #333);"),
                    # Tip edge highlight
                    ui.div(style="position: absolute; width: 8px; height: 1px; background-color: rgba(255,255,255,0.3); top: 9.5px; left: 9px;"),
                    style="position: absolute; width: 90px; height: 9px; top: 166px; left: 10px;"
                ),
                style=f"position: absolute; left: {tool_left}px; top: {tool_top}px; transform: {tool_rotate}; transition: top 0.1s ease, transform 0.1s ease;"
            )
        )
        

        
        return ui.div(*elements)

    # Handler for screwdriver button
    @reactive.Effect
    @reactive.event(input.screwdriver_btn)
    def handle_screwdriver():
        current_state.set("screwdriver")
        frame.set(0.0)
        animation_running.set(True)

    # Handler for tester button
    @reactive.Effect
    @reactive.event(input.tester_btn)
    def handle_tester():
        current_state.set("tester")
        frame.set(0.0)
        animation_running.set(True)

    # Handler for reset button
    @reactive.Effect
    @reactive.event(input.reset_btn)
    def handle_reset():
        current_state.set("idle")
        animation_running.set(False)
        frame.set(0.0)

# Create app
app = App(app_ui, server)
```